 attachFiles 附上文件夹
 hrmobile 可移动的资源
	【App.SHA-256.js】 ←加密js
	【common.js】 ←common.js跟普通的js包含文件并没有其他不一样,主要是一些javascript经常要用到的函数,也定义了一些包括浏览器兼容,cookie操作,字符串函数扩展,图片操作等脚本,都是比较简单的函数扩展,直接看代码比较容易理解 有编程基础的应该清楚程序头文件的作用,他就相当于javascript的一个头文件,为了具有更广泛的通用性,一般不调用其他文件,因此这个文件也可以直接用于其他页面js的扩展调用 其中的函数大多是为了基于代码重用的目的方便在页面中调用,每次版本更新对这个文件的修改除了某些函数算法的优化,还要应对程序的扩展而对函数调用接口的更新,跟程序头文件的操作方式类似.
	【Init.js】 ← 手机样式初始化
	【Login.js】 ←登录
	【Main.js】

用户体验三大要素:
	→【别让我等】
	→【别让我想】
	→【别让我烦】
        
  SVN密码:姓名  
  SVN密码 姓名@2017
  
        【tomcat】汤姆凯特
        【BIOS】白殴死
=======================================================================
        SSH框架优势

        1.    典型的三层构架体现MVC（模型Model,视图View和控制）思想，可以让开发人员减轻重新建立解决复杂问题方案的负担和精力。便于敏捷开发出新的需求，降低开发时间成本。
        2.    良好的可扩展性，ssh主流技术有强大的用户社区支持它，所以该框架扩展性非常强，针对特殊应用时具有良好的可插拔性，避免大部分因技术问题不能实现的功能。
        3.    良好的可维护性，业务系统经常会有新需求，三层构架因为逻辑层和展现层的合理分离，可使需求修改的风险降低到最低。随着新技术的流行或系统的老化，系统可能需要重构，ssh构架重构成功率要比其他构架高很多。
        4.    优秀的解耦性，很少有软件产品的需求从一开始就完全是固定的。客户对软件需求，是随着软件开发过程的深入，不断明晰起来的。因此，常常遇到软件开发到一定程度时，由于客户对软件需求发生了变化，使得软件的实现不得不随之改变。ssh三层构架，控制层依赖于业务逻辑层，但绝不与任何具体的业务逻辑组件耦合，只与接口耦合；同样，业务逻辑层依赖于DAO层，也不会与任何具体的DAO组件耦合，而是面向接口编程。采用这种方式的软件实现，即使软件的部分发生改变，其他部分也不会改变。
        5.    Struts2优势
        a)      Struts2 Action对象为每一个请求产生一个实例，因此没有线程安全问题。
        b)      Struts2强大的标签库提高开发效率。
        c)      页面脉络清晰，通过查看配置文件把握整个系统的关系，方便开发人员岗位流动时的维护。
        6.    hibernate优势
        a)      hibernate是JDBC轻量级的封装，占用内存较少，性能比较高。与JDBC相比，如果开发JDBC的人员技术能力非常强，hibernate执行效率会比JDBC弱一些，但是大部分情况是程序员在使用JDBC时是不可能做到最高效率，hibernate可以帮大部分开发人员提高运行效率。
        b)      可以引入第三方二级缓存，提高系统查询效率，减少系统里存在大量单例类（singleton），大量的单例类,会降低系统的可测试性和面向对象程度。
        c)      优秀的orm框架，理论上节省开发人员95%的开发工作量。
        d)      Hibernate兼容JDBC。理论上可以应用在任何使用JDBC的场景。
        7.    spring优势
        a)      spring提高了一种对象管理方法，有效的组织系统中间层对象。是框架的完美“粘合剂”。
        b)      有利于面向接口编程习惯的养成，使代码结构清晰。
        你们都是有经验的开发人员
//=======================================================================
        ctx是什么词的缩写
        【context】上下文。
//==============================================
        MyEclipse8.5汉化说明[MyEclipse v8.5汉化说明]
       1.把下载好的汉化包里的language的文件夹全覆盖到你安装的MyEclipse 8.5文件夹下
        2.用myeclipse创建一个JAVA项目，将CreatePluginsConfig.java复制这个项目中src中。
        3.更改【main】方法路径为当前MyEclipse 8.5路径
        4.右键【Run As - Java Application】或【Alt + Shift + X】 ,再按【J】
        5.在控制台里将代码复制出来
        6.打开【MyEclipse 8.5主目录\configuration\org.eclipse.equinox.simpleconfigurator】
        	用记事本把bundles.info 打开，在最后一行回车一下。把刚才在控制台里面的内容都粘贴进去保存
        7.找到MyEclipse 8.5的目录下找到myeclipse.ini文件，用记事本打开在最后一行加多一条语句
        【-Duser.language=zh】
        
        JRE优化内存;
                1.【窗口(W) - 首选项 - Jva - 已安装的 JRE - 编辑(E) - 缺省 VM 参数】
                2.输入【-Xms1024M -Xmx1024M -XX:MaxPermSize=400M】
        
        Tomcat优化内存:
                1.【窗口(W) - 首选项 - MyEclipse - Servers - Tomcat - Tomcat 6.x】 - 【Optional program arguments(可选程序参数)】
                2.输入【-Xms256m -Xmx512m -XX:MaxNewSize=256m -XX:MaxPermSize=256m】
                
                
          MyEclipse无法自动构建
          【窗口(W) - 首选项 - 常规 - 工作空间】
              √【自动构建】
              ×【自动刷新】
              √【再构建之前自动保存】      
//=====================【MyEclipse快捷键】=========================
        MyEclipse 买 一棵力普斯
        sencha touch 赛驰 塔尺
        
	【Ctrl + Shift + R】 搜索左侧项目文件
                它可以打开当前eclipse的工作区中所有(打开的)工程中所有类型的文件,但只限手动编写的文件,不含工程中引用到的jar包中的类、接口；
        【Ctrl + Shift + T】 搜索左侧项目文件
                open type, 打开类型. 
                它可以打开当前eclipse的工作区中所有(打开的)工程中所有java文件,包括jar包中的类和接口.
	【At+ Shift + Q】 + 【Q】 打开显示视图 可以搜索视图
	比如导航
	【Ctrl + Shift + D】调试模式启动服务器
	【Ctrl + Shift + R】启动服务器
	【Ctrl + Shift + S】关闭服务器
        【Ctrl + Shift + F6】切换编辑器视图
	【Ctrl + D】 删除
	【Ctrl + /】 单行注释
	【Ctrl + Shift + /】多行注释
        【Ctrl + L】跳转多少行
        【Ctrl + Q】定位到最后编辑的地方 
	【Ctrl + Shift + \】取消多行注释
	【Ctrl + M】切换全部编辑窗口
	【Ctrl + Shift + K】 查找上一个
	【Ctrl + K】 查找下一个
	【Ctrl + Shift + S】保存全部项目
	选中左侧项目【Alt + Enter】回车,打开项目属性
	【Ctrl + Shift + F】格式化代码块
	【Ctrl + F6】切换tab切换窗口,可改成【Ctrl + Tab】键更方便
	【↑】 或 【↓】Ctrl+F后输入了多个关键字,可以这样切换
	【Ctrl + Alt + ↓】 复制当前行到下一行(复制增加) 
	【Ctrl + ↑】复制当前行到上一行(复制增加)
	【Alt + Shift + R】 重命名 或选中F2 	
	按Home 再Delte,从开发开始删除字母(其实直接在开头Del键就是从开头删除)
	【Ctrl + H】查看文件内字符串	
	【Ctrl + Alt +↑】或【Ctrl + Alt + ↓】复制当前行到之前或之后
	【Alt +↑】或【Alt + ↓】移动当前行到之前或之后
        【Ctrl + Q】返回上一次编辑位置
        【Ctrl + Shift + X】把当前选中的文本全部变为小写 
        【Ctrl + Shift + Y】 把当前选中的文本全部变为小写 
        
	【Alt +Shift + Q】+【Q】打开其他视图
	【Alt +Shift + Q】+【S】打开搜索
	【Alt +Shift + Q】+【C】打开控制台
	双击对象或函数开头函数,可以选中对应的代码块

        选择一行[选中一行][选中单行][选择单行]
        【Shift】 + 【End】   选中从光标到该行结束位置
        【Shift】 + 【Home】  选中从光标到该行开始位置
        
        【Ctrl + E】 快速转换编辑器
        
        【Shift + Alt + A】 进入多行选择状态,再点击一遍恢复
        【Ctrl + Shift + E】打开MyEclipse的菜单选项“Edit/编辑”，可以看到当前程序的保存路径，并且可以在你打开的所有程序中选择你想编辑的程序
        
//===============================================
         方便看java方法
                1.打开【包资源管理器】
                        【窗口(W) - 显示视图(V) - 包资源管理器】
                        快捷键:
	                【Alt + Shift + Q】 + 【P】
                2.【项目资源管理器 -- 右上角▽ - 包表示法(P)】 把【平面(F)】改成【分层的(H)】
//===============================================
         MyEclipse启动不了项目[MyEclipse启动不了erp][MyEclipse启动不了项目][启动不了项目]
         1.查看Tomcat目录下是否编译文件
                【项目\WEB-INF\classes\com\zhiwei\credit\core\creditAssignment】
                没文件说明没编译成功
                
         2.打开【问题】查找原因       
               【窗口(W) - 显示视图(V) - 问题】Problems
                快捷键:
                	【Alt + Shift + Q】 + 【X】
                        
        ① 同步SVN
        ② 选中左侧项目,右键项目属性(R)或快捷键【Alt + Enter】打开属性
                【Java构建路径 - 库(L)】-选择【添加 JRE...】引入【项目目录\WebRoot\WEB-INF\lib】所有jar包
        ③ 清理项目
                【项目(P) - 清理(N)】勾选【自动构建(M)】
                        选择【清理(N)】,选择第二个【清理下面所选择项目(S)】,选择对应项目【OK】
        ④ 选中左侧项目,F5刷新项目
        
        其他方法
                1.打开【窗口(W) - 首选项(P) - Java - 编译器】
                2.Java一致下 - 编译器一致性级别(I): 选择【1.6】
                3.【应用(A)】
                4.OK
//===============================================
         MyEclipse添加JRE
         ① 选中左侧项目,右键项目属性(R)或快捷键【Alt + Enter】打开属性
         ② 【Java构建路径 - 库(L)】-选择【添加 JRE...】引入【项目目录\WebRoot\WEB-INF\lib】所有jar包
//===============================================
        Archive for required library
        1.打开【导航器】
                        【窗口(W) - 显示视图(V) - 其他(O)】
                         快捷键:
                	【Alt + Shift + Q】 + 【O】
        2.选择【常规 - 导航器】- OK
        3.用记事本打开项目根目录的【.classpath】文件，找到“<classpathentry kind="lib" path="WebContent/WEB-INF/lib/readme.txt【报错文件】"/>”这一行，删掉
        PS:将引入的不是【*.jar】后缀的都删掉
//===============================================
                解决Cannot change version of project facet Dynamic web module to 2.5
                        src;https://blog.csdn.net/steveguoshao/article/details/38414145
                
                1.把Servlet改成2.5，打开项目的web.xml，改之前：
                <!DOCTYPE web-app PUBLIC  
                 "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"  
                 "http://java.sun.com/dtd/web-app_2_3.dtd" >  
                  
                <web-app>  
                  <display-name>Archetype Created Web Application</display-name>  
                </web-app>  
                改后
                <?xml version="1.0" encoding="UTF-8"?>  
                        <web-app version="2.5"  
                            xmlns="http://java.sun.com/xml/ns/javaee"  
                            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
                            xsi:schemaLocation="http://java.sun.com/xml/ns/javaee  
                            http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">  
                              
                          <display-name>Archetype Created Web Application</display-name>  
                        </web-app> 
                        
                2.修改项目的设置，在Navigator下打开项目.settings目录下的org.eclipse.jdt.core.prefs
                eclipse.preferences.version=1  
                org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled  
                org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.5  
                org.eclipse.jdt.core.compiler.compliance=1.5  
                org.eclipse.jdt.core.compiler.problem.assertIdentifier=error  
                org.eclipse.jdt.core.compiler.problem.enumIdentifier=error  
                org.eclipse.jdt.core.compiler.problem.forbiddenReference=warning  
                org.eclipse.jdt.core.compiler.source=1.5  
                
                把1.5改成1.6
                eclipse.preferences.version=1  
                org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled  
                org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.6  
                org.eclipse.jdt.core.compiler.compliance=1.6  
                org.eclipse.jdt.core.compiler.problem.assertIdentifier=error  
                org.eclipse.jdt.core.compiler.problem.enumIdentifier=error  
                org.eclipse.jdt.core.compiler.problem.forbiddenReference=warning  
                org.eclipse.jdt.core.compiler.source=1.6  
                
                打开org.eclipse.wst.common.component
                <?xml version="1.0" encoding="UTF-8"?>  
                <project-modules id="moduleCoreId" project-version="1.5.0">  
                    <wb-module deploy-name="test">  
                        <wb-resource deploy-path="/" source-path="/target/m2e-wtp/web-resources"/>  
                        <wb-resource deploy-path="/" source-path="/src/main/webapp" tag="defaultRootSource"/>  
                        <wb-resource deploy-path="/WEB-INF/classes" source-path="/src/main/java"/>  
                        <wb-resource deploy-path="/WEB-INF/classes" source-path="/src/main/resources"/>  
                        <property name="context-root" value="test"/>  
                        <property name="java-output-path" value="/test/target/classes"/>  
                    </wb-module>  
                </project-modules>  

                把project-version="1.5.0"改成project-version="1.6.0"
                <?xml version="1.0" encoding="UTF-8"?>  
                <project-modules id="moduleCoreId" project-version="1.6.0">  
                    <wb-module deploy-name="test">  
                        <wb-resource deploy-path="/" source-path="/target/m2e-wtp/web-resources"/>  
                        <wb-resource deploy-path="/" source-path="/src/main/webapp" tag="defaultRootSource"/>  
                        <wb-resource deploy-path="/WEB-INF/classes" source-path="/src/main/java"/>  
                        <wb-resource deploy-path="/WEB-INF/classes" source-path="/src/main/resources"/>  
                        <property name="context-root" value="test"/>  
                        <property name="java-output-path" value="/test/target/classes"/>  
                    </wb-module>  
                </project-modules> 
                
                
                打开org.eclipse.wst.common.project.facet.core.xml
                
                <?xml version="1.0" encoding="UTF-8"?>  
                <faceted-project>  
                  <fixed facet="wst.jsdt.web"/>  
                  <installed facet="java" version="1.5"/>  
                  <installed facet="jst.web" version="2.3"/>  
                  <installed facet="wst.jsdt.web" version="1.0"/>  
                </faceted-project>  
                把<installed facet="java" version="1.5"/>改成<installed facet="java" version="1.6"/>，把  <installed facet="jst.web" version="2.3"/>改成  <installed facet="jst.web" version="2.5"/>
                <?xml version="1.0" encoding="UTF-8"?>  
                <faceted-project>  
                  <fixed facet="wst.jsdt.web"/>  
                  <installed facet="java" version="1.6"/>  
                  <installed facet="jst.web" version="2.5"/>  
                  <installed facet="wst.jsdt.web" version="1.0"/>  
                </faceted-project>  

                都改好之后在打开看看，已经把【Dynamic web module】改成了2.5
                1.选中左侧项目,右键项目属性(R)或快捷键【Alt + Enter】打开属性
                2.【MyEclipse - Project Facets(项目方面)】查看
//===============================================
	Java快捷键
	选中函数方法
	【Ctrl + O】,搜索要获取的java函数名
	双击选中打断点那行左侧,或者【Ctrl + Shift + B】,或右键 Toggle BreakPrint
	【F6】每行执行
	【F8】跳到下个节点,如果没设置下个打断点,那么就跑完整个文件
	【Ctrl + F2】关闭打断点
	
	Run(运行) -- Skip All Breakpoints(跳过所有断点)
	右上角【Debug -- 】终止调试,按两个X
	【Ctrl + Shift + I】查看断点参数

	【Ctrl + Home】 返回滑轮顶部
        【Ctrl + End】 返回滑轮底部
//===============================================
	※:【Navicat】【MySql】[mysql快捷键][数据库快捷键][mysql快捷键[数据库查询快捷键]
	【Ctrl + Q】          打开查询窗口
        【Ctrl + Shift + Q】 新窗口打开查询窗口
	【Ctrl + R】		运行查询 
        【Ctrl + Shift + R】	选中单条语句进行查询 
	【Ctrl + /】           注释sql语句
	【Ctrl + Shift +/】  解除注释
	【Ctrl + R】         运行查询窗口的sql语句
	【Ctrl + Shift + R】   只运行选中的sql语句
	【F6】              打开一个mysql命令行窗口
	【Ctrl + L】           删除一行
	【Ctrl + N】         打开一个新的查询窗口
	【Ctrl + W】       关闭一个查询窗口
	【Ctrl + D】     在查询表数据界面打开一个该表结构的窗口

        【Shift + Enter】选中单元格 
	【Ctrl + Shift + G】:在workspace中搜索引用，查找和此文件同名的java文件。
	【Ctrl + Shift + T】 :搜索类；Ctrl+Shift+F:搜索jsp（这两个没用过……）
        
       	【Ctrl + Shift + ]】鼠标移到大括号或中括号,选中代码快
        【Ctrl + Shift + [】分割两个窗口
        
       对比文件
       右键文件名【Replace With -- 修订版(R)】  
        
        
        java创建get和set方法[在没action后缀方法,给数据库添加字段,获取和操作]
        1.右键【重构(T) -- 引入参数对象(P)】
        2.选择【创建 getter(G)】和【创建 setter(S)】
        3.确定
        
        Java添加必须的库
        ﻿﻿WebRoot\WEB-INF\template\proj_wenandai\config.properties
        
        1.选择项目【Alt + Enter】 或右键 -- 【属性】
        2.选中【Java 构建路径 -- 库(L) -- 添加外部JAR(X)】
        3.选中【项目名\WebRoot\WEB-INF\lib】下所有jar文件,
        4.确定
        
        【Tomcat7_8049\webapps\p2p_heb_hbxt1\WEB-INF\classes)】添加
        1.【log4j.properties】文件
        2.添加内容,
        
        
       自动保存
       选项搜索 build
       或
       1.【首选项 - Run/Debug - Launching】
       2.第一个选择【Always】
//===============================================
        ﻿﻿log4j.properties配置如下：  
          
        log4j.rootLogger=info,Console,R  
          
        log4j.appender.Console=org.apache.log4j.ConsoleAppender  
          
        log4j.appender.Console.layout=org.apache.log4j.PatternLayout  
          
        #log4j.appender.Console.layout.ConversionPattern=%d [%t] %-5p %c - %m%n  
          
        log4j.appender.Console.layout.ConversionPattern=%d{yy-MM-dd HH:mm:ss} %5p %c{1}:%L - %m%n  
          
          
          
        log4j.appender.R=org.apache.log4j.DailyRollingFileAppender  
          
        log4j.appender.R.File=${catalina.home}/logs/tomcat1.log  
          
        log4j.appender.R.layout=org.apache.log4j.PatternLayout  
          
        log4j.appender.R.layout.ConversionPattern=%d{yyyy.MM.dd HH:mm:ss} %5p %c{1}(%L):? %m%n  
          
          
          
        log4j.logger.org.apache=info,R  
          
        log4j.logger.org.apache.catalina.core.ContainerBase.[Catalina].[localhost]=DEBUG, R  
          
        log4j.logger.org.apache.catalina.core=info,R  
          
        log4j.logger.org.apache.catalina.session=info,R  
//===============================================
        3.【Tomcat7_8049\webapps\p2p_heb_hbxt1\WEB-INF\lib】添加【log4j-1.2.15.jar】和【commons-logging.jar】
        4.每次启动服务时,【Tomcat7_8049\logs】会有报错日志
        
        MAC
	【Shift】选择文件开头,再点击尾,全选
	【Window】键相当于【Ctrl】键
==================================================
	怎样自动换行?
	【窗口】--【首选项】--【Java】--【代码格式】--【格式化程序】--【编辑】--【自动换行(G)】--【在自动换行策略(E)】:选中【Wrap where necessary】
	最后确定就好
        wordwrap
        https://ahtik.com/blog/projects/eclipse-word-wrap/
        https://github.com/ahtik/eclipse-wordwrap
        http://dev.cdhq.de/eclipse/word-wrap/
        
        Unable to read repository at content.xml.
        Unable to read repository at http://ahtik.com/eclipse-update/content.xml.
        sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provid
==================================================
	设置背景色?
	【首选项】--【编辑器】--【文本编辑器】
==================================================
	设置字体颜色?
	【首选项】--【Java】--【语法着色】
==================================================
	更改properties后缀字体颜色?
	【首选项】--【Java】--【属性文件选择器】
==================================================
	怎样设置字体大小?
	【首选项】--【外观】--【颜色和字体】--【基本】--【文本字体】
        Consolas 常规 小四
==================================================
	怎样设置myeclipse默认打开文本方式,使js有高亮错误提示?
	【窗口】 -- 【首选项】 -- 【编辑器】-- 【文本关联】
	选中js,下面选中 【Spket JavaScript Editor (缺省值)】 -- 【缺省值(F)】 -- 【确定】
	ok
==================================================
        MyEclipse设置UTF-8编码
        【窗口(W) -- 首选项(P) -- 常规 - 工作空间】,在右侧左下角,文本文件编码(T),选择【其他(O) -- UTF-8】
==================================================
	MyEclipse中Java提示:
	【窗口 -- 首选项 Java --编辑器 -- 内容辅助】 在java的自定激活触发器:填写
	【.AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz】
==================================================
	首页--项目详情--项目基本信息
	首页--项目管理--项目详情---借款需求
	首页--项目详情--个人客户信息
	首页--项目详情--贷款账户信息
	首页--项目详情--授信信息-资金款项信息

	BpCustPerson 后台的 个人账户表
==================================================
	PhoneGap + SenchaTouch
	SenchaTouch v2.4.0
	
	主要两版本P2P,erp
==================================================
	svn://192.168.0.102/hurong/p2p/branch/proj/gd/gzhll
	广州联络
	Tomcat 汤姆凯特

[VM参数]
JDK v1.6参数
        低配置(当前用myEclipse):
         -Xms512m -Xmx512m -XX:MaxNewSize=512m -XX:MaxPermSize=512m
        
        中配置:
	-Xms512m -Xmx1024m -XX:MaxNewSize=1024m -XX:MaxPermSize=1024m
        
        最大配置:
        -Xms1024m -Xmx1024m -XX:PermSize=128M -XX:MaxNewSize=512m -XX:MaxPermSize=256m -Djava.awt.headless=true
        
        
        erp
        -Xmx1024M -Xms512M -XX:MaxPermSize=512m
        项目无法编译:
        项目右键属性【构造器 - 插件验证】关闭
        
JDK v1.7参数
	-Xms256m -Xmx1024m -XX:PermSize=256m -XX:MaxPermSize=600m
	-Drebel.spring_plugin=true   
	-Drebel.aspectj_plugin=true   
	-Drebel.struts2_plugin=true

        .settings/org.eclipse.wst.common.project.facet.core.xml
	【erp用 JDK v1.6】
	       2.5
         <installed facet="java" version="1.6"/>
          <installed facet="jst.web" version="2.5"/>
	【P2P用 JDK v1.7】
	       2.5
         <installed facet="java" version="1.7"/>
          <installed facet="jst.web" version="2.5"/>
           
           
        VM 自变量(G): JDK v1.6
-Dcatalina.base="C:\tomcat\Tomcat6_8046" -Dcatalina.home="C:\tomcat\Tomcat6_8046" -Dwtp.deploy="C:\tomcat\Tomcat6_8046\webapps" -Djava.endorsed.dirs="C:\tomcat\Tomcat6_8046\endorsed" -Djava.library.path="C:\java\java1.6\bin;C:\tomcat\Tomcat6_8046\bin"

        VM 自变量(G): JDK v1.7
-Dcatalina.base="C:\tomcat\Tomcat8_8048" -Dcatalina.home="C:\tomcat\Tomcat8_8048" -Dwtp.deploy="C:\tomcat\Tomcat8_8048\webapps" -Djava.endorsed.dirs="C:\tomcat\Tomcat8_8048\endorsed" -Djava.library.path="C:\javaa\jdk1.7\bin;C:\tomcat\Tomcat8_8048\bin" 
==========================================================================
	添加项目为空?
	解决方法:
	打开:settings\org.eclipse.wst.common.project.facet.core.xml文件
	在<installed facet="jst.web" version="2.5"/>这行改成2.5
==========================================================================
	没有资源可以从服务器上添加或者删除
	窗口(W)----显示视图(V)---其他(Alt + Shift + Q) + Q
	搜索:导航
	打开:settings\org.eclipse.wst.common.project.facet.core.xml文件
	在<installed facet="jst.web" version="2.5"/>这行改成2.5
==========================================================================
	成功启动服务后,打开路径显示404?
	选中项目--Alt + Enter回车 或者右键【属性(R)】---Java构建路径---库(L)---添加库(A)---选中JER系统库--下一步(N)---选中备用JRE,选中所需jdk7版本--完成.
	然后选中服务里的项目--右键【Clean(redeploy)清洁（重新部署）】-,重新启动服务就好
==========================================================================	
	去掉myeclipse自动更新,加快速度?
	首选项--MyEckuose--Maven---去掉Update Maven projicts on statup
	首选项--常规--启动和关闭
==========================================================================
        把myeclipse的自动验证和自动构建
         【项目(P) -- 自动构建(M)】
         project - -build  automatically
==========================================================================
        提交SVN项目时
	svn: Commit failed (details follow):
	svn: 提交 被 pre-commit 钩子阻塞(退出代码 1) 输出：
	Empty log message not allowed. Commit aborted! 
	解决方法:
		SVN必须填写注释且不少于5个字
==========================================================================
       无法正常提交:
	选择项目--右键 小组(E)--Refresh/Cleanup 再提交就好
==========================================================================
        Exception sending context destroyed event to listener instance of class com.sun.faces.config.ConfigureListener
        java.lang.OutOfMemoryError: PermGen space

        //PermGen space异常的问题
	Run--Run Configuratios...-----自变量
	在VM自变量(G):最后名写:
	→【Xms256m -Xmx512m -XX:MaxNewSize=256m -XX:MaxPermSize=256m】
	Apply--运行(R)
==========================================================================
	添加项目到新建的服务器,却无法自动发布?
	右键新建服务器的项目名-------【Publish】发表
==========================================================================
        MyEclipse破解失败
         com.jniwrapper.util.ProcessorInfo
         
         cmd输入【java -version】不能为9版本,必须为7
         环境变量也得为7,否则会破解失败
==========================================================================
	导入数据库后打开项目为404?
	MySQL账号:credit
	MySQL密码:123456
	端口:3307

	到导航器-项目名【src/jdbc.properties】去修改
==========================================================================
	安卓开发时， Launch canceled! 怎么解决?
	解决方法1：
		拔掉手机连接线再重新连上；
	解决方法2：
		在手机上关闭Debug选项再重新打开，这个选项在手机的"设置->应用程序->开发->USB调试"里。
==========================================================================
	窗口 -- 显示视图 -- 服务器 点击太多导致一打开服务器myeclipse就崩溃?
	 右侧【右键】 -- 【服务器图标】 -- 【关闭(C)】
	      再【右键-【恢复(R)】就没问题了.
==========================================================================
	怎样还原视图窗口?
	1.【窗口(W) -- Perspective -- 复位透视图】来还原
	2.窗口-->首选项-->工作空间-->键 ->恢复默认值
	3.窗口　－－新建　窗口
==========================================================================
	保存后格式化?[Java格式化]
	【窗口 -- 首选项 -- Java -- 编辑器 -- 保存操作】来选择
==========================================================================
	VM参数[VM参数]【VM参数】
2014年以上版本myeclipse版本用VM参数
	【-Xms512m -Xmx1024m -XX:MaxNewSize=1024m -XX:MaxPermSize=1024m】
2014年以下myeclipse版本用VM参数:
	-Xms256m -Xmx1024m -XX:PermSize=256m -XX:MaxPermSize=600m
	-Drebel.spring_plugin=true   
	-Drebel.aspectj_plugin=true   
	-Drebel.struts2_plugin=true
	-Xms512m -Xmx1024m -XX:MaxNewSize=1024m -XX:MaxPermSize=1024m

JDK 6参数换成:
	-Xms512m -Xmx512m -XX:MaxNewSize=512m -XX:MaxPermSize=512m
        -Xms256m -Xmx512m -XX:PermSize=256m -XX:MaxPermSize=600m
        
        
        •修改jdk内存大小
        -Xms100m -Xmx512m -XX:PermSize=256m -XX:MaxPermSize=600m
        -Drebel.spring_plugin=true   
        -Drebel.aspectj_plugin=true   
        -Drebel.struts2_plugin=true

==========================================================================
	服务延迟事件,一般【500ms】就好,500ms跑不起来项目,那么就是报错
	p2p的项目【200ms】就好,推荐用【500ms】
==========================================================================
	erp项目一直卡在jBPM version info: library[4.4-SNAPSHOT], schema[null]?
	1.删除Tomcat6 下的【webapps -- ROOT】文件夹和work下的【Catalina】文件夹
		最后删除【temp】文件夹下所有内容
	2.双击要运行的Tomcat服务
	3.点击【运行时】或 【打开启动配置--JRE--环境(O)】	
	4.在【首选项 -- 已安装的JRE -- 执行环境 -- JavaSE-1.6】 选择【Java1.6[完全匹配]】
==========================================================================
	→ 2003 Can t connect to MySQL server on
	解决方法:
		双击mySQL安装目录下\bin\mysqld.exe就好了

	命令行登录mySQL(配置path环境到mySQL的bin目录下):
	【mysql -u 用户名 -p】mysql -u root -p
	停止服务：
	方法1：
		使用dos命令【net stop mysql】即可；使用这种方式MySQL服务必须为安装的服务，否则
	会出现服务名无效，这时可以使用第二种方法
        。
	方法2：
		进入【控制面板】-->【管理工具】 -->【服务】，找到MySQL服务，点击左边的停止。
==========================================================================    
                没有my.ini文件? 
                在【C:\ProgramData\MySQL\MySQL Server 5.6】文件夹下
                
                没有mysqld-nt.exe文件?
                新版本
                        mysqld-nt.exe是MySQL Daemon数据库服务相关程序。
                        而mysqld.exe是微软Windows MySQL server数据库服务器相关程序。
                   5.0 mysqld-nt
                   5.1 mysqld
                   
                   
                   %ProgramData%\MySQL
==========================================================================
        RROR 2003 (HY000): Can't connect to MySQL server on 'localhost' (10061)
        net start mysql
        
        把my.ini
        default-storage-engine=INNODB
        改成
        default-storage-engine=MYISAM
        
        最终解决方法:
        修改my.ini文件为:
==================================================
        [mysql]
        explicit_defaults_for_timestamp=true
        innodb_buffer_pool_size = 128MB

        log_bin

        basedir = C:\MySql\MySQL Server 5.6
        datadir = C:\MySql\MySQL Server 5.6\data
        port = 3306
        # server_id = ......

        join_buffer_size = 128M
        sort_buffer_size = 2M
        read_rnd_buffer_size = 2M

        sql_mode=NO_ENGINE_SUBSTITUION,STRICT_TRANS_TABLES
==================================================
       'mysqld_safe' 不是内部或外部命令，也不是可运行的程序 或批处理文件。
        出错原因
                估计是windows版的MySQL没有mysqld_safe这个命令。
        解决办法
        用【mysqld --skip-grant-tables】替代
==========================================================================
	→ 1045-access denied for user:'root@localhost'(Using password"YES)
	停止服务
	【net stop mysql】
	登录
	【mysql -uroot】mysql -uroot -p
	修改密码
	【set password =password('你的密码');】
        set password =password('123456');
        
        
        #1.停止mysql数据库
        /etc/init.d/mysqld stop
        #2.执行如下命令
        mysqld_safe --user=mysql --skip-grant-tables --skip-networking &
        ※注:运行第二步后，另开一个窗口继续执行第三步及后面即可
        
        #3.使用root登录mysql数据库
        mysql -u root mysql
        #4.更新root密码
        mysql> UPDATE user SET Password=PASSWORD('newpassword') where USER='root';
        #最新版MySQL请采用如下SQL：
        mysql> UPDATE user SET authentication_string=PASSWORD('newpassword') where USER='root';
        #5.刷新权限 
        mysql> FLUSH PRIVILEGES;
        #6.退出mysql
        mysql> quit
        #7.重启mysql
        /etc/init.d/mysqld restart
        #8.使用root用户重新登录mysql
        mysql -uroot -p 
        Enter password: <输入新设的密码newpassword>

        创建mysql-init.txt文件
        添加【SET PASSWORD FOR 'root'@'localhost' = PASSWORD('123456');】
        切换到bin目录下
        【mysqld --init-file=C:\mysql-init.txt】
        之后登录 【mysql -uroot -p123456】
==========================================================================     
        ERROR 1290 (HY000): The MySQL server is running with the --skip-grant-tables option so it cannot exe
         SET PASSWORD FOR root@localhost=PASSWORD('123456');
         flush privileges;
         SET PASSWORD FOR root@localhost=PASSWORD('123456');
==========================================================================     
         mySQL数据库查询当前编码
         【show variables like 'character%';】
==========================================================================
        右键显示【在此处打开命令窗口】   
        Windows Registry Editor Version 5.00
         
        [HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Directory\Background\shell\MS DOS]
        @="在此处打开命令窗口"
         
        [HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Directory\Background\shell\MS DOS\command]
        @=hex(2):43,00,3a,00,5c,00,57,00,69,00,6e,00,64,00,6f,00,77,00,73,00,5c,00,53,\
          00,79,00,73,00,57,00,6f,00,77,00,36,00,34,00,5c,00,63,00,6d,00,64,00,2e,00,\
          65,00,78,00,65,00,00,00
==========================================================================
	查看JDK版本 java -version
	adb devices查看是否手机连接上

	adb kill-server
	adb start-server
==========================================================================
	[配置环境][java环境变量]
        变量名:
                JAVA_HOME
        变量值:
                E:\Java_JDK\jdk1.8.0_91
======================================   
       查看java版本
       【java -version】
       
       java环境变量和cmd的环境变量不一致
       将【%JAVA_HOME%\bin;】放在系统环境变量第一个,【%JAVA_HOME%\jre\bin;】随后,放在第二个
======================================
        变量名:
                Path
        变量值:
                %JAVA_HOME%\bin;C:\Ruby24-x64\bin;%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;C:\Program Files (x86)\MySQL\MySQL Server 5.7\bin;%SystemRoot%\system32;%SystemRoot%;%SystemRoot%\System32\Wbem;%SYSTEMROOT%\System32\WindowsPowerShell\v1.0\;C:\Program Files\Intel\WiFi\bin\;C:\Program Files\Common Files\Intel\WirelessCommon\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\nodejs\;%ANDROID_HOME%\platform-tools;%ANDROID_HOME%\tools;C:\MySql\MySQL Server 5.6\bin
        Java:
        	【%JAVA_HOME%\bin;】
                【%JAVA_HOME%\jre\bin;】
        mySql:
        	C:\Program Files (x86)\MySQL\MySQL Server 5.7\bin;
        	C:\MySql\MySQL Server 5.6\bin
        	
        安卓:
        	【%ANDROID_HOME%\platform-tools;】
        	【%ANDROID_HOME%\tools;】
                
       Sencha Cmd:
                【%username%\bin\Sencha\Cmd】
========================================================
        变量名:
                ANDROID_HOME
        变量值:
                E:\Android\android\android-sdk_r24.3.4-windows\android-sdk-windows
========================================================              
         变量名:
                CLASSPATH
         变量值: 
                .;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;
==========================================================================
	配置html5 css3提示
	【项目右键 -- MyEclipse -- Web 内容设置 --文档类型】选择HTML5
	【Alt + /】提示html,css,js提示
==========================================================================
	myEclipse添加Emmet代码提示
	【帮助(H) -- Install from Site...】
	http://download.emmet.io/eclipse/updates/
==========================================================================
	svn: 文件” 已经过时[SVN无法提交][SVN提交]
	解决方法一:
                先更新,再提交
        解决方案二:
                先右键【小组(E) -- 清理】,再更新
        解决方案三:
                删除无法提交目录文件夹的【.svn】文件夹,再次提交
==========================================================================
        关闭SVN[关闭项目SVN][myEclipse关闭SVN][eclipse关闭SVN]
        右键项目【小组(E) -- 断开连接(D)】
==========================================================================
        elipse打包App[安卓无法更新]
        eclipse右键项目【Android Tools(工具) -- Export Signed Application Package...(导出签名应用程序包…)】
        
        打包用jdk 8
==========================================================================
        打包出现获取服务器更新信息失败?
                【MainActivity.java】
       将【Toast.makeText(getApplicationContext(), "获取服务器更新信息失败", 1).show();】注释
==========================================================================
       android project报错com/android/dx/command/dexer/Main : Unsupported major.minor version 52.0
       
       打包 Android sdk不能大于Android 7.0 (API 24)
       选中【Tools - Android SDK Platform-tools】 -- 【Delete packages...】删除
==========================================================================
        App打包[安卓打包][eclipse打包]
        
        	APP加载文件
        前提:
        	首先移动端的代码都在【hrmobile】这个文件夹下
        1.App加载页面时,会先加载【Init.js】这个文件,判断是否登录
        2.之后会加载【View.js】
        3.然后加载【index.js】
        4.要想查看跳转那个页面,只要【Ext.create('文件路径',{})】只要查看这个第一个参数就好
        	比如【hrmobile.public.myhome.index】,看【.】最后一个字段就知道文件名了,这个就是加载【index.js】,每个【.】在文件就相当于【\】,也就是【hrmobile\public\myhome\index.js】,这样就能知道在哪个文件夹下,跳转哪个页面

        之后具体修改代码.有不懂的可以看官方文档
        http://docs.sencha.com/touch/2.4/2.4.2-apidocs/#!/example/kitchen-sink
        看不懂英文的,使用百度翻译插件翻译下,或看以下中文版的,但这个不全,要是找不到的还是看官方地址的
        http://extjs-doc-cn.github.io/ext4api/#!/api/Ext

        App打包
        金交在线App包名:【com.jjzx.investor】
        1.安装jdk8,到官网下载,配置jdk8的环境变量
        	http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html
        2.下载Aniroid SDK,放纯英文路径,配置环境变量ANDROID_HOME
        	http://tools.android-studio.org/index.php
        3.下载Anroid打包App文件:
        	链接: https://pan.baidu.com/s/1c3GaR0O 密码: fa5c
        4.打包时,把p2p_heb_jjzx_android\assets\www\hrmobile这个目录删掉,替换就好
        5.用eclipse打开项目目录,单击选中,右键项目【Anroid Tools -- Export Signed Application Package...(导出签名应用程序包…)】
==========================================================================
         App打包打错[安卓打包报错][eclipse打包报错][eclipse项目报错]
         
         1.【窗口(W) - 首选项(P) - Android】选择SDK路径
         2.【窗口(W) - 首选项(P) - Java - 已安装的JRE - 添加(A)...】选择jdk v1.8
         3.打开工具栏的下载图标【Android SDK Manager】或直接打开【SDK Manager.exe】
         4.选中【Android 5.1.1 (API 22)】点【Install packages...(安装软件包…)】,选中【Accept Licenese(接受许可)】 - 【Install(安装)】
         5.重迁项目
         
         也可以更改【project.properties】
         target=android-22 ←这的Android SDK版本号
==========================================================================
        【eclipse真机调试APP】[eclipse手机调试App][eclipse运行App][eclipse安卓运行App][eclipse调试App][eclipse安卓调试App][App调试]
        1.手机开启【开发者选项 - USB调试)】
        2.eclipse右键项目【运行方式(R) -- Android Application(Android应用程序)】


        【eclipse夜神模拟器调试App】[eclipse模拟器调试App][eclipse模拟器运行App]
        1.开启模拟器设备
                adb connect 127.0.0.1:62001
        2.打开显示视图
                【Alt + Shift + Q】 + 【Q】或【窗口(W) - 显示视图(V) - 其他】
        3.选择 【Android - Devices 】
        4.右键项目【运行方式(R) -- 运行配置(N)】
        5.在Android 下的【Project - Browse】 选择对应项目
        6.点击【Target -- Deployment Target Selection Mode】(部署目标选择模式)下的【Lanuch on all compatible devices/AVD's】(Lanuch对所有兼容的设备/系统的),选择【Active devices】(有源设备)
        7.右键点击项目【运行方式(R) -- Android Application】(Android应用程序)
        8.在【Devices】窗口选择对应设备就好
==========================================================================
//未登录页
	→【login.js】

   //☛logo  251x63
  //未登录,标题背景
	→【Viewforlogin.js】
  //☛用户名图标 27x32
	
	//☛密码图标 24x31
  //☛更改提示用户名或账户错误 模态框
	→【sencha-touch.js】.x-msgbox
☟
//注册页
	→【registers.js】

   //获取验证码和立即注册按钮背景themeColor
	→【overallsituation.js】修改
    
  //☛复选框 .x-item-selected.x-list-item::after
	→【sencha-touch.css】
  //☛企业注册
  	→【enregisters.js】
☟
//忘记密码页 按钮文字大小/颜色都在本js改
	→【forgetPassword.js】
	//
	☛按钮背景themeColor到
	→【overallsituation.js】修改
======================================================
//☛放常用颜色,背景色,大小变量地方
	→【Viewforlogin.js】)
//☛放变量保存样式 比如(topColor标题颜色+topsize标题字体)
	→【overallsituation.js】
======================================================
//登录后 home首页
	→【View.js】

  //☛登录后 标题背景
	→【View.js】
  //☛首页标题 文字
	→【index.js】
  /☛首页标题 文字大小和颜色
	→【overallsituation.js】
 //☛登录后头部标题行高
        →【sencha-touch.css】
        .x-toolbar.x-docked-top{
                line-height:43.83px;
        }
        layout-wap.css
  //☛首页 右上角按钮 .viewbutton
	→【mobile.css】
  //☛首页banner广告[banner图大小][焦点图大小][轮播图大小][banner图尺寸][焦点图尺寸][轮播图尺寸],
           【640 x 390】
	→【index.css】
	文件路径:hrmobile\ec\resources\imagesP2p\index
  //☛首页banner内"立即申请"按钮 .wirite
	→【common.css】
  //☛首页banner下面 安全保障,平台数据,企业介绍
	→【index.js】
☟
//☛可修改底部导航条 小图标 29x27
	→【View.js】

	//☛底部导航条 文字/边距样式设置 小图标 29x27
		第二个style更改背景颜色,且必须是CSS全称,不能用简写background:
		比如:background-color:#ECECEC;
	→【bottomBarIndex.js】
		
	//☛底部栏-文字颜色 .x-button, .x-toolbar .x-button
		→【sencha-touch.css】
		也有可能直接在【bottomBarIndex.js】修改
	//☛底部栏-点击后更改文字颜色.call_select和.menu_select和.call_select和.call_select
		→【mobile.css】color:#00A0E8;
                   【cssP2p.css】底部栏文字颜色
☟
 //借款 列表页
	→【borrows.js】

	//☛每个列表样式,修改高/背景/内外边距 .borrowtype
	→【mobile.css】
	//☛列表ajax请求后台JSON数据
        →【loanProject.js】

//产品详情 能够直接修改页面图片和文字
	→【bordetails.js】
	//☛按钮背景颜色 themeColor
	→【overallsituation.js】
☟
//帮助页
	→【help.js】
☟
//我的 退出登录按钮颜色和背景在本js内设置
	→【mains.js】

  //☛我的 标题"信息通知"图标 48x48
	→【mains.js】
	ces/imagesP2p/main/remind.png
  //☛用户背景修改 .userTop
  	→【index.css】

→修改底部选项卡的图标和的颜色
	mobile.css
	.wyjk 首页图标
	.menu 我要借款
	.call 借款记录
	.user 我
 =========表格第一块 .user-data============
	→【index.css】
  //☛ 借款笔数/借款总额/待还总额 文字颜色/大小 .gray
	→【common.css】
  //☛0笔/0.00元 文字颜色/大小 设置 .org
	→【common.css】

 =========表格第二块 .user-list============
	///☛ 借款进度/我要还款 表格文字大小/颜色设置 .user-list li span
	→【index.css】

	//☛表格左侧图片  index-ico01 引入精灵图
	→【common.css】
	/☛.通过后面添加不同class,来定位精灵图位置 .user-list .user-icon-01
	→【index.css】
	//☛表格右侧箭头图片 .index-ico
`	→【common.css】


	【borrows.js】 申请借款
	【applyLoan.js】申请借款页 修改数据
	【loainList.js】 借款进度 <em>({projectNumber})</em>
	【loainListDitel.js】 借款详情 <em>('+loainDit.projectNumber+')</em>
	
	【perinfor.js】个人咨询 借款详情02基本信息
	【perinfor2.js】03详细信息
	【applyUpload.js】05资料上传

	【LoanProjectAction.java】
	【ProjectStatus.java】
	
	【identity.js】身份认证
	【addmeans.js】 修改联系人


	P2P的相关设置
	【cls】自定义 CSS 类
        【pressedCls】当按钮被按下时的 CSS 类
	【params】就是自定义参数
	【xtype】是组件类型
	【text】或【html】都是设置html代码块
	【style】给当前组件设置样式
	【handler】设置点击事件
	更改Tab切换时的样式
	【sencha-touch.css】 start:tab新增样式


        ST加载事件顺序
        1.先加载【constructor】里的事件
        2.加载【show】事件
        3.加载【activate】事件
        4.再次加载【show】事件
        5.【resize】最后执行
        
        三个事件同时存在
        1.activate
	2.show
	3.resize
        
        
	P2P跳转页面
	【mobileNavi.push(Ext.create('hrmobile.public.myhome.registers', {}));】
	erp跳转页面
	【mobileNavi.push(Ext.create('htmobile.customer.person.myHome', {readOnly:true}));】
		【readOnly】是否可操作,false为可操作,true为不可操作
	erp弹窗
	【Ext.Msg.alert('', "密码不能为空");】
=============================================================
       Ext.Msg.alert弹框样式
       使用Ext.Msg.alert('','',callback);
       
       或使用Ext.toast('Hello Sencha!', 5000);
       使用回调函数解决
       
        Ext.toast('<div style="' +
                'padding:5px 0;' + 
                'color:red;' + 
                'border-radius:5px;' +
                'font-weight:bold;' +
                'background:rgba(255,255,255,1);' +
                '">手机号不能为空</div>',
                15000
        );
=============================================================
        返回按钮和右上角添加按钮?
        【View.js】
=============================================================
	设置小图标样式
	background: url(../imagesP2p/tabbottom/menu_select.png) center center;
	background-repeat: no-repeat;
	background-position-y: 25%;
	-webkit-background-size: 22px 22px;
	background-color: #ffffff;
        
        
=============================================================  
        table栏点击样式[选项卡样式][选项卡CSS样式][ST选项卡样式]
         CSS文件:
                sencha-touch.css
         未点击CSS类[ST未点击样式][ST选项卡未点击样式]:
                 .x-tabbar-dark .x-tab
         点击后CSS类[ST点击样式][ST选项卡点击样式]:
                .x-tabbar-dark .x-tab-active
                
            【.x-tabbar-dark.x-docked-top .x-tab-active】7441行
            【.x-tabbar-dark .x-tab-active】    理财计划详情 7409
=============================================================
        列表点击样式[点击样式][st点击样式][st列表样式] 
        css文件:
                【cssP2p.css】
        CSS类
                【 .listitems_select】  187行
=============================================================  
        background-size：100%和background-size：cover的区别？
        background-size：100%---按容器比例撑满，图片变形；
        background-size：cover---把背景图片放大到适合元素容器的尺寸，图片比例不变。
        IE8及以下版本用滤镜来兼容background-size如下:
        filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(src='bg.jpg', sizingMethod='scale');}
       
        
        参数解释：
        src="图片路径"，可以是相对，也可以是绝对；
        sizingMethod：“scale|crop|image” 可选项。字符串(String)。设置或检索滤镜作用的对象的图片在对象容器边界内的显示方式。

　　    【crop】：剪切图片以适应对象尺寸。 
　　    【image】：默认值。增大或减小对象的尺寸边界以适应图片的尺寸。 
　　    【scale】：缩放图片以适应对象的尺寸边界。

        PS:注意：如果设置了background-attachment:fixed;会是background-size属性失效
=============================================================
        设置selectfield背景色[设置下拉框背景][修改下拉框颜色][修改下拉框背景颜色][下拉框背景][下拉框颜色]
        【sencha-touch.css】
        .x-toolbar-dark
        
        默认:
        .x-toolbar-dark {
        	background-image: none;
        	background-color: #AE4A45;
        	background-image: -webkit-linear-gradient(top, #AE4A45, #AE4A45 3%, #f35a54);
        	background-image: -moz-linear-gradient(top, #228cc3, #228cc3 3%, #228cc3);
        	background-image: -o-linear-gradient(top, #228cc3, #228cc3 3%, #228cc3);
        	background-image: -ms-linear-gradient(top, #228cc3, #228cc3 3%, #228cc3);
        	border-color: black
        }
        更改代码:
         .x-container.x-toolbar-dark.x-toolbar.x-stretched.x-paint-monitored.x-navigation-bar.x-dock-item.x-docked-top{
                  background-image: none !important;
                  background-color: rgb(208, 167, 101) !important;
          }
          #d0a765
          
          
        修改单选框演示
        .x-item-disabled.x-field-checkbox .x-input-checkbox:checked + .x-field-mask::after{
               display: table-cell;
               text-align: center;
               color: #D0A765;
               vertical-align: middle;
               font-size: 14px;
               color: white;
        }
=============================================================
        设置input显示隐藏删除全部文本按钮?
        
        隐藏全部:
                $('div.x-unsized.x-field-input').find('.x-clear-icon').hide();

        组件示范:
        {
            id: 'enterprisename',
            xtype: 'textfield',
            labelWidth: '36%',
            name: 'enterprise.enterprisename',
            label: '<span class="posa_t">企业名称</span>',
            value: bpCustMember.loginname == undefined ? '' : bpCustMember.loginname,
            id: 'enterprisename',
            listeners: {
                focus: function() {
                    $(Ext.getDom('enterprisename')).find('.x-clear-icon').eq(0).show();
                },
                blur: function() {
                    $(Ext.getDom('enterprisename')).find('.x-clear-icon').eq(0).hide();
                }
            }
        }
=============================================================
        隐藏底边栏:
                hidebottomBarIndex();
        封装方法:
        hidebottomBarIndex = function(){
	  mobileNavi.items.items.forEach(function(e){ 
                   if(e.$className=="hrmobile.public.myhome.related.bottomBarIndex"){
                      e.hide();
                   }
                 });
	}   
        显示底边栏:
                showottomBarIndex();  
        封装方法:
         showbottomBarIndex = function(){
	  mobileNavi.items.items.forEach(function(e){ 
                   if(e.$className=="hrmobile.public.myhome.related.bottomBarIndex"){
                      e.show();
                   }
                
                 });
	}
        //取消
         mobileNavi.destroy();
=============================================================
        取消动态加载列表,无限加载(没有更多数据)
         totalProperty: 'totalCounts',//'totalProperty',
        
=============================================================
        修改placeholder样式?
        ::-webkit-input-placeholder{}    /* 使用webkit内核的浏览器 */
        :-moz-placeholder{}                  /* Firefox版本4-18 */
        ::-moz-placeholder{}                  /* Firefox版本19+ */
        :-ms-input-placeholder{}           /* IE浏览器 */
        
        text-fill-color
        text-fill-color会覆盖color所定义的字体颜色：
        代码:
                text-fill-color:#f00;
                color:#000;
        
        text-fill-color打造镂空文字：
        代码
                -webkit-text-fill-color:transparent;
                -webkit-text-stroke:1px #000;
                
        text-stroke-color透明值让文字更柔和：
        代码:
                background-image:-webkit-linear-gradient(#eee,#000);
                -webkit-background-clip:text;
                -webkit-text-fill-color:transparent;
                
        代码2:
                background-image:-webkit-linear-gradient(#eee,#000);
                -webkit-background-clip:text;
                -webkit-text-fill-color:transparent;
                -webkit-text-stroke:1px transparent;
=============================================================
	Ext is not defined    【ext-base.js】
	Ext.onReady() is not a function   【aray-grid.js】
	Ext is null       【ext-all.js】
=============================================================
Ext.onReady
	※:Ext.onReady(function fn,Object scope，boolean override)
	 该方法的调用发生在Document对象加载完毕后，html的Onload（）事件与image加载之前
   fn:执行的函数

	只有在Ext框架全部加载完后才能在客户端的代码中使用Ext，而Ext的onReady正是用来"注册在Ext框架及页面的html代码"加载完后，所要执行的函数。
    调用onReady方法时可以带三个参数， 
	第一个参数是必须的，表示要执行的函数或匿名函数，
	第二参数表示函数的作用域，
	第三个参数表示函数执行的一些其它特性，比如延迟多少毫秒执行等，大多数情况下只需要第一个参数即可。 
	比如示例代码会在页面加载后执行函数a，弹出"Everything is ready."的提示信息。
	【delay】延迟事件
	【single】延期
	【buffer】缓存


Ext.define 实现扩展
	【extend】:用于继承
		延伸
	【alias】:类的别名
		别名
	【alternateClassName】:备用名,与alias差不多
		交替
	【requires】:需要使用到的类名数组,在动态加载时会根据该属性去下载类,注意需要的类是在当前类之前被加载
		需要
	【user】与requires类似,但是被引用的类可以在该类之后才加载
	【constructor】	构造器属性,一般用来初始化类的配置和调用其父类的方法
		构造函数
	【mixins】混入属性,多继承
		混入
	【config】定义类的配置项,会把config里的每个属性加上get和set方法
	【statics】定义静态方法,属性不能被子类继承
		静力学
	【inheritableStatics】与statics类似,但是其属性可被子类继承
		可继承的
	【singleton】设置该类为单件模式
		一个
语法:
	※:Ext.define(String className, Object data, [Function createdFn])

	其中，参数className用于执行自定义类的类名，推荐采用与java类名相同的命名规范；data参数用于为该类定义属性、方法；createdFn用于指定该类创建成功的回调函数。
	Ext.define()方法的第二个参数是一个对象，该对象用于为新创建的类指定属性，该对象可以指定任何合法的属性，以下是几种具有特殊意义的属性：

	【self】：引用当前类本身。
	【alias】：为该类定义别名。
	【alternateClassName】：为该类定义可选的类名
	【config】：用于为该类指定配置选项，ExtJS会自动为config指定的选项添加setter和getter方法。
	【extend】：用于指定该类继承的父类。
	【inheritableStatics】：与static属性相同，也可以为该类定义静态方法和静态属性。不过，该属性定义的静态方法和静态属性可以被子类继承，而static定义的则不可以被子类继承。
	【mixins】：用于列出所有要被混入的类。
	【override】：用于指定要覆盖的类。
	【requires】：用于列出在实例化该类之前，必须预先加载的类。
	【singleton】：如果该属性被设为true，则该类的实例将是单例的。
	【static】：为该类定义静态属性和静态方法。
	【uses】：用于列出必须与该类同时使用的类。
	上面的特殊属性中，extend用于指定该类继承的父类。还可以通过constructor为该类指定构造器：

	当使用Ext.define()方法定义了类以后，除了可使用new关键字来创建对象以外，还可以使用Ext.create()方法来创建对象。Ext.create()方法的语法格式如下：
	※:create(String name, Object args)
	【Ext.create()】创建对象
	其中，第一个参数name指定要创建对象的类名；第二个参数是一个对象，用于向新生成的对象传入构造参数值（也称为配置选项，即为config属性指定选项传入参数值）


	→得到defind自定config参数两种方法,
		1:使用自带的getName和setName
		2:使用 (实例对象变量.config.参数)和 = 赋值
==========================ExtJs常用函数====================================
各方法的使用详解可以百度[Ext事件]
1、【Ext.onReady(function fn,Object scope，boolean override)】
   该方法的调用发生在Document对象加载完毕后，html的Onload（）事件与image加载之前
   fn:执行的函数

2、【Ext.get(Mixed el)】
   获取HTML中的Element，Dom中Element元素、
   el：一个指定的Dom Element节点id，或者Dom Element

3、【Ext.select()】
   基于CSS来获取应用了该样式表的对象，也就是通常所说的样式表选择器。

4、【Ext.query()】
   通过给定的path,在Dom树中选择一个节点数组，真正的实现是由Ext.DomQuery.selectExt.DomQuery.select
   来完成的，而它只是提供了一种Ext.DomQuery.select的简快调用。

5、【Ext.getCmp(String id)】
   返回Ext.Component管理的指定的id的Component对象，实际是Ext.ComponentMgr.get(id)的包装调用

6、【Ext.getDom(Mixed el)】只能获取,不能设置
   通过指定的id或者Dom节点或Element元素，获取HTMLElement

7、【Ext.isEmpty()】
   对指定的元素或者节点进行判断，是否为空，如果指定的节点是null,undefined,则返回true,否则返回false

8、【Ext.namespace()】
   创建指定的命名空间后，就可以在该命名空间下定义变量，方法和类。 
   此时在这些变量或类将在该命名空间下，当引用该类时需要通过该命名空间方可引用。

9、【Ext.each()】
   分别对一个数组或者集合进行迭代，分别对集合中的对象调用指定的函数进行处理。
   和for循环分别调用同一个函数处理指定的集合具有相同的功能。

10、【Ext.apply(Object obj,Object config,Object defaults)】
   为指定的对象拷贝属性，或以默认的属性初始化一个对象
   在调用时表示将第2个参数config所有的属性拷贝到第一个参数对象的属性中，如果config为空
   将第3个参数defaults的属性拷贝到obj的属性中

11、【Ext.encode()】
    将定义的Json对象进行解析，解析成为字符串，是一标准的Ext.json.encode。
    在调用时表示将参数Object进行解析，返回字符串

12、【Ext.htmlDecode()】
   将定义的HTML字符串进行转换，支持将转义符转换成HTML标准字符，在调用时表示将参数Object进行解析
   返回字符串

13、【Ext.typeOf(Mixed value)】
   用户判断传递参数的类型，如果参数是未定义对象则返回underfined，如果参数为空则返回null,
   如果参数是字符串则返回String，如果参数是数字则返回number，如果参数是布尔参数则返回boolean
   如果参数是日期则返回Date,如果参数是函数则返回函数

    	【Ext.query('元素名,id,class');】获取集合元素DOM元素,和原生js的querySelector()方法很像,但获取的只是数组
                Ext.query('#box')[0].innerHTML
    	【Ext.get('ID');】 得到DOM元素和判断有没这个CSS属性,无法获取和更改

	使用【Ext.DomQuery.select('元素名,Class,Id')】获取数据集合
               Ext.DomQuery.select('#box')[0].innerHTML
	再用【Ext.each(item,function(ele){ele.style.color...}】循环遍历DOM结构,再使用js的style属性就可以设置样式.

   	【Ext.get(String/HTMLElement/Ext.Element el)】 : Ext.dom.Element
	返回的是 Ext.dom.Element 对象。

	【Ext.getCmp(String id)】
	返回的是Ext.Component对象。也就是在js代码中定义的对象。

    	【Ext.getCmp()】获取id, 【dialog】进行显示和隐藏
	【new Ext.util.ClickRepeater()】 实现连续点击事件以外,还提供了一些附加功能,比如元素被点击时显示的样式,发生连续点击时每次点击的时间间隔
	【获取事件.on(事件名,callback)】通过Ext.get('id')获取,Ext.get('id').dom.value等操作
	→推荐用简化【Ext.getDom(id).value】来操作DOM元素样式
	
	【getX()】,【getY()】,【getXY()】，获得发生的事件在页面中的坐标位置
	【getTarget()】，返回事件的目标元素，该函数用来统一IE和其他浏览器使用的e.target和e.srcElement
	【on()】和【un()】，这两个函数就不用多说了。
	【preventDefault()】，用于取消浏览器当前事件所执行的默认操作，比如阻止页面跳转。
	使用【addListener】可以添加事件，简写on。
　　	使用【removeListener】删除事件，简写un。
　　	使用【purgeListeners()】移除所有事件。
	使用【premoveAllListeners()】移除所有浏览器事件
	【stopEvent】同时调用了【preventDefault()】和【stopPrepagation()】可以清除元素默认行为,也可以阻止冒泡
	【new Date().toLocaleTimeString()】 获取当前时间 
	【handler】给button按钮组件添加点击事件

	→:五种获取DOM元素[获取ID][获取元素][得到ID][Ext获取id][sench touch获取id][touch获取id]
	1.【Ext.get()】获取DOM元素ID,可以获取文本和设置
                Ext.get('box').dom.innerText
	2.【Ext.fly("ID")】获取DOM元素ID,可以获取文本和设置
                Ext.fly('box').dom.innerText
        3.【Ext.getDom('ID')】获取DOM元素
              Ext.getDom('box').innerText
        4.【Ext.query('元素名,id,class');】
             Ext.query('#box')[0].innerText
        5.【Ext.DomQuery.select('元素名,Class,Id')】
               Ext.DomQuery.select('#box')[0].innerText
               
         →:三种获取组件ID和name方法
         1.【Ext.getCmp()】 获取组件ID,可以使用get获取或set设置,是别名
                 全名【Ext.ComponentManager.get()】
	 2.【getCmpByName("")】获取组件的name
         3.【Ext.ComponentQuery.query('#组件ID')】能获取itemId的值
                Ext.ComponentQuery.query('#val')[0].getValue()
	获取当前组件名称
	【mobileNavi.getActiveItem().$className】
        
	【禁用右键】
	在body内添加【oncontextmenu="return false"】
==============================================================================
        ST返回上一页
        【mobileNavi.pop()】
        【mobileNavi.pop(1)】 上个页面
        【mobileNavi.pop(2)】 上上个页面
==============================================================================
        【scrollToTopOnRefresh: false】刷新不跳到头部
        【pullRefresh: true】上拉刷新
        【listPaging: true】显示列表的页,是否有显示更多

        // 刷新不跳到头部
         scrollToTopOnRefresh: false,
         // 上拉刷新
         pullRefresh: true, 
         // 显示列表的页,是否有显示更多
         listPaging: true,
==============================================================================
         ST列表刷新】
        【this1.refresh();】
	【this1.store.loadPage(1);】
==============================================================================
	获取select下的option的值[获取下拉选项的值][select获取下拉的值][获取下拉值][jq获取select][jquery获取select]
	原生js:
	→方法1:
 		【ID.options[这是ID.selectedIndex].text】
	→方法2:
		【document.getElementById("这是select的ID").value】
	jQuery:
	→方法1:
		【$("#ID option:selected").text()】
	→方法2:
		【$("#这是select的ID").val()】
==============================================================================
         选择第二个select下的option的值[jq获取option]
         原生js: 推荐,能选中下拉框的值
         →方法1:
                【ID.children[1].selected = true;】
         →方法1: 只能选择元素索引,不更改选中和显示值
                 【ID.electedIndex = 1;】
         示范:
         onload = function () {
                id.onchange = function () {
                    user.children[this.selectedIndex].selected = true;
                }
           }
         
         jQuery:
	→方法1: 推荐,能选中下拉框的值
               【$('#kaihushi1 option:eq(1)').prop('selected',true);】
         增强版:
               $('#cityList option[innerContent="' + GPSCity + '"]').prop('selected', true);
               需要创建标签自定义属性:
               option.setAttribute('innerContent', city[i].text);
               
        →方法2: 不会选中下拉框的值
               【$('#kaihushi1 option:eq(1)').attr('selected','selected');】
               【$('#kaihushi1').find('option:eq(1)').attr('selected','selected');】 
================================================================================                
        原生js判断事件处于第几阶段?
        【e.eventPhase】
                e.target == e.currentTarget
================================================================================
	Ext转换时间格式
 	【Ext.util.Format.date(Ext.getCmp("这是组件ID").getValue(), 'Y-m-d');】
================================================================================
	Ext获取Ajax和解析字符串
	Ext.Ajax.request({
			url : url,
			success : function(response) { 
				var responseText = Ext.util.JSON.decode(response.responseText);
				console.log(responseText);
			}
		});
==========================================================================
	将P2p复制到erp里报302错误,说明方法不存在?
	查找Action方法?

=============================================================
	【插件介绍】
 	<!-- Sencha Touch是一个移动HTML5开发框架(以下简称ST),ST可以让你的Web App看起来像Native App -->
        <script src="hrmobile/resources/sencha-touch-all-debug.js"></script>
        <!-- 让IE支持HTML5元素插件 -->
        <script type="text/javascript" src="hrmobile/resources/html5.js"></script>
        <!-- jquery圆形进度条插件,java用 -->
        <script type="text/javascript" src="hrmobile/resources/circleProgress.js"></script>
        <!-- jquery -->
        <script type="text/javascript" src="hrmobile/resources/jquery-1.8.2.min.js"></script>
        <!-- 滑动js插件 -->
        <script type="text/javascript" src="hrmobile/resources/swipe.min.js"></script>
        <!-- 移动版的jquery -->
        <script type="text/javascript" src="hrmobile/resources/zepto.min.js"></script>
=============================================================
	CSS渐变.
/*========按钮背景设置=================  */
.btn_bg{
	/* Safari 5.1 - 6.0 */
	background: -webkit-linear-gradient(left, #ffa33b , #fecc2f);
	/* Opera 11.1 - 12.0 */
	background: -o-linear-gradient(right, #ffa33b , #fecc2f);
	/* Firefox 3.6 - 15 */
   background: -moz-linear-gradient(right, #ffa33b , #fecc2f);
   /* 标准的语法 */
   /* background: linear-gradient(to right, #ffa33b , #fecc2f); */
   background: url('../imagesP2p/main/my_bg.png') no-repeat;
   background-size:100% 100%;
}
=============================================================
	Java使用try和catch
	catch里必须有参数catch (Exception e)
=============================================================
        笔记本键盘键失灵?
        在桌面上,英文【Fn + 太阳镜】
        【Fn + F6】
=============================================================
        js获取滚动高度[获取屏幕高度]
         function getScrollTop(){
  		var scrollTop=0;
		  if(document.documentElement && document.documentElement.scrollTop){
		  	scrollTop=document.documentElement.scrollTop;
		  } else if(document.body){
		  	scrollTop=document.body.scrollTop;
		  }
		  return scrollTop;
	}

        js获取可视高度

        function getClientHeight(){
        		  var clientHeight=0;
        		  if(document.body.clientHeight&&document.documentElement.clientHeight) {
        		 	 var clientHeight = (document.body.clientHeight<document.documentElement.clientHeight) ? document.body.clientHeight:document.documentElement.clientHeight;   
        		  } else {
        		  	var clientHeight = (document.body.clientHeight > document.documentElement.clientHeight) ? document.body.clientHeight:document.documentElement.clientHeight;   
        		  }
        		  return clientHeight;
       	}
        
        js获取实际高度
       function getScrollHeight(){
		return Math.max(document.body.scrollHeight,document.documentElement.scrollHeight);
	}
        
        js获取可视宽度
        function getClientWidth(){
        		  var clientWidth=0;
        		  if(document.body.clientWidth&&document.documentElement.clientWidth) {
        		 	 var clientWidth = (document.body.clientWidth<document.documentElement.clientWidth) ? document.body.clientWidth:document.documentElement.clientWidth;   
        		  } else {
        		  	var clientWidth = (document.body.clientWidth > document.documentElement.clientWidth) ? document.body.clientWidth:document.documentElement.clientWidth;   
        		  }
        		  return clientWidth;
       	}
        
        
        获取屏幕宽度
        【window.screen.width】
        获取屏幕高度
        【window.screen.height;】
        
        
        window.screen.width
        功能：声明了显示浏览器的屏幕的宽度，以像素计。
        window.screen.availWidth
        功能：声明了显示浏览器的屏幕的可用宽度，以像素计。
        
        
        屏幕的有效宽高：
        window.screen.availHeight
        window.screen.availWidth

        网页可见区域宽：document.body.clientWidth 
        网页可见区域高：document.body.clientHeight 
        网页可见区域宽：document.body.offsetWidth (包括边线的宽) 
        网页可见区域高：document.body.offsetHeight (包括边线的宽) 
        网页正文全文宽：document.body.scrollWidth 
        网页正文全文高：document.body.scrollHeight 
        网页被卷去的高：document.body.scrollTop 
        网页被卷去的左：document.body.scrollLeft 
        网页正文部分上：window.screenTop 
        网页正文部分左：window.screenLeft 
        屏幕分辨率的高：window.screen.height 
        屏幕分辨率的宽：window.screen.width 
        屏幕可用工作区高度：window.screen.availHeight 
        屏幕可用工作区宽度：window.screen.availWidth 
        HTML精确定位:scrollLeft,scrollWidth,clientWidth,offsetWidth 
        scrollHeight: 获取对象的滚动高度。 
        scrollLeft:设置或获取位于对象左边界和窗口中目前可见内容的最左端之间的距离 
        scrollTop:设置或获取位于对象最顶端和窗口中可见内容的最顶端之间的距离 
        scrollWidth:获取对象的滚动宽度 
        offsetHeight:获取对象相对于版面或由父坐标 offsetParent 属性指定的父坐标的高度 
        offsetLeft:获取对象相对于版面或由 offsetParent 属性指定的父坐标的计算左侧位置 
        offsetTop:获取对象相对于版面或由 offsetTop 属性指定的父坐标的计算顶端位置 
        event.clientX 相对文档的水平座标 
        event.clientY 相对文档的垂直座标 
        event.offsetX 相对容器的水平坐标 
        event.offsetY 相对容器的垂直坐标 
        document.documentElement.scrollTop 垂直方向滚动的值 
        event.clientX+document.documentElement.scrollTop 相对文档的水平座标+垂直方向滚动的量

        IE，FireFox 差异如下：

        IE6.0、FF1.06+：

        clientWidth = width + padding

        clientHeight = height + padding

        offsetWidth = width + padding + border

        offsetHeight = height + padding + border

        IE5.0/5.5：
        clientWidth = width - border

        clientHeight = height - border

        offsetWidth = width

        offsetHeight = height

        (需要提一下：CSS中的margin属性，与clientWidth、offsetWidth、clientHeight、offsetHeight均无关) 
=============================================================
        获取元素高度[获取元素宽度][获取元素top][获取元素bottom]
    /*
      注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。
      document.documentElement.clientTop;  // 非IE为0，IE为2
      document.documentElement.clientLeft; // 非IE为0，IE为2
     */
    function $getRect(element) {
        var rect = element.getBoundingClientRect();
        var top = document.documentElement.clientTop;
        var left = document.documentElement.clientLeft;
        return {
            top: rect.top - top,
            bottom: rect.bottom - top,
            left: rect.left - left,
            right: rect.right - left
        }
    }
=============================================================
        获取伪元素[获取CSS伪元素][js获取伪元素][js获取伪元素样式]
        【getComputedStyle(元素名, null)】第二参数不填,默认为null,后面添加.属性名,获取元素,第二参数不为空,添加伪类获取元素
        // window.getComputedStyle(box, null).height获取到的只是px,若是em,rem,自动转换px
    console.log(box.currentStyle ? box.currentStyle : window.getComputedStyle(box, null).height)
    
    window.getComputedStyle(元素,':after').content
=============================================================
    js获取属性名[js获取对象属性内]
        第一种:
                【Object.key()】
        第二种:
                【Object.getOwnPropertyNames()】
                
       // 获取Symbol属性名,但是也会忽略内置的Symbol        
                【Object.getOwnPropertySymbols()】
      // 获取所有的属性名
                【Reflect.ownKeys(obj)】
=============================================================
       怎样给微信公众号链接,跳转某一页面?
        【indexp2pmobile.html】
        →js代码块:
                //获取当前路径
        	var __ctxPath = window.location.origin;
        	//
               	/*  if(window.location.pathname.split("\/").length > 1){
               		__ctxPath += "\/" + window.location.pathname.split("\/")[1];
               	}  */
               	
               	var pa = window.location.href.split("/");
        		var topColor = "#FFFFFF";
        		var topsize = ".34rem;";
        		if (pa[4] == null || pa[4] == undefined || pa[4] == "") {
        			var __ctxPath = pa[0] + "//" + pa[2];
        		} else {
        			var __ctxPath = pa[0] + "//" + pa[2] + "/" + pa[3];
        		}
        		if (localStorage.getItem("__ctxPath") != null) {
        			__ctxPath = localStorage.getItem("__ctxPath");
        		}
        		_ftpPath = ""; 
                //得到请求路径方法
        		function GetRequest() {
        			var url = window.location.href; //获取url中"?"符后的字串 
        			var theRequest = new Object(); 
        			if (url.indexOf("?") != -1) { 
        				var str = url.substr(url.indexOf("?")+1); 
        				strs = str.split("&"); 
        				for(var i = 0; i < strs.length; i ++) { 
        					theRequest[strs[i].split("=")[0]] = unescape(strs[i].split("=")[1]); 
        				} 
        			} 
        			return theRequest; 
        		} 
        		//设置参数来判断打开某个页面
        		onePageType=null;
        		var request = GetRequest();
                if(request.onePageType != null){
                      onePageType=request.onePageType;
                }



       【InIt.js】
       →js代码块:
		if (true) {
			Ext.Ajax.request({
				url : __ctxPath + '/user/isSessinonValidBpCustMember.do',
				params : {
					appId : "1"
				},
				method : 'POST',
				success : function(response) {
					var obj = Ext.util.JSON.decode(response.responseText);
					if (obj.success == true) {
						curUserInfo = obj.data;
						csPerson = obj.csperson;
						// localStorage.setItem("truename",curUserInfo.truename);
						// localStorage.setItem("appId","1");

						// 判断是否有这个判断类型的参数,如过有参数进入
						if (onePageType != null) {
							/*
							 * mobileNavi = Ext.create('mobile.View',{
							 * fullscreen : true, isLoginBtn : true,
							 * isRegisterBtn : true, isLogoutBtn : false });
							 */
							// mobileNavi = Ext.create('mobile.View',
							// {fullscreen: true});
							mobileNavi = Ext.create('mobile.View', {
										fullscreen : true,
										isLoginBtn : true,
										isRegisterBtn : true,
										isLogoutBtn : false
									});
							mobileView.add(mobileNavi);

							// 如果等于creditEnd,即使跳转到授信流程走完首页
							if (onePageType == "creditEnd") {
								mobileNavi.push(Ext.create(
										'hrmobile.public.myhome.index', {}));
							} else if (onePageType == "repayment") { // 等于进入还款中
								Ext.Ajax.request({
									url : __ctxPath
											+ '/user/getLoanInfoSmallloanInfo.do?status=1',
									root : 'result',
									totalProperty : 'totalCounts',
									params : {
										isMobile : "1"
									},
									success : function(response) {
										var obj = Ext.util.JSON
												.decode(response.responseText);
										// console.log(obj.result);
										mobileNavi
												.push(Ext.create(
																'hrmobile.public.myhome.borrowDetails',
																{
																	data : obj.result[0]
																}));
									}
								})
							} else {
								mobileNavi = Ext.create('mobile.Viewforlogin',
										{
											fullscreen : true
										});
								mobileView.add(mobileNavi);
							}
						} else {
							mobileNavi = Ext.create('mobile.View', {
										fullscreen : true,
										isLoginBtn : true,
										isRegisterBtn : true,
										isLogoutBtn : false
									});
							mobileView.add(mobileNavi);
						}

					} else { // 否则进入提醒登录/注册页
						mobileNavi = Ext.create('mobile.Viewforlogin', {
									fullscreen : true
								});
						mobileView.add(mobileNavi);
					}
				},
				failure : function(form, action, response) {
					var obj = Ext.util.JSON.decode(response);
					Ext.Msg.alert('', obj.msg);
				}
			});
		} else {
			mobileNavi = Ext.create('mobile.Viewforregister', {});
			mobileView.add(mobileNavi);
			hidebottomBarIndex();
		}
=============================================================
    js面向对象传参和回调函数?
        function demo(options){
            options = options || {}
            this.callback = options.callback ? options.callback : this.callback
        }

        demo.prototype.callback = function(){
            console.log('balabala.')
        }


        var ins1 = new demo()
        var ins2 = new demo({callback: function(){
           console.log('an overriding method.')
        }})

        ins1.callback()  //output: balabala
        ins2.callback()  //output: an overriding method.
=============================================================
        对象转字符串[Object转String][Object转字符串][字符串转对象][json转对象][对象转json]
       var obj = JSON.parse(str); // 由JSON字符串转换为JSON对象
       
       第一种:
       【obj.toJSONString()】 // 将JSON对象转化为JSON字符
       或者
       
       第二种:
       【JSON.stringify(obj)】 // 将JSON对象转化为JSON字符
       
       第三种:
        var o ={ age:1, name:"sfsfs" };
        var ss = "{"; 
        for(var b in o){ 
            ss += b + ":" + o[b] + "," 
        };
         ss = ss.replace(/,$/, "}");
         
         
         
         ※:拼接html,传对象为参数[对象传参][传参对象]
                1.一定要以【""】双引号拼接,属性以单引号 ←必须
                2.onclick之类的事件必须以【''】单引号拼接  ←必须
                        注:【\"】不能用转义字符(否则事件会失效)  ←必须
                3. 用【JSON.stringify(data[i])】转化json
                4.直接从事件的实参获取对象就好,自动转换为对象
=============================================================
        怎样在后台拼接json字符串?[JSON拼接][java拼接json][java拼json]
        
        1.方法开始必须填:
                String isMobile = (String) this.getRequest().getAttribute("isMobile");
                String isMobile = this.getRequest().getParameter("isMobile");
        	// isMobile = "1";
        	StringBuffer sb = new StringBuffer();
        	Gson gson = new GsonBuilder().setDateFormat("yyyy-MM-dd").create();
        	sb.append("{\"success\":true");
        2.看见this.getRequest().setAttribute("fileList",fileList);这种属性的格式
                添加判断isMobile判断移动端的参数是否不为空,或者为1是移动端,开始拼接字符串
               if (null != isMobile && "1".equals(isMobile)) {
				sb.append(",\"fileList\":");
				sb.append(gson.toJson(fileList));
				sb.append("}");
				setJsonString(sb.toString());
				return SUCCESS;
			} else {	                                                                                             this.setSuccessResultValue(TemplateConfigUtil.getDynamicConfig(DynamicConfig.AllSaleTemplate).getTemplateFilePath());
			}
        
        拼接数组的长度:
                sb.append(",\"totalCounts\":");
	        sb.append(gson.toJson(ces.size()));
                
       java声明布尔类型
       boolean flag = true;
=============================================================
        java数组转json字符串?
        
        方法一(最好用,推荐使用):
	// 判断移动端参数是否不等于空  && 传入字符串最后长度等于1 && 传入参数等于1
	if(null != isMobile && isMobile.endsWith("1") && "1".equals(isMobile)){
		// 创建json对象
		StringBuffer buff = new StringBuffer("{\"success\":true,\"totalCounts\":")
						    .append(list.size())
						    .append(",\"result\":");
		// 创建json序列化
		JSONSerializer json = JsonUtil.getJSONSerializer();
		json.transform(
			// 创建日期格式化 <= 将一个对象转换成另外一个对象
		    new DateTransformer("yyyy-MM-dd"),
		    
		    // 将需要的时间参数,转换成 年-月-日格式
		    new String[] {
		        "createDate",
                        "modifyDate",
		   }
	    );
		
		// 添加数组到对象内
		buff.append(json.serialize(list));
		buff.append("}");
		
		// 将对象转换json字符串
		jsonString = buff.toString();
		return SUCCESS;
	} else {
		this.getRequest().setAttribute("planType", "plmanage");
	}
        
        方法一(II):
        // 判断移动端参数是否不等于空  && 传入字符串最后长度等于1 && 传入参数等于1
	if ((null != isMobile) && (!"".equals(isMobile)) && ("1".equals(isMobile)) && (isMobile.endsWith("1"))) {
		// 创建json对象
		StringBuffer buff = new StringBuffer("{\"success\":true,\"totalCounts\":")
				.append(list.size())
				.append(",\"result\":");
		// 创建json序列化
		flexjson.JSONSerializer json = JsonUtil.getJSONSerializer();
		json.transform(
				// 创建日期格式化 <= 将一个对象转换成另外一个对象
				new DateTransformer("yyyy-MM-dd"),
				
				// 将需要的时间参数,转换成 年-月-日格式
				new String[] {
						"createDate",
						"modifyDate",
				}
				);
		
		// 添加数组到对象内
		buff.append(json.serialize(list));
		buff.append("}");
		
		// 将对象转换json字符串
		jsonString = buff.toString();
		return SUCCESS;
	}
        
        方法二:
		// 判断移动端参数是否不等于空  && 传入字符串最后长度等于1 && 传入参数等于1
		if(null != isMobile && isMobile.endsWith("1") && "1".equals(isMobile)){
			StringBuffer buff = new StringBuffer("{\"success\":true")
							   .append(",\"totalCounts\":5")
							   .append(",\"result\":");
			// 创建Java-JSON序列化
			Gson gson = new GsonBuilder().excludeFieldsWithoutExposeAnnotation().setDateFormat("yyyy-MM-dd HH:mm:ss").create();
			buff.append(gson.toJson(buyInfoList));
			buff.append("}");
			jsonString = buff.toString();
			return SUCCESS;
		}
        
                当返回数组时发现一条数据时,需要给每条数据进行排序
               // 循环遍历数组的对象,给每条数据设置个id,来进行有序排序
        	 for (int i = 0; i < canTransferingList.size(); i++) {
        		   canTransferingList.get(i).setId(transferingList.get(i).getId());
        	  }

                 // canTransferingList.get(i).setId((long)i); 获取的是每条数据索引
				 
       示范:				
	// 判断移动端参数是否不等于空  && 传入字符串最后长度等于1 && 传入参数等于1
	if ((null != isMobile) && (!"".equals(isMobile)) && ("1".equals(isMobile)) && (isMobile.endsWith("1"))) {
		StringBuffer buff = new StringBuffer("{\"success\":true")
				.append(",\"totalCounts\":5")
				.append(",\"result\":[");
		
		
		// 创建Java-JSON序列化
		Gson gson = new GsonBuilder().excludeFieldsWithoutExposeAnnotation().setDateFormat("yyyy-MM-dd HH:mm:ss").create();
		
		for(FundPay fund : fundIntentpay){
			// 获取期数
			buff.append("{\"payintentPeriod\":");
			buff.append(gson.toJson(fund.getPayintentPeriod()));
			buff.append(",\"intentDara\":");
			buff.append(gson.toJson(fund.getIntentDate()));
			buff.append("},");
		}
		
		buff.append("]}");
		jsonString = buff.toString();
		return SUCCESS;
	}
        
        
        
        List < PlManageMoneyType > list2 = plManageMoneyTypeService.getAll(filter);
        	首字必须大写			首字小写,后缀必须加Service
=============================================================
         java日期格式化[java转换年月日][java日期转换年月日][gson转换年月日]
        把
        【Gson gson = new Gson();】
        替换
        【Gson gson = new GsonBuilder().setDateFormat("yyyy-MM-dd HH:mm:ss").create();】
=============================================================
       java判断是否为空
       null == email || "".equals(email)

       java判断不为空
       null != isMobile && "1".equals(isMobile)
       null != telphone && !telphone.equals("")
       
       最完善判断:
      ((null != isMobile) && (!"".equals(isMobile)) && ("1".equals(isMobile)) && (isMobile.endsWith("1")))
=============================================================
        java中数组的定义
        
        java中数组的定义：
        字符串数组：
        1、String[] str=new String[5];
        2、String[] str=new String[]{"a","b"};
        3、String[] str={"a","b"};
        整形数组：
        1、int[] i=new int[5];
        2、int[] i=new int[]{0,1};
        3、int[] i={0,1};
        其他数组定义的方法类似！
       
         //指定长度为10
        String [] arr = new String[10];
        //两种没什么区别，只是上面可读性比较好
        String arr[] = new String[10];
        //直接初始化数组
        String[] arr = {"a","b"};
        //先定义一个数组
        String [] arr = null;
        //赋值数组的第一个值
        arr[0] = "a";
        
        
        数字类型定义
        char numChar = '9';  
        int  intNum = (int)numChar;  
        
        
=============================================================
        Java创建数组,循环遍历对象添加到数组
        String[] b = new String[all.size()]; 
	int i = 0; 
	for (CsBank bank : all) { 
		String len = bank.getRemarks(); 
		b[i] = len;
		i++; 
	}
        
        
        测试demo:
	// 判断移动端参数是否不等于空  && 传入字符串最后长度等于1 && 传入参数等于1
	if(null != isMobile && isMobile.endsWith("1") && "1".equals(isMobile)){
		StringBuffer buff = new StringBuffer("{\"success\":true")
				.append(",\"totalCounts\":5")
				.append(",\"result\":{\"value\":");
		
		// 创建二个空数组,分别存放两个对象
		String[] b = new String[all.size()];
		String[] c = new String[all.size()];
		
		// 创建整型的变量
		int i = 0;
		
		// 循环遍历对象
		for (CsBank bank : all) {
			// 获取对象参数,并添加带数组内
			String len = bank.getRemarks();
			b[i] = len;
			
			String len2 = bank.getBankname();
			c[i] = len2;
			
			// 自增数组添加对象参数
			i++;
		}
		// 创建Java-JSON序列化
		Gson gson = new GsonBuilder().excludeFieldsWithoutExposeAnnotation().setDateFormat("yyyy-MM-dd HH:mm:ss").create();
		buff.append(gson.toJson(b));
		buff.append(",\"text\":");
		buff.append(gson.toJson(c));
		buff.append("}}");
		jsonString = buff.toString();
		return SUCCESS;
	}
=============================================================
        Java拼接第三方返回状态和信息[java拼接判断]
        
       		// 判断是否是移动端
		String isMobile = this.getRequest().getParameter("isMobile");
		
		// 创建json字符串
		StringBuffer sb = new StringBuffer();
		
		// 将数据转成JSON格式
		Gson gson = new GsonBuilder().setDateFormat("yyyy-MM-dd").create();

		// 声明布尔值判断
		Boolean flag = false;
		
		// 声明String获取字符串
		String str = ""; 

	// 判断是否是移动端
		if (null != isMobile && "1".equals(isMobile)) {
			sb.append("{\"success\":");
			sb.append(gson.toJson(flag));
			sb.append(",\"result\":");
			sb.append(gson.toJson(str));
			sb.append("}");
			setJsonString(sb.toString());
			return SUCCESS;
		}  else {
			this.setSuccessResultValue(TemplateConfigUtil.getDynamicConfig(
					DynamicConfig.MESSAGE).getTemplateFilePath());
		}
=============================================================
                java获取索引值[java拼接索引值][java添加索引]
                
                第一种:String类型存数据库(三大步骤)
                
                1.在要获取参数的类【PlManageMoneyPlanBuyinfo.java】实体添加数据库字符串参数
                2.在实体添加【get】和【set】方法
               【protected String indexId;】 // 获取index索引值    
                3.在实体类后面添加【.h】搜索java xml模板
                       例如:
                       【PlManageMoneyPlanBuyinfo.hbm.xml】
                4.将【name】和【column】改成字符串参数同名
                5. 方法添加判断,并设置索引
                
                // 判断长度是否大于0
		if (buyInfoList.size() > 0) {
			for (int i = 0; i < buyInfoList.size(); i++) {
				// 循环遍历,将每条长度赋给参数
				buyInfoList.get(i).setIndexId(String.valueOf(i + 1));
				// 合并每条数据的index
				plManageMoneyPlanBuyinfoService.merge(buyInfoList.get(i));
			}
		}
                
                第二种:Number类型存数据库(二大步骤)
                1.在实体添加int类型字段,并添加【get】和【set】方法
                        private int indexId;
                	public int getIndexId() {
                		return indexId;
                	}
                	public void setIndexI(int indexId) {
                		this.indexId = indexId;
                	}
                2.新建一个java类,循环遍历,并添加条数
PlBidSale plBSale = plBidSaleService.querySaleInfo(Long.valueOf(this.getRequest().getParameter("salseId")));
		PlBidPlan plan = null;
		if (plBSale != null) {
			plan = plBidPlanService.get(plBSale.getBidPlanID());
		}
		if (plan != null) {
			listPlBid = plBidInfoService.getIntentInfo(plan.getBidId(), "");
			for (int i = 0; i < listPlBid.size(); i++) {
				listPlBid.get(i).setNum(i + 1);
			}
		}
		

		// 创建json对象
		StringBuffer buff = new StringBuffer("{\"success\":true,\"totalCounts\":")
				.append(listPlBid.size())
				.append(",\"result\":");
		// 创建json序列化
		JSONSerializer json = JsonUtil.getJSONSerializer();
		json.transform(
				// 创建日期格式化 <= 将一个对象转换成另外一个对象
				new DateTransformer("yyyy-MM-dd"),
				
				// 将需要的时间参数,转换成 年-月-日格式
				new String[] {
						"bidtime",
						"modifyDate",
				}
				);
		
		// 添加数组到对象内
		buff.append(json.serialize(listPlBid));
		buff.append("}");
		
		// 将对象转换json字符串
		jsonString = buff.toString();
		return SUCCESS;
=============================================================
        第三方投标,移动端错误
        问题原因:重新加载了一次参数,去掉就好        
        webMsg.setUrl("bidPlanDetailPlBidPlan.do?bidId="+plBidInfo.getPlBidPlan().getBidId()+"&mobile=mobile");
=============================================================
        Java控制台
        System.out.println();
=============================================================
        不传形参个数,靠arguments获取值;
                arguments[arguments.length-1]     
=============================================================         
        判断形参和实参长度是否一致？
         function fn(a, b, c, d) {
             //方法一：调用自身函数
             /* if (arguments.length != fn.length) {
                 return '这是形参长度：' + fn.length;
              } else{
                return '这是实参长度：' + arguments.length;
              }*/
             //方法二：通过arguments对象来获取
             if (arguments.length != arguments.callee.length) {
                 return '这是形参长度：' + arguments.callee.length;
             } else {
                 return '这是实参长度：' + arguments.length;
             }
         }
         console.log(fn())
=============================================================       
        获取函数形参的列表，获取单个参数。
        【函数名.toString().match(/function([^\(]*)\(([^\)]*)\)/)】获取函数()参数
        【match[2].split(',')】用变量保存，只得到分割参数后的数组
        
        
    正则说明：
           //从function开头搜索
          function(
          //开头从转义字符后(大括号前搜索
          [^\(]
          //搜索到之后
          *)
          //以大括号开头
          \((
          //到大括号结尾
          [^\)]
          //再之后的大括号结束
          *)\) 
         
        示范函数： 
        function test(a,b,c,d){
                return '1';
        }
        //操作代码
         var match = test.toString().match(/function([^\(]*)\(([^\)]*)\)/);
         var argNames = match[2].split(',');
         
      //控制台输出
      console.log(argNames);
=============================================================
      //判断变量是否定义(是的话true,否则false)
      Object.prototype.isVar = function (a) {
          var temp = isVar.toString().match(/function([^\(]*)\(([^\)]*)\)/);
          var savaVar = temp[2].split(',').join('');
          var str = eval('window.' + savaVar);
          return (str == undefined);
      };

      console.log(Object.isVar(window.a));
=============================================================
        封装函数形参个数若不等于输入形参长度,那么更改判断?
      var $= {
          //设置参数根据0,1,2不同返回不同文本状态
          ifStatus: function(parameter) {
              parameter = parameter;
              if (arguments.length < 4) {
                  if (parameter == 0 || parameter == '0') {
                      parameter = arguments[1];
                  } else {
                      parameter = arguments[2];
                  }
              } else if (arguments.length == 4) {
                  if (parameter == 0 || parameter == '0') {
                      parameter = arguments[1];
                  } else if (parameter == 1 || parameter == '1') {
                      parameter = arguments[2];
                  } else if (parameter == 2 || parameter == '2') {
                      parameter = arguments[arguments.length - 1];
                  } else {
                      parameter = '';
                  }
              } else if (arguments.length == 5) {
                  if (parameter == 0 || parameter == '0') {
                      parameter = arguments[1];
                  } else if (parameter == 1 || parameter == '1') {
                      parameter = arguments[2];
                  } else if (parameter == 2 || parameter == '2') {
                      parameter = arguments[3];
                  } else if (parameter == 3 || parameter == '3') {
                      parameter = arguments[arguments.length - 1];
                  } else {
                      parameter = '';
                  }
              }
              return parameter;
          },
          
          //完整版封装判断0,1...状态,返回对应文本     
          function ifStatus(parameter, obj) {
              var parameter = typeof parameter != 'number' ? (parameter.replace(/\s/g, "")) / 1 : parameter;
              var obj = obj || {};
              var flag = false;
              var statusText = '';
              for (var i in obj) {
                  if (flag == false && i == parameter) {
                      flag = true;
                      tatusText = obj[i];
                  }
              }
              if (flag == true) {
                  return tatusText;
              } else {
                  return '未填写';
              }
          }
          
          //根据参数有多个0,1,2,进行拼接字符
          setStetus: function(data) {
            var arr = data.split(',');
            var responseText = [];
            for (var i in arr) {
                arr[i] = arr[i].replace(/\s+/g, "");
                if (arr.length > 1) {
                    if (arguments.length < 4) {
                        if (arr[i] == 0 || arr[i] == '0') {
                            if (responseText.indexOf(i) != arr[i]) {
                                responseText.push(arguments[1]);
                            }
                        } else if (arr[i] == 1 || arr[i] == '1') {
                            if (responseText.indexOf(i) != arr[i]) {
                                responseText.push(arguments[2]);
                            }
                        } else if (arr[i] == 2 || arr[i] == '2') {
                            if (responseText.indexOf(i) != arr[i]) {
                                responseText.push(arguments[3]);
                            }
                        }
                    } else if(arguments.length == 4){
                        if (arr[i] == 0 || arr[i] == '0') {
                            if (responseText.indexOf(i) != arr[i]) {
                                responseText.push(arguments[1]);
                            }
                        } else if (arr[i] == 1 || arr[i] == '1') {
                            if (responseText.indexOf(i) != arr[i]) {
                                responseText.push(arguments[2]);
                            }
                        } else if (arr[i] == 2 || arr[i] == '2') {
                            if (responseText.indexOf(i) != arr[i]) {
                                responseText.push(arguments[3]);
                            }
                        } else if (arr[i] == 3 || arr[i] == '3') {
                            if (responseText.indexOf(i) != arr[i]) {
                                responseText.push(arguments[4]);
                            }
                        }
                    } else if(arguments.length == 5){
                        if (arr[i] == 0 || arr[i] == '0') {
                            if (responseText.indexOf(i) != arr[i]) {
                                responseText.push(arguments[1]);
                            }
                        } else if (arr[i] == 1 || arr[i] == '1') {
                            if (responseText.indexOf(i) != arr[i]) {
                                responseText.push(arguments[2]);
                            }
                        } else if (arr[i] == 2 || arr[i] == '2') {
                            if (responseText.indexOf(i) != arr[i]) {
                                responseText.push(arguments[3]);
                            }
                        } else if (arr[i] == 3 || arr[i] == '3') {
                            if (responseText.indexOf(i) != arr[i]) {
                                responseText.push(arguments[4]);
                            }
                        } else if (arr[i] == 4 || arr[i] == '4') {
                            if (responseText.indexOf(i) != arr[i]) {
                                responseText.push(arguments[5]);
                            }
                        }
                    }
                } else if(arr.length == 1){ //当只选择1个复选框的时候
                  if (arguments.length < 6) {
                        if (arr[i] == 0 || arr[i] == '0') {
                            if (responseText.indexOf(i) != arr[i]) {
                                responseText.push(arguments[1]);
                            }
                        } else if (arr[i] == 1 || arr[i] == '1') {
                            if (responseText.indexOf(i) != arr[i]) {
                                responseText.push(arguments[2]);
                            }
                        } else if (arr[i] == 2 || arr[i] == '2') {
                            if (responseText.indexOf(i) != arr[i]) {
                                responseText.push(arguments[3]);
                            }
                        } else if (arr[i] == 3 || arr[i] == '3') {
                            if (responseText.indexOf(i) != arr[i]) {
                                responseText.push(arguments[4]);
                            }
                        } else if (arr[i] == 4 || arr[i] == '4') {
                            if (responseText.indexOf(i) != arr[i]) {
                                responseText.push(arguments[5]);
                            }
                        }
                    }
                }
            }
            responseText = responseText.join(',') ;
            responseText = responseText.charAt(responseText.length - 1) == ',' ? responseText.substr(0,responseText.length - 1) : responseText;
            return responseText;
        }
      }
      测试:
      var data = {
          a : 2,
          b : 5,
      }
     调用:
        console.log($.ifStatus(data.a,'这是为0返回文本','这是为1返回文本','这是为2返回文本','这是为3返回文本'));
        console.log($.setStetus(data.c, '这是0', '这是1'));
=============================================================
     【封装变量未声明】[未声明][isVar]
    //判断变量对象-属性是否声明
    function $isVO (myObj) {
        var global = this;
        var flag = false;
        if(!global.myObj
           || typeof myObj == "undefined"
           || !global.hasOwnProperty('myObj')
           || myObj === undefined
           || !('myObj' in window)
        ) {
            var flag = true;
        }
        return flag;
    }

   console.log($isVO(window.fn));
   console.log($isVO(this.fn));
   console.log($isVO(global.fn));
=============================================================
   // 封装判断radio值进行选择
   
    /*
      值变更时触发,选中单选按钮
      @author waecy(waecy2@sina.cn)

      @param {String} name 要选择中单选按钮name值
      @param {String} InterfaceValue 后台接口传入的值
      @param {String} booleanValue 判断是否禁止选中,不传参数或false禁止选中,传入true能够手动选中
     */

    function $radioChecked (name,InterfaceValue,booleanValue) {

      // 获取所有input对应name的单选框
      var inputs = document.getElementsByName(name);

      // 循环遍历个数
      for (var i = 0, len = inputs.length; i < len; i++) {

          // 判断如果单选框value等于后台传入的值,那么选中并禁止操作
          if (inputs[i].value == InterfaceValue) {
                inputs[i].checked = true;
          }

        // 判断是否禁止选中,不传参数或false禁止选中,传入true能够手动选中
         if (arguments[2] == undefined || arguments[2] == false) {
                inputs[i].disabled = true;
         } else {
                inputs[i].disabled = false;
         }

      }
    }
    
=============================================================
    js封装发送验证码倒计时
    function $invokeSettime(obj) {
        var defaultObj = {
            time : obj.time == null ? 120 : obj.time,
            activeCls : obj.activeCls == null ? 'btn-disabled' : obj.activeCls,
            timeInterval : obj.timeInterval == null ? 1000 : obj.timeInterval
          }
        // 声明新变量,保存不变的时间
        const temoTime = defaultObj.time;

        // 倒计时更改的值
        var countdown = defaultObj.time;
        $setTime(obj);

        function $setTime (obj) {
            if (countdown == 0) {
               $(obj).removeClass('btn-disabled');
               $(obj).attr("disabled", false);
                $(obj).text("获取验证码");
                countdown = temoTime;
                return;
            } else {
                $(obj).addClass('btn-disabled');
                $(obj).attr("disabled", true);
                $(obj).text("重新发送(" + countdown + "s)");
                countdown--;
            }
            setTimeout(function () {
                $setTime(obj);
            }, defaultObj.timeInterval);
        }
    }
    
    使用方法:
    $('#btn').on('click', function () {
        new $invokeSettime("#btn");

    })
    
    
    ST获取验证码
    // =================设置验证码等待事件==============================
// 设置倒计时秒
var seconds = 60;

// 设置还原倒计时秒
var temp = 60;

// 将this指向一个变量
var getVerifySmsObj = this;

// 如果按钮disabled为false,能够点击时
if (this._disabled == null || this._disabled == false) {
		// 发送验证码ajax
				Ext.Ajax.request({
					url : __ctxPath + "/user/checkUerSendMegBpCustMember.do${cursor}",
					params : {
						isMobile : '1',
						 telphone : telphone
					},
					method: 'POST',
	   				async: true,
					success : function (response) {
						// 解析json为对象
						var responseText = Ext.util.JSON.decode(response.responseText);
						
						// 如果返回为true
						if (responseText.success == true) {
							// 获取验证码按钮的文本
							var text = getVerifySmsObj.getText();
							
							// 如果有错误提示,提示用户
							if (responseText.errMsg) {
								Ext.Msg.alert("",responseText.errMsg);
							} 
							// 否则就是正常,短信发送验证码
							else { 
								// 发送验证码后禁止点击按钮第二次
								getVerifySmsObj.setDisabled(true);
									
								// 设置点击后切换外部样式 #999999
									getVerifySmsObj.setCls('btn-disabled999');
									
							// 设置定时器
							var interval = window.setInterval(function() {
								seconds--;
								
								// 如果倒计时完成后
								if (seconds == 0) {
								
									// 恢复倒计时秒
									seconds = temp;
									
									// 停止定时器
									window.clearInterval(interval);
									
									// 设置文本
									getVerifySmsObj.setText("<font color=white>重新获取验证码</font>");
									
									// 恢复可点击状态
									getVerifySmsObj.setDisabled(false);
									
									// 切换默认样式
									// PS:必须在外部CSS声明,并在组件里设置默认外部样式,否则不生效
									getVerifySmsObj.setCls('btn-bg-Cls');
								} else {
									getVerifySmsObj.setText("获取验证码(" + seconds + ")");
								}
							}, 1000);
								
								// 成功的话 发送验证码成功提示框
								Ext.Msg.alert("","验证码已发送至您的手机，请注意查收！");
							}
							
						} else {
							// 发送错误提示
							Ext.Msg.alert("",responseText.errMsg);
							
							// 恢复可点击状态
							getVerifySmsObj.setDisabled(false);
						}
					}
				});
}
// =================End结束获取验证码==============================
=============================================================
       封装获取函数名[获取方法名]
    // 获取函数名
    function $getFnName (callee) {
        var _callee = callee.toString().replace(/[\s\?]*/g, ""),
            comb = _callee.length >= 50 ? 50 : _callee.length;
        _callee = _callee.substring(0, comb);
        var name = _callee.match(/^function([^\(]+?)\(/);
        if (name && name[1]) {
            return name[1];
        }
        var caller = callee.caller,
            _caller = caller.toString().replace(/[\s\?]*/g, "");
        var last = _caller.indexOf(_callee),
            str = _caller.substring(last - 30, last);
        name = str.match(/var([^\=]+?)\=/);
        if (name && name[1]) {
            return name[1];
        }
        return "anonymous"
    };
=============================================================
        正则替换指定特定字符为空
        【变量.replace(/[\n]/ig, '');】
=============================================================    
        listeners事件里的函数[onlocal事件][sencha touch事件][sencha touch页面加载事件]
         【painted】页面加载事件,相当于on
         load和$(function(){}) 
=============================================================
        JS中给函数参数添加默认值?
        1.封装一个所需功能的函数
        2.用新的变量保存添加默认值的函数
                封装的第一个参数是所需功能函数名
                封装的第二个参数是对象格式,设置所需形参默认值
        3.使用保存变量的匿名函数来使用,若缺少实参,则使用默认值,若实参对应形参,那么使用设置的形参.
        
        
          var defaultArguments = function(func, defaultValues) {
              if (!func) return null;
              if (!defaultValues) return func;
              // 如果之前保存过默认值，将其取出合并到新的defaultValues中
              var _defaultValues = func._defaultValues;
              if (_defaultValues) {
                  for (var k in _defaultValues) {
                      if (!defaultValues.hasOwnProperty(k)) {
                          defaultValues[k] = _defaultValues[k];
                      }
                  }
              }
              // 如果有保存的func函数就取出来，从而省掉一层对wrapper的调用
              func = func._original ? func._original : func;
              
              var match = func.toString().match(/function[^\(]*\(([^\)]*)\)/);
              if (!match || match.length < 2) return func;
              //删除单行注释 和 删除多行注释
              var argNameStr = match[1].replace(/\/\/.*/gm, '').replace(/\/\*.*?\*\//g, '')
                  .replace(/\s+/g, ''); // 去掉空格
              if (!argNameStr) return func;
              var argNames = argNameStr.split(',');
              var wrapper = function() {
                  var args = Array.prototype.slice.call(arguments);
                  for (var i = arguments.length; i < argNames.length; i++) {
                      args[i] = defaultValues[argNames[i]];
                  }
                  return func.apply(null, args);
              };
              // 重写wrapper的toString方法，返回原始func函数的toString()结果
              wrapper.toString = function() {
                  return func.toString();
              };
              // 把原始的func函数和当前的默认值对象保存到wrapper中
              wrapper._original = func;
              wrapper._defaultValues = defaultValues;
              return wrapper;
          };
          // add_是一个函数，调用它会返回add函数的结果，同时x具有默认值3
          function add(a, b) {
              return a + b;
          }
          // 给add函数的参数b添加默认值3
          var add_ = defaultArguments(add, {
              b: 3
          });
          // 这句代码相当于调用add(2, 3)，因此返回5
          console.log(add_(2)); // 5
          // 而这句代码由于完整地给出了a、b的值，所以不会用到b的默认值，因此返回12
          console.log(add_(2, 10)); // 12
=============================================================
          js判断为空
                // 第一个是原型对象,第二个参数属性,是String字符串
		isObjEmpty = function(obj, attr, vel, fn) {
			// 通过flag识别符判断
			var flag = false;
			
			// 判断调用函数是否有参数
			var fnFlag = false;
			
			// 最终返回内容
			var ret = null;
			
			// 判断fn参数是否为空
			if (typeof fn !== 'undefined' && fn) {
				// 判断是否调用其他函数来处理返回结果
				if (typeof fn == "function" || toString.call(fn) == "[object Function]") {
					// 判断是否自定义返回文本
					if (typeof vel === 'undefined') {
						if (!Ext.isEmpty(obj) && obj.propertyIsEnumerable(attr)) {
							// 如果属性值为null和undefined和字符串,跳出判断
							if (obj[attr] == null || obj[attr] == 'null' || obj[attr] == '' || obj[attr] == 'undefined') return;
							
							// 设置flag为true
								flag = true;
								
							// 判断函数是否有参数
								fnFlag = toString.call(fn) == '[object Function]' || typeof fn === "function";
								
							// 如果对象属性不为空或undefined,那么返回对象属性值
							if (obj[attr] == '' || obj[attr] == null) {
							} else {
								// 设置返回文本
								ret = fnFlag == true ? fn(obj[attr]) : fn;
							}
						}
					} else if (typeof arguments[2] == "number") {
							// 设置flag为true
							flag = true;
							
							// 判断函数是否有参数
							fnFlag = toString.call(fn) == '[object Function]' || typeof fn === "function";
							
							// 如果对象属性不为空或undefined,那么返回对象属性值
							if (obj[attr] == '' || obj[attr] == null) {
								// 设置返回文本
								ret = vel - 0;
							} else {
								// 设置返回文本
								ret = fnFlag == true ? fn(obj[attr]) : fn;
							}
					} else {
							// 设置flag为true
							flag = true;
							
							// 判断函数是否有参数
							fnFlag = toString.call(fn) == '[object Function]' || typeof fn === "function";
							
						if (!Ext.isEmpty(obj) && obj.propertyIsEnumerable(attr)) {
							// 如果属性值为null和undefined和字符串,跳出判断
							if (obj[attr] == null || obj[attr] == 'null' || obj[attr] == '' || obj[attr] == 'undefined') {
								// 设置返回文本
								ret = vel;
							} else {
								// 设置返回文本
								ret = fnFlag == true ? fn(obj[attr]) : fn;
							}
							
						} else {
							// 判断是否传的字符串或数字
							if (typeof vel == "string" || toString.call(fn) == "[object String]" || typeof vel == "number" || toString.call(fn) == "[object Number]") {
								// 设置返回文本
								ret = vel;
							}
						
						}
					}
				} else {
					// 后面拼接字段
					var lastStr = fn;
					
					// 判断是否自定义返回文本
					if (typeof vel === 'undefined') {
						if (!Ext.isEmpty(obj) && obj.propertyIsEnumerable(attr)) {
							// 如果属性值为null和undefined和字符串,跳出判断
							if (obj[attr] == null || obj[attr] == 'null' || obj[attr] == '' || obj[attr] == 'undefined') return;
							
							// 设置flag为true
							flag = true;
								
							// 如果对象属性不为空或undefined,那么返回对象属性值
							if (obj[attr] == '' || obj[attr] == null) {
							} else {
								// 设置返回文本
								ret = obj[attr] + lastStr;
							}
						}
					} else if (typeof arguments[2] == "number") {
							// 设置flag为true
							flag = true;
							
							// 如果对象属性不为空或undefined,那么返回对象属性值
							if (obj[attr] == '' || obj[attr] == null) {
								// 设置返回文本
								ret = vel - 0;
							} else {
								// 设置返回文本
								ret = obj[attr] + lastStr;
							}
					} else {
							// 设置flag为true
							flag = true;
							
						if (!Ext.isEmpty(obj) && obj.propertyIsEnumerable(attr)) {
							// 如果对象属性不为空或undefined,那么返回对象属性值
							if (obj[attr] == null || obj[attr] == 'null' || obj[attr] == '' || obj[attr] == 'undefined') {
								// 判断是否传的字符串
								if (typeof fn == "string" || toString.call(fn) == "[object String]") {
									
									// 判断属性值为空时,自定义文本如果是未填字段,就不拼接第三个字段
									if (typeof vel == "string" || toString.call(vel) == "[object String]") {
										ret = vel;
									} else {
										// 设置返回文本
										ret = vel + fn;
									}
								} else {
									ret = vel;
								}
								
							} else {
								// 判断函数是否有参数
								fnFlag = toString.call(fn) == '[object Function]' || typeof fn === "function";
								
								// 如果不是函数,而是字符串
								if (fnFlag == false) {
									// 判断字符是否有*
									if (String(fn).indexOf('*') == -1) {
										// 设置返回文本
										ret = fnFlag == true ? lastStr : obj[attr] + lastStr;
									} else {
										// 设置返回文本
										ret = fnFlag == false ? lastStr : obj[attr] + lastStr;
									}
								}
								
							}
							
						} else {
								// 判断是否传的字符串或数字
								if (typeof vel == "string" || toString.call(fn) == "[object String]" || typeof vel == "number" || toString.call(fn) == "[object Number]") {
									// 设置返回文本
									ret = vel;
								} else {
								// 设置返回文本
								ret = obj[attr] + lastStr;
							}
						}
					}
				}
			} else {
				// 判断是否自定义返回文本
				if (typeof vel === 'undefined') {
					if (!Ext.isEmpty(obj) && obj.propertyIsEnumerable(attr)) {
						// 如果属性值为null和undefined和字符串,跳出判断
						if (obj[attr] == null || obj[attr] == 'null' || obj[attr] == '' || obj[attr] == 'undefined') return;
						
						// 设置flag为true
							flag = true;
							
						// 如果对象属性不为空或undefined,那么返回对象属性值
						if (obj[attr] == '' || obj[attr] == null) {
						} else {
							// 设置返回文本
							ret = obj[attr];
						}
					}
				} else if (typeof arguments[2] == "number") {
						// 设置flag为true
						flag = true;
						
						// 如果对象属性不为空或undefined,那么返回对象属性值
						if (obj[attr] == '' || obj[attr] == null) {
							// 设置返回文本
							ret = vel - 0;
						} else {
							// 设置返回文本
							ret = obj[attr];
						}
				} else {
					// 设置flag为true
					flag = true;
						
					if (!Ext.isEmpty(obj) && obj.propertyIsEnumerable(attr)) {
						// 如果对象属性不为空或undefined,那么返回对象属性值
						if (obj[attr] == null || obj[attr] == 'null' || obj[attr] == '' || obj[attr] == 'undefined') {
							// 设置返回文本
							ret = vel;
						} else {
							// 设置返回文本
							ret = obj[attr];
						}
						
					} else {
						// 如果对象属性不为空或undefined,那么返回对象属性值
						if (typeof vel == "string" || toString.call(fn) == "[object String]" || typeof vel == "number" || toString.call(fn) == "[object Number]") {
							// 设置返回文本
							ret = vel;
						}
					}
				}
			}
			
			// 判断对象属性是否有值
			if (flag == true) {
				return ret;
			} else {
				return null;
			}
	
		}
=============================================================
        js添加,号[js添加逗号
        
        //举例说明。  
        //经常看到有人为了给数字加千分号（，） 例 1344444 ---> 13,444,444;写一大堆代码.  
        //其实没必要，这里给出正则的解决办法（js版）  
        var str = "1212123213213";  
        var reg = /(\d)(?=(\d{3})+(?!\d))/g;  
        var reg1 = /(?=(\d{3})+(?!\d))/g; // 与上边的匹配的结果差不多  
        console.log(str.replace(reg,"$1,"));  
        console.log(str.replace(reg1,","));
        
         //而且这种写法大部分语言都支持，C,JAVA,JS,Perl  
=============================================================
        Native App是一种基于智能手机本地操作系统如iOS、Android、WP并使用原生程式编写运行的第三方应用程序,也叫本地app。
        优势：
        1、提供最佳的用户体验，最优质的用户界面，最华丽的交互
        2、针对不同平台提供不同体验
        3、可节省带宽成本
        4、可访问本地资源
        5、盈利模式明朗
        6、打开速度更快
        
        劣势：
        1、移植到不同平台上比较麻烦
        2、维持多个版本的成本比较高
        3、需要通过store或market的确认
        4、盈利需要与第三方分成
        5、开发的成本比较大

                                Web App（网页应用）             Hybrid App（混合应用）          Native App（原生应用）
        开发成本:                       低                              中                              高
        维护更新：                      简单                            简单                            复杂
        体验:                           差                              优                              优
        Store或market认可：             不认可                          认可                            认可
        安装：                          不需要                          需要                            需要
        跨平台：                        优                              优                              差
=============================================================
        app.js
	1.==> sencha-touch-debug.js
	私有的
     	@成员 Ext
    triggerReady: function() ==> 触发器
	创建三个所需文件个数对象,然后删除
	Ext.readyListeners
	
	2.chrome-state-manager.js
        3./src/event/Dispatcher.js 加载Dispatcher.js
               分配
        4.回到sencha-touch-debug.js
           将脚本元素注入到文档的头部，相应地调用onLoad和onError
             injectScriptElement: function(url, onLoad, onError, scope)
               injectScriptElement添加script标签对应的元素
                onLoadFn = function() {
                    me.cleanupScriptElement(script);
                    onLoad.call(scope);
                },
        5./src/MessageBox.js 加载MessageBox.js
             通知消息
        6.回到sencha-touch-debug.js
                onLoadFn = function() {
                    me.cleanupScriptElement(script);
                    onLoad.call(scope);
                },
        7./src/event/publisher/Dom.js 加载Dom.js
                Ext.define('Ext.event.publisher.Dom,{})
        8.回到sencha-touch-debug.js
                onLoadFn = function() {
                    me.cleanupScriptElement(script);
                    onLoad.call(scope);
                },
       9./src/event/ListenerStack.js加载ListenerStack.js
                Ext.define('Ext.event.ListenerStack', {});
       10.回到sencha-touch-debug.js
       11./src/event/Controller.js加载Controller.js
              Ext.define('Ext.event.Controller', {})
       12.回到sencha-touch-debug.js
       13./src/Toolbar.js
       14./src/Sheet.js
       15./src/field/Text.js
       16./src/field/TextArea.js
       17./src/event/publisher/Publisher.js
       18./src/event/publisher/Dom.js 加载Dom.js
       19./src/event/Controller.js 加载Controller.js
       20./src/Button.js 加载Button.js
       21./src/Title.js 加载Title.js
       22./src/Spacer.js 加载Spacer.js
       23./src/Panel.js 加载Panel.js
       24./src/fx/Animation.js 加载Animation.js
       25./src/field/Field.js 加载Field.js
       26./src/field/TextAreaInput.js 加载TextAreaInput.js
       27./src/event/Event.js 加载Event.js
       28./src/layout/Layout.js 加载Layout.js
       29./src/ItemCollection.js 加载ItemCollection.js
       30./src/behavior/Scrollable.js 加载Scrollable.js
       31./src/Mask.js 加载Mask.js
       32./src/Component.js 加载Component.js
       33./src/util/LineSegment.js
       34./src/fx/animation/Slide.js
       35./src/fx/animation/SlideOut.js
       36./src/fx/animation/Fade.js
       37./src/fx/animation/Fade.js
       38./src/fx/animation/Flip.js
       39./src/fx/animation/Pop.js
       40./src/fx/animation/PopOut.js
       41./src/Decorator.js
       42./src/field/Input.js
       43./src/layout/Fit.js
       44./src/layout/Card.js
       45./src/layout/HBox.js
       46./src/layout/VBox.js
       47./src/util/MixedCollection.js
       48./src/behavior/Behavior.js
       49./src/scroll/View.js 加载View.js
       50./src/AbstractComponent.js
       51./src/mixin/Traversable.js
       52./src/ComponentManager.js
       53./src/XTemplate.js
       54./src/behavior/Translatable.js
       55./src/behavior/Draggable.js
       56./src/util/Point.js
       57./src/fx/animation/Abstract.js
       58./src/layout/Default.js
       59./src/fx/layout/Card.js
       60./src/layout/AbstractBox.js
       61./src/util/AbstractMixedCollection.js
       62./src/util/Sortable.js
       63./src/Evented.js
       64./src/scroll/Scroller.js
       65./touch/src/scroll/Indicator.js
       66.Ext.mixin.Mixin
       68.Ext.XTemplateCompiler
       69.Ext.util.Translatable
       70.Ext.util.Draggable
       71.Ext.fx.State
       72.Ext.fx.layout.card.Slide
       73.Ext.fx.layout.card.Cover
       74.Ext.fx.layout.card.Reveal
       75.Ext.fx.layout.card.Fade
       76.Ext.fx.layout.card.Flip
       77.Ext.fx.layout.card.Pop
       78.Ext.fx.layout.card.Scroll
       79.Ext.mixin.Observable
       80.Ext.util.Filter
       81.Ext.util.Sorter
       82.Ext.fx.easing.BoundMomentum
       83.Ext.fx.easing.EaseOut
       84.Ext.util.SizeMonitor
       85.Ext.scroll.indicator.Default
       86.Ext.scroll.indicator.ScrollPosition
       87.Ext.scroll.indicator.CssTransform
       88.Ext.util.Format
       89.Ext.XTemplateParser
       90.Ext.XTemplateParser
       91.?
       92.Ext.fx.layout.card.Style
       93.Ext.fx.layout.card.Abstract
       94.Ext.fx.easing.Linear
       95.Ext.fx.easing.Abstract
       96.Ext.fx.easing.Momentum
       97.Ext.fx.easing.Bounce
       98.Ext.scroll.indicator.Abstract
       99.Ext.DateExtras
       100.Ext.util.translatable.Abstract
       
       
       
       
加入Ext前缀就是从引入sencha-touch-debug.js当前目录下src开始,
	Ext. = 默认sencha-touch-debug.js文件夹/src为路径
不加就是当前html或js所在文件夹下开始路径
=============================================================
        更改Sencha Tou英文?
         修改日期:
         Ext.Date.monthNames = [
               '一月', '二月', '三月', '四月', '五月', '六月',
               '七月', '八月', '九月', '十月', '十一月', '十二月'
              ];
        修改按钮英文:
               Picker.js
         text: 'Done' 改成完成
         Cancel 改成 取消
        中文提示框:
                可以在application装载的时候，覆盖Ext.MessageBox默认的静态常量；
        
        text: 'OK' 替换成 text: '确定'
        text: 'Cancel' 替换成 text: '取消'
        text: 'YES' 替换成 text: '是'
        text: 'NO' 替换成 text: '否'
        text: 'Done' 替换成 text: '确定'
更改返回中文:
        useTitleForBackButtonText: false,
        defaultBackButtonText: 'Back' 替换成 defaultBackButtonText: '返回'
        搜索:
        useTitleForBackButtonText: false,上一个就是更改返回的文本
        
        搜索:monthNames :
           monthNames: ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月'],
           dayNames: 
             dayNames: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"],
        
        Ext.MessageBox.OK.text = '确定';
        Ext.MessageBox.YES.text = '是';
        Ext.MessageBox.NO.text = '否';
        Ext.MessageBox.CANCEL.text = '取消';

        Ext.each(Ext.MessageBox.OKCANCEL, function(item, index, allItems) {
            if ('cancel' == item.itemId) {
                item.text = '取消';
            } else if ('ok' == item.itemId) {
                item.text = '是';
            }
        });
        Ext.each(Ext.MessageBox.YESNOCANCEL, function(item, index, allItems) {
            if ('cancel' == item.itemId) {
                item.text = '取消';
            } else if ('ok' == item.itemId) {
                item.text = '是';
            } else {
                item.text = '否';
            }
        });
        Ext.each(Ext.MessageBox.YESNO, function(item, index, allItems) {
            if ('ok' == item.itemId) {
                item.text = '是';
            } else {
                item.text = '否';
            }
        });
=============================================================
        Ext中默认铺满整个屏幕?
        fullscreen: true,  //是否全屏，选择true则横竖屏切换时仍可以保证自动适应尺寸
=============================================================
        去除下拉框默认样式?[去除select默认样式][去除select样式]
        
        select {
        /*Chrome和Firefox里面的边框是不一样的，所以复写了一下*/
        border: solid 1px #000;
        /*很关键：将默认的select选择框样式清除*/
        appearance:none;
        -moz-appearance:none;
        -webkit-appearance:none;
        /*将背景改为红色*/
        background:red;
        /*加padding防止文字覆盖*/
        padding-right: 14px;
        }
        /*清除ie的默认选择框样式清除，隐藏下拉箭头*/
        select::-ms-expand { display: none; }
=============================================================
        MyEclipse添加快捷键(模板)?
        
        1.【窗口 -- 首选项 -- MyEclipse --  Emmet -- Abbreviations缩写】或【Snippets片段】
                支持格式
                HTML
                CSS
                HAML
                XML
                XSL
        2.使用Tab键就好
        比如html代码:
                简写:bz
                代码块:backgroun-size:"";
        比如js代码:
                简写:jq
                代码块:
                        ${cursor}$$(function(){

                        })   
        
        支持HBuilder代码块导入.
        
        
        js和jsDoc文件中快捷键:
        1.【Spket -- Editors -- Javascript Editor -- Templates】
        2.Alt + / 打开代码块
        3.回车
        
        ※注:$美元符必须替换成$$两个才能生出模板
        
        Java快捷键[Java代码块]
        管用:
        【窗口(W) -- 首选项(P) -- Java -- 编辑器 -- 模板】
        不管用:
        【窗口(W) -- 首选项(P) -- MyEclipse -- Javascript -- Editor -- Templates】
        
        
        【常规 -- 编辑器  -- 文件关联】
        1.选择【*.js】,下面【相关联的编辑器(E)】
        2.点击【添加(D)...】选择【Spket JavaScript Editor】
        3.选中【Spket JavaScript Editor】,点右侧【缺省值(F)】
        4.确定
        
         【常规 -- 编辑器  -- 文件关联】
        1.选择【*.html】,下面【相关联的编辑器(E)】
        2.点击【添加(D)...】选择【MyEclipse Visual HTML Designer (缺省值) (由"HTML"内容类型锁定)】
        3.选中【MyEclipse Visual HTML Designer (缺省值) (由"HTML"内容类型锁定)】,点右侧【缺省值(F)】
        4.确定
=============================================================
        Eclipse MyEclipse 代码格式化 换行处理
        
        辛苦写完的代码，被Eclipse一格式化以后，本来想放在一行上的东西却被自动转成了多行，虽然自动换行以后可以在编辑器中一眼就能看到全部的代码，但是可读性却大打折扣，比如方法名及参数我喜欢放在一行上，自动格式化时给我拆成三、四行看着太乱了，避免出现这种情况的办法是：

        1.Java代码
        打开Eclipse的Window菜单，然后Preferences->Java->Code Style->Formatter->Edit/Show(根据不同版本可用的按钮会不一样) ->Line Wrapping->Maximum line width:由80改成800就行了。

        2.Html代码
        Window->Preferences->MyEclipse->Files and Editors->Html->Html Source->Line width->加个0以后保存。

        3.xml代码
        Window->Preferences->MyEclipse->Files and Editors->xml->xml Source->->Line width->999
=============================================================
        获取动态加载数据的ajax参数
        obj.initialConfig.params
        record.stores[0]._proxy._extraParams
=============================================================
        submile错误提示[submile设置错误提示][submile错误提示插件]
        1.【Ctrl + Shift + P】 + 输入【pci】 + 输入【SublimeLinter】
        2.【Ctrl + Shift + P】 + 输入【pci】 + 输入【sublimeLinter-jshint】
        3.下载【nodejs】，网址【http://nodejs.org/】
        4.开启cmd命令提示字符，输入【npm install -g jshint】和【npm install csslint】
                全局安装
                【npm install jshint -g】
                【npm install csslint -g】
        5.重新开启Sublime，【Ctrl + Shift + P】 + 输入【sshtml】或【ssjs】，即可使用jslint
        6.在路径下新增档案'.jshintrc'，即可定义规则
        参考网址【http://jshint.com/docs/options/】
        Ex:
        {
        "eqeqeq":true
        }
        进行3等号校验**
        
        
        
        cmd查看规则
                【jshint --rules-list】
                【csslint --rules-list】

=============================================================
         submile模板插件
        【Ctrl + Alt + H】 html 
        【Ctrl + Alt + + J】 javascript 
        【Ctrl + Alt + + C】 css
        【Ctrl + Alt + + P】 php
        【Ctrl + Alt + + R】 ruby
        【Ctrl + Alt +  Shift + P】 python
        
        关闭默认快捷键:
        Package Settings > SublimeTmpl > Settings - User, 增加disabled_keymap_actions配置:
        "disabled_keymap_actions": "html, css" // 关闭html/css语法的快捷键(多个逗号分隔)
        "disabled_keymap_actions: "all" //关闭所有语法快捷键
        安装:
        方法1. 通过 Package Control
        Package Control / Install Package, 搜索"SublimeTmpl" 或 "tmpl", 安装.
        [2012/08/01]已经通过Package Control审核
        方法2. Github
        打开项目主页, git clone到ST的Packages文件夹(\Data\Packages), 或直接把ZIP格式的下载下来解压到Packages文件夹(文件夹名称必须为:SublimeTmpl).
        设置:
        菜单: Preferences / Packages Settings / SublimeTmpl, 可以编辑菜单/快捷键/新语法等等.
=============================================================
        submile转rem插件[px转rem插件]
        
        下载地址:
                https://github.com/flashlizi/cssrem
                
        设置:
        {
            "px_to_rem": 100, // px转rem的单位比例，默认为40
            "max_rem_fraction_length": 6, // px转rem的小数部分的最大长度。默认为6。
            "available_file_types": [".css", ".less", ".sass", ".html"] // 启用此插件的文件类型。默认为：[".css", ".less", ".sass"]
        }
=============================================================
        jquery选择器优先级
        (1) 【$('.child', $parent)】$('子级元素',$(父级元素))
        这条语句的意思是，给定一个DOM对象，然后从中选择一个子元素。jQuery会自动把这条语句转成$.parent.find('child')，这会导致一定的性能损失。它比最快的形式慢了5%-10%。
        (2) 【$parent.find('.child')】$('父级元素').find('子级元素');
        这条是最快的语句。.find()方法会调用浏览器的原生方法（getElementById，getElementByName，getElementByTagName等等），所以速度较快。
        (3) 【$parent.children('.child')】$(父级元素).children('子级元素')
        这条语句在jQuery内部，会使用$.sibling()和javascript的nextSibling()方法，一个个遍历节点。它比最快的形式大约慢50%。
        (4) 【$('#parent > .child')】
        jQuery内部使用Sizzle引擎，处理各种选择器。Sizzle引擎的选择顺序是从右到左，所以这条语句是先选.child，然后再一个个过滤出父元素#parent，这导致它比最快的形式大约慢70%。
        (5) 【$('#parent .child')】
        这条语句与上一条是同样的情况。但是，上一条只选择直接的子元素，这一条可以于选择多级子元素，所以它的速度更慢，大概比最快的形式慢了77%。
        (6)【$('.child', $('#parent'))】
        jQuery内部会将这条语句转成$('#parent').find('.child')，比最快的形式慢了23%。
        所以，最佳选择是$parent.find('.child')。而且，由于$parent往往在前面的操作已经生成，jQuery会进行缓存，所以进一步加快了执行速度。
=============================================================
        jq获取焦点[jq获取焦点清除样式][jquery输入框focus事件]
         // 用事件委托
            $(document).on('focus', 'input', function () {
                // 失去焦点事件
        //        $(this).trigger('blur');
                
                // 清除阴影
                $('input').css({
                    '-webkit-box-shadow': 'none',
                    '-moz-box-shadow': 'none',
                    'box-shadow': 'none',
                    'outline': 'none'
                })
                
                // 去除光标
                $('input').attr('readonlyunselectable','on');
            });
=============================================================
        js获取url路径
        window.location.protocol + "//" + window.location.host 
=============================================================
        localStorage对象存储兼容性?
        
        //识别出是哪类存储机制
        var memory = window.localStorage || (window.userDataStorage && new userDataStorage()) || new cookieStorage();
        //然后在对于的机制中查询数据
        var username = memory.getItem("username");               


广州联络
鑫薪投资
巴州车贷
星宇信贷
华利蜂巢(上海尊驭)
易捷贷
融融理财
我负责的项目
	一:
	[170607]广州联络 大改样式 p2p-branch-proj-gd-gzhll/indexp2pmobile.html
		mem【bp_cust_member】查找到登录账号
		账号:houyejk4
		密码:houye2222
	小贷后台:
		账号:admin
		密码:yuseen
	二:
	[170608]鑫薪投资 p2p_gd_xxtz2/indexp2pmobile.html
	SELECT * FROM `sl_smallloan_project` ORDER BY projectId desc;
	SELECT * FROM cs_person where id =713;
	
	[erp][vm]
	三:
	巴州众跃分期购车业务系统
		审批功能和解决遇到问题

	IntentionCarInfo.js 【意向车辆信息】
	SlEnterPriseProcreditMaterialsView.js 【贷款资料上传】
	SlEnterPriseProcreditMaterialsView.js 【合同签署信息】
	录入基本资料.vm 【表单明细】 (车贷流程1 -- mobile -- 0 )
	TableForm.js 【提交下一步】
	MyTaskForm.js 【我的待办表单】
	uploadMaterial.js 【资料录入】getPicture undefined
	PersonList.js 【客户管理】
	bankDetailPanel.js  【搜索】
	SlSmallloanProjectList1.js 【我的项目】
	PersonDetail.js【客户档案管理 - 个人信息页】
	MenuConfig.js 【查找首页-项目模块】
	MyTaskForm.js 【审批设置】
	PersonMaterilalist.js 【资料库】
	SelectPersonlist.js 【申请项目 -- 项目基本信息】
	ApplySpouseloan.js 【申请项目 - 配偶信息】
 	GuaranteePersonView.js  【申请项目 - 担保人信息】

	myTaskAction.java 任务方法


        http://localhost:8046/erp_xj_bzzy/flow/nextProcessActivity.do
	{data: 1290, success: true}
        http://localhost:8046/erp_xj_bzzy/flow/nextProcessActivity.do
        {data: 1291, success: true}


	【搜索功能】
	html:
	'<div class="g-body" style="background-color:#f0f1f5;">'+
		'<header class="search-title dflex">'+
			'<input id="daiban" name="daiban" type="search" class="search-input flex" placeholder="请输入搜索内容" />'+
			 '<button id="find1" type="button" title="搜索" class="w-button-s w-button w-button-org w-button-search">搜索</button>'+
	        '</header>'+
       '</div>'


	_list =this;
    	$("#find1").on('click', function() {
    			var projectName = $("#daiban")[0].value;
    			_list.getStore().setParams({
    						"name" : projectName
    					});
    			_list.getStore().loadPage(1);
    		});

        },
	itemsingletap:function(index, target, record, e, eOpts ){
    		mobileNavi.push(Ext.create('htmobile.customer.person.PersonDetail',{
			data:e.raw
		})
	)

	【下拉选项切换功能】:
	在事件scope后添加【debugger】开启浏览器打断点
	listeners : {
		scope : this,
	       'change' : function(f) {
			var carConstitute = Ext.getCmp("procreditMortgageCarcarConstitute").getValue();
			var newVehicle = Ext.getCmp("newVehicle");
			var usedVehicle = Ext.getCmp("usedVehicle");
				if(carConstitute == "1"){
					usedVehicle.setHidden(true);
					usedVehicle.setValue(null);
					newVehicle.setHidden(false);
				} else{
					newVehicle.setValue(null);
					newVehicle.setHidden(true);
					usedVehicle.setHidden(false);
				}
		}
	}

	【Tab切换】(Tab选项卡切换)
		var audit=Ext.create('hrmobile.public.myhome.audit',{});
		var refund=Ext.create('hrmobile.public.myhome.refund',{});
		var stocks=Ext.create('hrmobile.public.myhome.stocks',{});
		var notpass=Ext.create('hrmobile.public.myhome.notpass',{});
		
		Ext.apply(config, {
			title : "<font color=" + topColor + " style='font-size:" + topsize + "'>借款记录</font>",
			layoutOnTabChange: true,
			defaults:{
				scrollable : {
					direction : 'vertical'
				}
			},
	        tabBar: {   defaults:{flex:1,zIndex:2},
	            layout:{  
	                pack:'center'
	            },
	           style: 'border-color:#00A0E8;background:#fff;font-color:#000;border-radius:2px;padding: 0px 1.2rem;'
	        },
			items : [
		         {
					title: '<div>审核中</div>',
				    items:[{
				    	xtype: 'container',
				        items:audit
				    }]
		         },
		         {
	            	title: '<div>还款中</div>',
	                items:[{
	                	xtype: 'container',
	    	            items:refund
	                }]
		         },{
	            	title: '<div>已完成</div>',
	                items:[{
	                	xtype: 'container',
	    	            items:stocks
	                }]
		         },{
	            	title: '<div>未通过</div>',
	                items:[{
	                	xtype: 'container',
	    	            items:notpass
	                }]
		         }]
		});

	跳转后
	extend : 'Ext.form.Panel',
	name : 'audit',
	constructor : function(config) {
		config = config || {};
		var telephone = null;
		Ext.apply(config,
		{
			
			items : [ {
				style : 'margin:.2rem;border: 1px solid #eee;border-radius: 5px;',
				items : [
					{
						name : "financeApplyUser.userID",
						xtype : 'hiddenfield'
					},{
					xtype:'panel',
					html:'<div class="itemList show">' +
			           ' <ul>' +
			            ' <li>' +
			               ' <div class="title">' +
			                  '<p>大轻鑫</p>' +
			                 ' <span>2017-12-20</span>' +
			                 ' <i></i>' +
			                '</div>' +
			                '<ol class="money">' +
			                  '<li>' +
			                 ' <div>20000</span>元</div>' +
			                   ' <span>借款金额</span>' +
			                  '</li>' +
			                 ' <li>' +
			                    '<div><span>3</span>期</div>' +
			                   ' <span>借款期数</span>' +
			                 ' </li>' +
			                  '<li>' +
			                   ' <div><span>2017-10-20</span></div>' +
			                   ' <span>借款时间</sapn>' +
			                 ' </li>' +
			               ' </ol>' +
			             ' </li>' +
			            '</ul>' +
			         ' </div>' 
					}
					]
			} ]
		});


	//封装 显示/隐藏元素函数 (减少页面中的冗余代码,增强可读性)
	var $= {
		tab : function (ele,type){
			if(type == true){
				try{
					return 	ele.setHidden(true);
				} catch(e){
					return;
				}	
			} else if(type != true || $TabEle.arguments.length < 2){
				try{
					return ele.setHidden(false);
				} catch(e){
					return;
				}
			}
		}
	}
		

		//P2p时间选择
		{
			xtype : 'panel',
			style : 'back-ground:#ffffff;margin:0.2rem;',
			layout : {
					type : 'hbox',
					align : 'middle'
				}
			items : [
				 {
					xtype: 'panel',
					html: '<img style="width:20px;" src="hrmobile/resources/imagesP2p/borrow/5_10.png"/>'
				  },
				 {
					xtype: 'panel',
		   	                html: '<span style="font-size: .29rem;margin-left: .18rem;">贷款期数</span>'
			         },
				 {
			        	xtype : 'textfield',
			                name:"payintentPeriod",
			                width:'5rem',
			                placeHolder:"请输入贷款期数",
			                style:'font-size:.29rem;color:#fff;margin: 0.1rem 0 0 0.45rem;'
				 }
				]
                        
                }

	P2P动态添加:
	Ext.define('hrmobile.public.myhome.refund', {
    extend: 'mobile.List',
    name: 'refund',
    constructor: function (config) {
    	config = config || {};
    	recordsitoInvestlist=new Array();
    	Ext.apply(config,{
                //title : "<font color="+topColor+" style='font-size:"+topsize+"'>合作信息</font>",
    		width:"100%",
		    height:"100%",
		    scrollToTopOnRefresh:false,//刷新不跳到头部
    		pullRefresh:true,
		    listPaging: true,
		    //isload:false,
    		fields:[ {
    					name : 'productName'
    				},{
						name : 'intentDate'
					},{
						name : 'loanToalMoney' //
					},{
						name : 'payintentPeriod' //
					},{
						name : 'startDate' //
					},{
						name : 'assetMoney' //
					},{
						name : 'releaseTime' //
					}],
    	        url : __ctxPath + '/user/getLoanInfoSmallloanInfo.do?status=2',
	    		root:'result',
	    	    totalProperty: 'totalCounts',
	    	    params : {
						isMobile : "1"
			},
		   itemTpl:new Ext.XTemplate(
		   '<div class="itemList show">' +
			        ' <ul id="addLi">' + 
				   ' <li>' +
			               ' <div class="title">' +
			                  '<p>{productName}</p>' +
			                 ' <span>{intentDate}</span>' +
			                ' <i class="proceedProceed_ico"></i>' +
			                '</div>' +
			                '<ol class="money">' +
			                  '<li>' +
			                 ' <div>{loanToalMoney}</span>元</div>' +
			                   ' <span>借款金额</span>' +
			                  '</li>' +
			                 ' <li>' +
			                    '<div><span>{payintentPeriod}</span>期</div>' +
			                   ' <span>借款期数</span>' +
			                 ' </li>' +
			                  '<li>' +
			                   ' <div><span>{startDate}</span></div>' +
			                   ' <span>借款时间</sapn>' +
			                 ' </li>' +
			               ' </ol>' +
			             ' </li>' +
			            '</ul>' +
			         ' </div>',
				{}),
				listeners : {
				itemsingletap:this.itemsingletap
			}
    	});
    	this.callParent([config]);
    },
    itemsingletap : function(obj, index, target, record) {
    	Ext.Ajax.request({
			url : __ctxPath + "/user/getLoanInfoSmallloanInfo.do",
			success : function(response) {
				var responseText = Ext.util.JSON.decode(response.responseText);
								console.log(responseText);
				var list = responseText.data;
				mobileNavi.push(Ext.create('hrmobile.public.myhome.borrowDetails',{
					 
				}));
			}
		});
    
    }
});


		ST获取动态加载数据的值[ST动态获取值]:
		{[this.afterMoney(values.afterMoney,values.sumMoney)]}



	【Ext.getCmp()】获取组件ID名
	【getValue())】得到value值
	【setValue())】设置value值
	【setHidden()】设置是否隐藏 true或false
	【readOnly】是否可读,true和false
		true的话不能输入,只能阅读
		false的话是可输入
	【placeHolder】输入提示文本
        【mobileView.setMasked(false);】隐藏ajax请求 请稍等......
        【mobileNavi.getNavigationBar().hide();】隐藏导航[隐藏头部]
        
        
        
        // 开启请稍等提示......
        mobileView.setMasked(
        	{
        		xtype: "loadmask",
        		message: "请稍候..."
        	}
        );
        
        
        微信首页刷新：
                window.location.href = window.location.href + "?id=" + (10000 * Math.random());




	系统管理 -- 流程引擎管理 -- 流程任务总览
	贷款产品配置 -- 基础材料配置 -- 基础贷款材料管理
	【查看流程版本】
		系统管理 -- 流程引擎管理 -- 流程配置管理


	→:id to load is required for loading错误?
	数据库查找ID:
	SELECT * FROM sl_smallloan_project WHERE  projectNumber='jzww_170511_002';
	问题出在
	SlSmallloanProjectServiceImpl.java

	待办任务老自动清空?
		【系统管理 -- 流程引擎管理 -- 流程配置管理】选中当前激活业务 -- 【管理】 -- 选中所有流程任务 在 -- 【用户 -- 右下角选中 【发起人】 就好

	主干
	【htmobile/MenuConfig.js】
	资料上传
	【htmobile.myTask.uploadData】
	贷款材料清单
	【SlEnterPriseProcreditMaterialsView1】
	材料列表
	【FileList1】
	上传图片
	【uploadMaterialForLend】
	【myTaskAction.java】 判断流程版本号
	【ExtUD.Ext.js】判断浏览器类型
	【CreditLoanHistoryFormPanel.js】查看时间
	查看数据库ID是否有保存上
	【SELECT contractStartDate FROM sl_smallloan_project WHERE projectId=1815】
		※:在往数据库传数据,必须需要ID
	这里contractStartDate是ID
	sl_sm来查找数据库关键表文件

	【SlSmallloanProjectAction.java】快速保存信息的 后台源文件
	查找后台文件,只要在前面加SlS和后面加A,就能Ctrl + R 搜到对应文件

	信息保存出错，请联系管理员！
	移动端保存的话必须加上ID才行,否则数据库会报错
	
	查看主干的资料上传?
	erp7.0 -- WebRoot -- WEB-INF -- FlowForm -- 总公司 -- HuicongBusiness -- 新世纪小额贷款业务审批流程 -- mobile -- 0 -- 上传资料及担保措施 -- uploadFileList.js

	【MenuConfig.js -- uploadData.jsa】 -- 【SlEnterPriseProcreditMaterialsView1.js】 -- 【FileList1.js】--【MuploadMaterialForLend】 ←上传图片

	【loansCountForm.js】贷款计算

	【CarFundIntentView.js】投资-意图-视图 PC打debugger地方

	【FundInfo.js】	

微信上传,必须要有域名
	http://res.wx.qq.com/open/js/jweixin-1.0.0.js
	chooseImage 参数
	【applyUpload.js】



→【button按钮ui默认样式】[按钮颜色]:
灰色
	【normal】标准 	背景灰色	字体黑色
	【round】圆角 	背景灰色	字体黑色
	【small】小型	背景灰色	字体黑色
	【back】后退	背景灰色	字体黑色	
	【forward】前进 背景灰色	字体黑色
红色
	【decline】标准 	背景红色	字体白色	
	【decline-round】圆角 	背景红色	字体白色
	【decline-small】小型 	背景红色	字体白色
	【decline-back】后退 	背景红色	字体白色
	【decline-forward】前进 背景灰色	字体白色
深蓝色
	【action】标准 		背景深蓝色	字体白色	
	【action-round】圆角 	背景深蓝色	字体白色
	【action-small】小型 	背景深蓝色	字体白色
	【action-back】后退 	背景深蓝色	字体白色
	【action-forward】前进 	背景深蓝色	字体白色
绿色
	【confirm】标准 		背景绿色	字体白色	
	【confirm-round】圆角 	背景绿色	字体白色
	【confirm-small】小型 	背景绿色	字体白色
	【confirm-back】后退 	背景绿色	字体白色
	【confirm-forward】前进 	背景绿色	字体白色


	ui  : 'decline', 红色
	ui  : 'confirm', 绿色
	ui  : 'confirm',
	  
        ui: 'light', //淡蓝



京东红 切换边颜色
#c40000
京东红 标题栏
#f14344
橘色
#FF9500
==============================================================================
        自定义头部[titile][头部组件][sencha touch自定义头部][sencha touch头部][sencha touch标题栏]


/**
 * 公共顶部titile
 * by zt
 */
Ext.define('hrmobile.public.myhome.related.publicTop',{
	extend : 'Ext.Container',
	name : 'publicTop',
	id : 'publicTop',
	constructor : function(config) {
		var title = config.title;
		var leftText = config.leftText;
		var rightText = config.rightText;
		
		Ext.apply(config,{
			docked : 'top',
			items : [{
					xtype: 'panel',
                    html:'<header style="width:100%; height:42px; background:#1EC3B2;">'+
		            		'<div class="index-header">'+
								'<ul style="position:relative; color:white;">'+
							    	'<li id="sign-btn" onclick="javascript:toclose()" style="line-height:42px; position:absolute;top:0px;left:10px; font-size: 14px;">' +
					                	leftText + 
					                '</li>'+
					                '<li style="margin:0 auto;height:42px; text-align:center; line-height:42px; font-size: 17px;">' +
					                	title + 
					                '</li>'+
					                '<li id ="login-btn" onclick="javascript:toLogin()" style="position:absolute; line-height:42px;top:0px;right:10px; font-size: 14px;">' +
					                	rightText + 
					                '</li>'+
					            '</ul>'+
					        '</div>'+
				        '</header>'
			}],
			listeners: {
				show : function (){
//					Ext.getCmp("publicTop").setHidden(false);
					if (window.localStorage.userName != null) {
						$('#sign-btn').hide();
						$('#login-btn').hide();
					} else {
						$('#sign-btn').show();
						$('#login-btn').show();
					}
				}
				
			}
		}
		);
		this.callParent([ config ]);
		

		
		// 跳转注册页 
		toclose = function(){
			// 隐藏自定义TabBar
	    	Ext.getCmp("publicTop").setHidden(true);
    	
			if(mobileNavi.getActiveItem().$className !="hrmobile.public.myhome.register"){
				mobileNavi.push(Ext.create('hrmobile.public.myhome.register',{}));
	     	}

 	    }
 	    
 	    // 跳转登录页
 	    toLogin = function(){
			// 隐藏自定义TabBar
	    	Ext.getCmp("publicTop").setHidden(true);
	    	
	    	if(mobileNavi.getActiveItem().$className !="hrmobile.public.myhome.login"){
				mobileNavi.push(Ext.create('hrmobile.public.myhome.login',{}));
	     	}
	 	      

 	    }
 	    
	}
});
==============================================================================
	// ST退出登录
	Ext.Msg.confirm("", '是否退出登录', function(btn) {
				// 如果点击了是
				if (btn == "yes") {
					
					// 设置黑色透明背景
					mobileNavi.setMasked(true);
					// 请求退出Ajax
					Ext.Ajax.request({
								url : __ctxPath + '/exitlogin.do'
					});
					// 设置全局变量为null
					curUserInfo = null;
					
					// 销毁页面
					mobileNavi.destroy();
					
					// 重新初始化页面,并覆盖
		    		mobileNavi = Ext.create('mobile.View', {
		    				fullscreen: true
		    			}
		    		);
		    		
		    		// 隐藏导航
		    		mobileNavi.getNavigationBar().hide();
		    		
		    		// 添加页面
		    		mobileView.add(mobileNavi);
				}
	});
        
==============================================================================
        [Ext]
        allowBlank
        这个一般是文本输入框的一个属性，allowBlank的意思是是否允许为空，这个属性帮你验证必输项的。会在表单提交时，自动帮你验证，该文本框是否输入了内容，如果没有输入则会标红提示。这个是Ext底层帮你封装好的方法，省去了你自己写js代码验证的麻烦。
设置为flase，则代表 不允许为空，也就是说该文本框输入时不能为空。反过来true则代表允许为空，那么Ext底层就去验证是否必输了。
==============================================================================
巴州车贷:
	123.56.107.148	远程桌面	administrator	Jzww2008
测试地址:
	http://192.168.0.106:8283/hurong_proj_xj_bzzy/login.jsp
正式地址
        http://123.56.107.148/indexerpmobile.html
        http://123.56.107.148/index.jsp

账号:admin
密码:780327
自己本机测试地址:
	http://172.16.10.46:8046/erp_xj_bzzy/indexerpmobile.html


      123.56.107.148	远程桌面	administrator	Jzww2008
      

        https://developer.apple.com/
        苹果ID:
	330814206@qq.com
        密码:
	Zhj588588
        
        姓名:
        Huajun Zong
        手机号:
        +86 15544604450


        材料份数
    	Ext.Ajax.request({
			async : false,
			url : __ctxPath + '/materials/updateDataNumSlProcreditMaterials.do',
			params : {
				'slProcreditMaterials.datumNums' : size + 1,
				'slProcreditMaterials.proMaterialsId' : proMaterialsId
			},
			success : function(response) {}
		});

        微信服务号:     
        账号:             
                2654916084@qq.com
        密码:
                zhj588588
==============================================================================
星宇内网地址：http://192.168.0.106:8233/hurong_proj_bj_xyph/index.jsp
admin    yuseen
外网:http://121.196.204.12/indexp2pmobile.html

        【SHA256加密】
        加密:
                a4ayc/80/OGda4BO/1o/V0etpOqiLx1JwB5S3beHW0s=
        密码:
                1
星宇远程：
        erp服务器(远程桌面)
                121.196.204.12
        账号:
                administrator
        密码:
                Hurong@2017

星宇微信公众平台：
        账号:xyph@xingyupuhui.com
        密码：xingyupuhui123
===============================================================
华利蜂巢
        默认背景颜色:
        rgb(208, 167, 101)
        #D0A765
===============================================================
Sencha Docs - Ext JS
	【overCls】: String
	当鼠标移到该元素, 一个可选的额外的CSS类将被添加到该组件的元素, 并在鼠标移出后删除. 这可能对添加自定义的 'active' 或者 'hover' 样式的组件有用 或任何其子组件使用标准的CSS规则.
	【padding】 : Number/String
为组件设置padding. padding 可以是一个数值适用于所有边 或者它可以是每个样式的CSS样式规范, 例如: '10 5 3 10'.

	【renderTo】 : String/HTMLElement/Ext.Element
	指定元素的id, 一个DOM元素或现有的元素，这个组件将被渲染成.
	注意:
		不使用此配置项，如果该组件是一个Container的子元素. 它的职责是 Container的 layout manager 渲染和管理其子项.
		当使用此配置, 调用 render() 不是必须的.
		也可参见 render .
	【style】 : String/Object
		自定义风格规范适用于该组件的元素. 应该是Ext.Element.applyStyles的一个有效参数.
	【styleHtmlCls】 : String
		当你设置 styleHtmlContent 为 true 的时候, 配置的样式类添加到目标的内容区域.
		Defaults to: "x-html"
	【styleHtmlContent】 : Boolean
		如果设置为 true，就自动地将这个html嵌入在这个组件 (body for panels) 的内容目标里.
		Defaults to: false	
	【titleAlign】 : String
		或许是 "left"， "right" 或 "center"。
		图标和工具之间的可用空间内的标题文本的对齐方式。
		Defaults to: "left"
	【ui】 : String/String[]
		设置组件样式. 可以是一个字符串或者字符串数组 (UIs)
		Defaults to: "default"
	【width】 : Number
		此组件的宽度，以像素为单位。
	【xtype】 : String
	此属性提供了一个较短的替代全类型创建对象. 使用 xtype 是最常见的方式来定义组件实例, 特别是在一个容器中. 例如, 在一个表单包含文本域的元素可以显式创建像这样:
	【isTabBar】 : Boolean
		true 在这个类里用来鉴定一个对象作为一个实例的选项卡栏，或者其中的子类。
		Defaults to: true
	【iitems】 : Ext.util.AbstractMixedCollection
		子组件的所有集合.
	【addCls( String/String[] cls )】 : Ext.Component
		从代表此组件的顶层元素添加 CSS 类.
		Parameters
	【cls】 : String/String[]
		添加的 CSS 类名
		Returns
		Ext.Component
		返回此组件让方法可以链接
	【removeCls( String/String[] cls )】 : Ext.Component
		从代表此组件的顶层元素移除 CSS 类.

		Parameters
		cls : String/String[]
		移除的 CSS 类名
		Returns
		Ext.Component
		返回此组件让方法可以链接.
	【resize( Ext.Component this, Number width, Number height, Number oldWidth, Number oldHeight, Object eOpts )】
		在组件被调整大小之后触发. 注意在首次布局初始化大小时 不 触发. 在生命周期里, 使用 boxready 事件.
		Parameters
		this : Ext.Component
		width : Number
		这是宽度调整后的值
		height : Number
		这是高度调整后的值
		oldWidth : Number
		这是原来的宽度
		oldHeight : Number
		这是原来的高度
		eOpts : Object
		The options object passed to Ext.util.Observable.addListener.	
	【show( Ext.Component this, Object eOpts )】
		当调用 show 方法组件显示后触发.

		Parameters
		this : Ext.Component
		eOpts : Object
		The options object passed to Ext.util.Observable.addListener.
	【disabled】 : Boolean
		True 将禁用该组件。
		Defaults to: false
	【disabledCls】 : String
		当组件被禁用添加的CSS 类. ...
	【border】: Number/String
		指定该组件的边框. 边框可以是一个数值适用于所有边 或者它可以是每个样式的CSS样式规范, 例如: '10 5 3 10'.
===============================================================	
        Sublime Text编辑器如何在选中的多行行首增加字符串
        操作步骤如下：
                1.选中要操作的行（我这里Ctrl+A）
                2.Ctrl+Shift+L （待操作状态）
                3.方向键←   （操作这步骤后，可以添加想要添加的字符）
===============================================================
        submile删除当前行快捷键[sublime快捷键]
               【Ctrl + Shift + K】
         选择相同文本
                【Alt + F3】      
         选择当前行
               【Ctrl + L】继续选择上一行或下一行使用【Shift + ↑】或【Shift + ↓】
         选择括号内代码块
               【Ctrl + Shift + M】
         光标移动至括号内结束或开始的位置
                【Ctrl + M】
         向左单位性地选中文本
                【Ctrl + Shift + ←】
         向右单位性地选中文本
                 【Ctrl + Shift + →】
         向上添加多行光标，可同时编辑多行
                【Ctrl + Alt + ↑】
        向下添加多行光标，可同时编辑多行
                【Ctrl + Alt + ↓】
        合并选中的多行代码为一行。举个栗子：将多行格式的CSS属性合并为一行
                【Ctrl + J】 
        复制光标所在整行，插入到下一行
                【Ctrl + Shift + D】
        从光标处开始删除代码至行尾
                【Ctrl + K + K】
        删除整行
                【Ctrl + Shift + K】
        复制选中内容到上一行,没有换行
                【Ctrl + Shift + D】
        打开搜索框。
               【Ctrl + P】             
        举个例子：
        1、输入当前项目中的文件名，快速搜索文件，
        2、输入@和关键字，查找文件中函数名，
        3、输入：和数字，跳转到文件中该行代码
        4、输入#和关键字，查找变量名。
        
        打开搜索框，自动带：，输入数字跳转到该行代码[跳转指定行]
                【Ctrl + G】 
        举个例子：
                在页面代码比较长的文件中快速定位。
        开搜索框，自动带@，输入关键字，查找文件中的函数名。
                【Ctrl + R】
        举个例子：
                在函数较多的页面快速查找某个函数。
 
        打开搜索框，自动带#，输入关键字，查找文件中的变量名、属性名等。
                【Ctrl + ：】 
       粘贴过程中保持缩进 
                【Ctrl + Shift + V】
       关闭搜索框:
                【Esc】
       搜索 上一个:
                【Shift + F3】
       搜索 下一个:
                【Ctrl + F3】
       选中相同的词:
                【Alt + F3】
       搜索文件中关键字:       
               【Ctrl + Shift + F】
       选择多行(给选中行之前或之后添加内容)      
               【Ctrl + Shift + L】和【←】【→】添加内容
               
      返回头部
                【Ctrl + Home】
      返回底部
               【Ctrl + End】
               
     自动添加双引号
     选中单词   【Ctrl + "】
     
     选中html标签内容
                 【Ctrl + Shift + A】
     选中括号内容
                【Ctrl + Shift + M】
     用html p标签包括内容
                【Alt + Shift + W】
     移除与你的光标相关的父标签。对清除标记很有帮助。
                【Alt + Shift + ;】
        放大字体
                【Ctrl + Shift + [+]】
        缩小字体
                【Ctrl + Shift + [-]】
                
===============================================================    
               sublime括号高亮插件?
            1、打开【package Control】(Ctrl + Shift + P)，选择【install Package】
            2.输入【BracketHighlighter】，回车
            3.这样该插件会自动安装，安装后所有的提示高亮都是白色或没有提示。按【首选项】–>【插件设置】–>【Bracket highlighter】–>【Bracket settings-Default】会打开一个文件

            4.将"bracket_styles"中的style改为【hightlight】
            5.将"bracket_styles"以下的样式类型去掉注释
            
             "default": {
                    "icon": "dot",
                    // BH1's original default color for reference

                    // 黄色颜色,和style样式对应
                    "color": "entity.name.class",

                    // 默认白色背景
                    // "color": "brackethighlighter.default",

                    // 行高背景
                    "style": "hightlight"

                    // 黄色背景
                    // "style": "underline"

                    // 边框
                    // "style": "outline"
             },
            
            
            
            【\Data\Packages\User\SublimeLinter\Cobalt (SL).tmTheme】
            建议备份一下文件,更改下文件名,再进行修改
            【foreground】
            #A6E22E 绿色
            #99C9EE 浅蓝
            #F5F5D5 保护色
            
            
            
            
===============================================================      
        submile关闭自动补齐设置
        // 更改</自动
        "auto_close_tags": false,

        // submile关闭单行注释换行自动补齐//
        "jsdocs_extend_double_slash": false
        
        submile设置字体类别
        "font_face": "Source Code Pro",
        
        
        submile关闭打开文件记录
             // 未保存文件单独保存
            "hot_exit": false,
            // 打开上次打开的文件，需配合 hot_exit 使用
            "remember_open_files":false
===============================================================         
        sublime代码快捷键?[sublime快捷键]
      1【工具 -- 新代码块】
      2.保存在【\Data\Packages\User\文件名.sublime-snippet】
      3.填写代码块,但一个代码块只能写在一个文件内.       
       【scope】为空就是对所有后缀文件都生效;
        html代码块
        <snippet>
             <content>
             <![CDATA[console.log();]]>
             </content>
             <tabTrigger>clog</tabTrigger>
             <description></description>
             <scope>text.html</scope>
        </snippet>
        
        html代码块二:
        <snippet>
             <content>
             <![CDATA[<footer>
          <p>
              Copyright © 2008-2012 ${1:bluesdream}.com
          </p>
          <p>
              增值电信业务经营许可证 沪B2-${2}
              <a href="#">沪ICP备号${3}</a>
          </p>
        </footer>
             ]]>
             </content>
             <tabTrigger>cft</tabTrigger>
             <description>custom-footer</description>
             <scope>text.html</scope>
        </snippet>
        
        CSS代码块:
        <snippet>
             <content>
             <![CDATA[border : 1px solid red;]]>
             </content>
             <tabTrigger>bsr</tabTrigger>
             <description></description>
             <scope></scope>
        </snippet>      
        
        je代码块:
          <snippet>
               <content>
               <![CDATA[console.log(${1});]]>
               </content>
               <tabTrigger>clog</tabTrigger>
               <description></description>
               <scope>source.js</scope>
          </snippet>

          <snippet>
       <content>
       
       js代码块2:
  <snippet>
       <content>
       <![CDATA[function (){
    ${1}
}${2}]]>
       </content>
       <tabTrigger>fn</tabTrigger>
       <description></description>
       <scope></scope>
  </snippet>
===============================================================      
        sublime提示路径插件
        https://github.com/BoundInCode/AutoFileName/tree/st3
===============================================================          
        HBuilder复制当前行
                 【Ctrl + Shift + R】
        文件追踪
         【Alt + 鼠标左键】
         
        怎么才能快速记住快捷键？
        A:记快捷键，不如记快捷键语法。
        Alt是转到，Shift是转移，Ctrl是操作。
        比如Alt + 括号、引号，即使转到对于的符号。
        Shift + 回车是<br/>，shift + 空格是&nbsp;。
        Ctrl + D是删除行，F2是重构命名。
===============================================================
        HBuilder快捷键
        【Ctrl + T】 查找文件
===============================================================
        notepad++设置
        标签栏显示x关闭按钮
         【设置 - 参数 - Global -  为每一标签使用单独的关闭按钮】
         不每次打开,记录上次打开文件
          【设置 - 参数 - MISC -  下次启动记住当前会话】 
===============================================================
        Chrome浏览器快捷键[chrome快捷键]
        长按Alt
        Alt + Enter回车
        Shift + S打开设置
        【Alt + ←】返回上一页
        【Alt + →】返回下一页
        
        【Alt + D】 或 【Ctrl + L】 选中地址栏
        【Ctrl + Shift + T】 打开最近关闭标签栏,只能打开最近关闭最多10个
        【Ctrl + T】打开新标签页
        【Ctrl + E】选中地址栏搜索
        【Shift +鼠标左键】 点击超链接,页面不会直接跳转到新页面
        【Ctrl + U】打开源代码
        输入域名不加www和com【Ctrl + Enter回车】自动添加前后缀并跳转页面
        
        【Ctrl + Shift + D】切换控制台下方和右侧
        
         【Ctrl + L】清除控制器cosnole.log
         【Ctrl
         
         
         
         】打开打断点右键
         
         【F5】和【Ctrl + R】 重载当前页面；
         【Shift + F5】和【Ctrl + Shift + F5】和【Ctrl + Shift + R】 忽略缓存内容，重载当前页面。
         
         【Ctrl + 9】 切换到最后一个标签页。 
         
        将链接拖到标签页中。 在标签页中打开链接。 
        将链接拖到标签栏的空白区域。 在新标签页中打开链接。 
        将标签页拖出标签栏。 在新窗口中打开标签页。 
        将标签页从标签栏拖到现有窗口中。 在现有窗口中打开标签页。 
        拖动标签页的同时按 Esc 键。 将标签页恢复到原先的位置。 一组拖拽功能，拖拽党最爱。

        【Ctrl + Tab】 或 【Ctrl + PgDown】 切换到下一个标签页。 
        【Ctrl + Shift + Tab】 或 【Ctrl + PgUp】 切换到上一个标签页。 
        一般用Tab键配合，键盘党福音。
        【Alt + F4】 或 【Ctrl+  Shift + W】 关闭当前窗口。 
终于来了，大家喜欢用来调戏别人的【Alt + F4】，后面的不怎么用，其实这里面还有一个Bug键组合用来迅速关闭Chrome，【Ctrl + Shift + Q】，在ChromeOS上功能是退出当前账户。
        【Ctrl + Shift + Q】关闭Chrome所有打开窗口
        
        【Ctrl + W】 或 【Ctrl + F4】 关闭当前标签页或弹出式窗口
        
       按【Backspace】 键，或同时按【Alt 和向左箭头键】。 转到当前标签页浏览历史记录中的上一页。 
       按【Shift + Backspace】，或同时按 【Alt 和向右箭头键】。 转到当前标签页浏览历史记录中的下一页。 
       
        【Ctrl + G】 或 【F3】 查找下一条与您在查找栏中输入的字词相匹配的内容。 
        【Ctrl + Shift + G】、【Shift + F3】 或 【Shift + Enter】查找上一条与您在查找栏中输入的字词相匹配的内容。 
        
       【Ctrl + D】 将当前网页保存为书签。 
       【Ctrl + Shift + D】 将所有打开的网页以书签的形式保存在新文件夹中。 
        书签狂用。
        【Ctrl + Shift + O】打开书签管理器
        
        长按【Ctrl】选中标签可以一块移动
        长按【Shift】选中终点标签可以连着一块选中,并移动
===============================================================
        电脑快捷键[window快捷键][window系统快捷键]
        【Ctrl + Shift + Esc】 直接打开任务管理器,不用向【Ctrl + Alt + Delete】+【Alt + T】打开
        【Window键】或【Ctrl +  Esc】打开开始菜单
        【Ctrl + Tab】下一个标签页
        【Ctrl + Shift + Tab】上一个标签页
        【Ctrl +  W】关闭当前标签页
        【Ctrl + Shift + W】关闭全部标签页
        【Shift + F3】查找上一页
        【Ctrl+ F3】查找下一个
        【Shift + 左键】选择对应文本
        【Ctrl + Alt + Tab】固定切换窗口Tab栏
        【Ctrl + Window + Tab】固定切换窗口Tab栏
        【Window + L】快速注销
        【Fn + F5】或【Fn + F8】唤醒黑屏沉眠
        【Ctrl + Shift + 左键】用管理员权限打开程序(ctrl+shift+clicktoopenaprogramasadministrator)
        【Shift + 鼠标右键】 增强版右键发送到
        【Win + B】移动光标到系统托盘
        【Win + 1】number... 在任务栏中快速切换程序
        任务栏从左到右1，2，3，快速切换用的。对当前窗口的作用是最小化，另外一个最小化快捷键是win+m。
        
        选中文件【Shift + F10】右键
        
        F1-F12键失效[功能键失效]
        【Fn + Esc】恢复F1-F12点一下启动功能
        
        
        【Shift + 符号键】将小写字符转换大写
===============================================================
        cmd快捷键
        【Ctrl + Insert】复制
        【Shift + Insert】粘贴
===============================================================
        搜狗输入法快捷键
        
        输入【v + 数字】会显示中文数字,1-9有特殊符号 +/-f翻页
        输入【v + 2012/12/1】或【v + 2012-12-1】会有不同日期选项
        输入【v + 公式运算】会计算结果
        输入中文再输入【;】能选择特殊符号等工具箱
        
        输入v1,再按+++三次,再按f输出【
        输入v1,再按+++三次,再按f输出】
        
        输入f按5【′】
        
        
        打开搜狗输入法属性
        【Ctrl + Shift + M】 +【P】
        
        关闭搜狗输入法悬浮窗口
        右键【设置属性(P) -- 常用】 右侧勾选【隐藏状态栏】确定
        
        搜狗输入法明明输入中文却显示英文怎么办
        【Ctrl + Shift + E】
===============================================================
        qq快捷键
        【Ctrl + Alt + A】 截图
===============================================================
        去掉WPS广告[关闭wps热点][关闭wps订阅广告]
         1.删除安装目录【wtoolex/wpsnotify.exe】文件,或者重命名
         2.开始菜单打开
                【%AppData%\Microsoft\Windows\Start Menu\Programs\WPS Office\WPS Office 工具\配置工具.lnk】
         ① 【高级(A) --  其它选项】
         ②去掉软件推荐下的【升级完成后推荐精选软件(T)】的选项
           去掉WPS热点及广告推送(M)下的【订阅WPS热点(M)】和【接受广告推送】的选项
         ③确定
===============================================================
         chrome导出插件CRX?[chrome插件]
         %localAppData%\Google\Chrome\User Data\Default\Extensions
         %localAppData%\Google\Chrome\User Data\Profile 1\Extensions
         
         
         打包The 'manifest_version' key must be present and set to 2 (without quotes). See developer.chrome.com/extensions/manifestVersion.html for details错误?
         在插件目录下manifest.json里name下添加
         【"manifest_version": 2, 】保存
         再进行打包就好
         
===============================================================
        Chrome谷歌浏览器已停用不支持的扩展程序[已停业扩展]

          快捷方式【右键 -- 属性 -- 目标(T)】最后添加
         【空格--enable-easy-off-store-extension-install】
         
         
         Cannot load extension with file or directory name _metadata. Filenames starting with "_" are reserved for use by the system.
         解决方法:
         取消【_metadata】文件夹前面的_就好了
===============================================================
        【判断对象属性】[判断对象][判断obj][判断Object][判断对象的属性][判断属性]
       【实例对象名.propertyIsEnumerable("属性名")】用来判断一个对象是否有自身属性或对象。此方法无法检查该对象的原型链，该属性必须是对象本身的一个成员，返回一个bool值
                Enumerable可数的
        【实例对象名.hasOwnProperty(("属性名")】 返回true/false
        【实例对象名 instanceof 原型对象名】判断是否为原型对象的实例对象,返回true/false
        【原型对象.prototype.isPrototypeOf(实例对象名)】 测试一个对象是否存在于另一个对象的原型链上。
            
  /*    
    propertyIsEnumerable()是用来检测属性是否属于某个对象的,如果检测到了,返回true,否则返回false.
    1.这个属性必须属于实例的,并且不属于原型.
    2.这个属性必须是可枚举的,也就是自定义的属性,可以通过for..in循环出来的.
    只要符合上面两个要求,就会返回true;
  */
    function MyObject() {
       this.name = "我是实例的属性";
    }
    var obj = new MyObject();
        console.info(obj.propertyIsEnumerable("name"));//true
        MyObject.prototype.say = "我是原型的属性";
           console.info(obj.propertyIsEnumerable("say")); //false
           for (var i in obj) {
             console.info(i);//name,age
           }

        PropertyIsEnumerable
        判断给定的属性是否可以用 for...in 语句进行枚举。
        hasOwnProperty(property)
        判断对象是否有某个特定的属性。必须用字符串指定该属性
        
        
        
        【uber】让个属性直接指向父对象的prototype属性。
                Child.uber = Parent.prototype;
                
                
===============================================================
                获取对象原型属性[设置对象原型属性]
              【Object.getPrototypeOf(对象名)】
              【Object.setPrototypeOf(对象名, {属性名:属性值})】
===============================================================
        js判断是否为数组?[判断数组][判断Array][js判断数组][判断arr]
        var arr = [];
        Object.prototype.toString.call(arr)=="[object Array]";
        
         //第一种,判断属性是否为Array(只用来判断值)
        c[i] = (p[i].constructor === Array) ? [] : {};

        //第二种(同上)
        // c[i] = (p[i].constructor.name == 'Array') ? [] : {};

        //第三种:使用isArray布尔值判断是否数组(判断是否为原型对象的实例对象)
        //c[i] = Array.isArray(p[i]) ? [] : {};

        //第四种 使用判断是否有属性判断
        //c[i] = (p[i] instanceof Array) ? [] : {};

        //第五种 和第四种类型
        //c[i] = (p[i].constructor.toString().indexOf("Array") > -1) ? [] : {};

        //第六种
        //c[i] = Object.prototype.toString.call(p[i]) == "[object Array]" ? [] : {};
        
        function isArray(object){
            return object && typeof object==='object' &&
                    Array == object.constructor;
        }
        使用instaceof和construcor,被判断的array必须是在当前页面声明的！比如，一个页面（父页面）有一个框架，框架中引用了一个页面（子页面），在子页面中声明了一个array，并将其赋值给父页面的一个变量，这时判断该变量，Array == object.constructor;会返回false；
        原因：
        1、array属于引用型数据，在传递过程中，仅仅是引用地址的传递。
        2、每个页面的Array原生对象所引用的地址是不一样的，在子页面声明的array，所对应的构造函数，是子页面的Array对象；父页面来进行判断，使用的Array并不等于子页面的Array；切记，不然很难跟踪问题！
        
        
        方法三之 特性判断法

        function isArray(object){
            return  object && typeof object==='object' &&    
                    typeof object.length==='number' &&  
                    typeof object.splice==='function' &&    
                     //判断length属性是否是可枚举的 对于数组 将得到false  
                    !(object.propertyIsEnumerable('length'));
        }
        
        //方法四之 最简单的方法
         /*
            这种方式既解决了instanceof存在的跨页面问题，也解决了属性检测方式所存在的问题，实在是一种妙招，一个很好的解决方案。
            除此之外，这种解决办法也可以应用于判断Date,Function等类型的对象。
          */

        function isArray3(o) {
            return Object.prototype.toString.call(o) === '[object Array]';
        }
        标准浏览器中完美的做到，但是（为什么要说但是呢）IE6中，却会出现以下问题：
        过Object.prototype.toString.call获取的 字符串,undefined,null均为Object
        
       //判断数据类型,兼容IE6
        function typeOf(value) {
            if (null === value) {
                return 'null';
            }

            var type = typeof value;
            if ('undefined' === type || 'string' === type) {
                return type;
            }

            var typeString = toString.call(value);
            switch (typeString) {
            case '[object Array]':
                return 'array';
            case '[object Date]':
                return 'date';
            case '[object Boolean]':
                return 'boolean';
            case '[object Number]':
                return 'number';
            case '[object Function]':
                return 'function';
            case '[object RegExp]':
                return 'regexp';
            case '[object Object]':
                if (undefined !== value.nodeType) {
                    if (3 == value.nodeType) {
                        return (/\S/).test(value.nodeValue) ? 'textnode': 'whitespace';
                    } else {
                        return 'element';
                    }
                } else {
                    return 'object';
                }
            default:
                return 'unknow';
            }
        }
===============================================================
        转换Array数组!   
        var toArray = function(s){
            try{
                return Array.prototype.slice.call(s);
            } catch(e){
                    var arr = [];
                    for(var i = 0,len = s.length; i < len; i++){
                        //arr.push(s[i]);
                           arr[i] = s[i];  // 据说这样比push快
                    }
                     return arr;
            }
        }
        
        我们知道，Array.prototype.slice.call(arguments)能将具有length属性的对象转成数组，除了IE下的节点集合（因为ie下的dom对象是以com对象的形式实现的，js对象与com对象不能进行转换）
        
        var a = {length:2,0:'first',1:'second'};
        Array.prototype.slice.call(a);//  ["first", "second"] 
        var a = {length:2};
        Array.prototype.slice.call(a);//  [undefined, undefined]
        
        →:slice内部实现
        Array.prototype.slice = function(start, end){
             var result = new Array();
             start = start || 0;
             end = end || this.length; // this指向调用的对象，当用了call后，能够改变this的指向，也就是指向传进来的对象，这是关键
             for (var i = start; i < end; i++){
                  result.push(this[i]);
             }
             return result;
        }
===============================================================
        字符串转数组
        【Array.from()】 将字符串分割单个单个字段数组
        【'字符串'.split('')】
===============================================================
        window instanceof Object 
        IE8 下是 false ，IE9++是 true
        
        typeof用来判断数据类型；
        instanceof用来判断是谁的实例对象。
        window是 Window的实例对象。即 window instanceof Window—>true
===============================================================
        BOM
        window.location.reload(true);刷新页面
        history.go(0) 
        location=location
        location.assign(location) 
        location.replace(location) 
        
        window.location.href = location.href;
        
        
        location.replace(document.referrer);
	document.referrer; 获取当前URL
        
        <meta http-equiz="refresh" content="10;url="> 每隔10秒刷新
        
===============================================================
        【计算两个字符串日期相差多少天】
	  // 比如2018-7-6 和2018-7-4
	  function $getTime2Time($time1, $time2) {
		    var time1 = Array.prototype.slice.call(String(arguments[0]), 0, 10).join(''),
		    	time2 = Array.prototype.slice.call(String(arguments[1]), 0, 10).join('');
		    time1 = Date.parse(time1)/1000;
		    time2 = Date.parse(time2)/1000;
		    var time_ = time1 - time2;
		    return (time_/(3600*24));
		}
===============================================================
        【js转换date为string】[js转日期为字符串][js转Date为字符串]
                
    Date.prototype.format = function(fmt) { 
        var o = { 
                "M+" : this.getMonth()+1,                 //月份 
                "d+" : this.getDate(),                    //日 
                "h+" : this.getHours(),                   //小时 
                "m+" : this.getMinutes(),                 //分 
                "s+" : this.getSeconds(),                 //秒 
                "q+" : Math.floor((this.getMonth()+3)/3), //季度 
                "S"  : this.getMilliseconds()             //毫秒 
            }; 
            if(/(y+)/.test(fmt)) {
                    fmt=fmt.replace(RegExp.$1, (this.getFullYear()+"").substr(4 - RegExp.$1.length)); 
            }
             for(var k in o) {
                if(new RegExp("("+ k +")").test(fmt)){
                     fmt = fmt.replace(RegExp.$1, (RegExp.$1.length==1) ? (o[k]) : (("00"+ o[k]).substr((""+ o[k]).length)));
                 }
             }
            return fmt; 
        }
===============================================================
       垃圾回收有两种方法：
        1.标记清除
        2.引用计数
===============================================================
        a标签点击去掉高亮背景
        a标签默认点击的时候会有个高亮的背景色，要把这个去掉只需要给a标签设置css样式：
        -webkit-tap-highlight-color:rgba(0,0,0,0);
===============================================================
        jqeury选择器
        $(document) //选择整个文档对象
　　    $('#myId') //选择ID为myId的网页元素
　　    $('div.myClass') // 选择class为myClass的div元素
　　    $('input[name=first]') // 选择name属性等于first的input元素
　　    $('a:first') //选择网页中第一个a元素

        $('tr:odd') //选择表格的奇数行
        $('#myForm :input') // 选择表单中的input元素
        $('div:visible') //选择可见的div元素
        $('div:gt(2)') // 选择所有的div元素，除了前三个
        $('div:animated') // 选择当前处于动画状态的div元素
        
        $('div').has('p'); // 选择包含p元素的div元素
        $('div').not('.myClass'); //选择class不等于myClass的div元素
        $('div').filter('.myClass'); //选择class等于myClass的div元素
        $('div').first(); //选择第1个div元素
        $('div').eq(5); //选择第6个div元素
        
        $('div').next('p'); //选择div元素后面的第一个p元素
        $('div').parent(); //选择div元素的父元素
        $('div').closest('form'); //选择离div最近的那个form父元素
        $('div').children(); //选择div的所有子元素
        $('div').siblings(); //选择div的同级元素
        
        $('div')
        .find('h3')
        .eq(2)
        .html('Hello')
        .end() //退回到选中所有的h3元素的那一步
        .eq(0) //选中第一个h3元素
        .html('World'); //将它的内容改为World
        
        .html() 取出或设置html内容
        .text() 取出或设置text内容
        .attr() 取出或设置某个属性的值
        .width() 取出或设置某个元素的宽度
        .height() 取出或设置某个元素的高度
        .val() 取出某个表单元素的值
        需要注意的是，如果结果集包含多个元素，那么赋值的时候，将对其中所有的元素赋值；取值的时候，则是只取出第一个元素的值（.text()例外，它取出所有元素的text内容）。
        
第一种方法是使用.insertAfter()，把div元素移动p元素后面：
　　$('div').insertAfter($('p'));
第二种方法是使用.after()，把p元素加到div元素前面：
　　$('p').after($('div'));
　　
        .insertAfter()和.after()：在现存元素的外部，从后面插入元素
        .insertBefore()和.before()：在现存元素的外部，从前面插入元素
        .appendTo()和.append()：在现存元素的内部，从后面插入元素
        .prependTo()和.prepend()：在现存元素的内部，从前面插入元素
        
        复制元素使用.clone()。
        删除元素使用.remove()和.detach()。两者的区别在于，前者不保留被删除元素的事件，后者保留，有利于重新插入文档时使用。
        清空元素内容（但是不删除该元素）使用.empty()。
        
        $('<p>Hello</p>');
        $('<li class="new">new list item</li>');
        $('ul').append('<li>list item</li>');
        
        $.trim() 去除字符串两端的空格。
        $.each() 遍历一个数组或对象。
        $.inArray() 返回一个值在数组中的索引位置。如果该值不在数组中，则返回-1。
        $.grep() 返回数组中符合某种标准的元素。
        $.extend() 将多个对象，合并到第一个对象。
        $.makeArray() 将对象转化为数组。
        $.type() 判断对象的类别（函数对象、日期对象、数组对象、正则对象等等）。
        $.isArray() 判断某个参数是否为数组。
        $.isEmptyObject() 判断某个对象是否为空（不含有任何属性）。
        $.isFunction() 判断某个参数是否为函数。
        $.isPlainObject() 判断某个参数是否为用"{}"或"new Object"建立的对象。
        $.support() 判断浏览器是否支持某个特性。
        
        .blur() 表单元素失去焦点。
        .change() 表单元素的值发生变化
        .click() 鼠标单击
        .dblclick() 鼠标双击
        .focus() 表单元素获得焦点
        .focusin() 子元素获得焦点
        .focusout() 子元素失去焦点
        .hover() 同时为mouseenter和mouseleave事件指定处理函数
        .keydown() 按下键盘（长时间按键，只返回一个事件）
        .keypress() 按下键盘（长时间按键，将返回多个事件）
        .keyup() 松开键盘
        .load() 元素加载完毕
        .mousedown() 按下鼠标
        .mouseenter() 鼠标进入（进入子元素不触发）
        .mouseleave() 鼠标离开（离开子元素不触发）
        .mousemove() 鼠标在元素内部移动
        .mouseout() 鼠标离开（离开子元素也触发）
        .mouseover() 鼠标进入（进入子元素也触发）
        .mouseup() 松开鼠标
        .ready() DOM加载完成
        .resize() 浏览器窗口的大小发生改变
        .scroll() 滚动条的位置发生变化
        .select() 用户选中文本框中的内容
        .submit() 用户递交表单
        .toggle() 根据鼠标点击的次数，依次运行多个函数
        .unload() 用户离开页面
        
        以上这些事件在jQuery内部，都是.bind()的便捷方式。使用.bind()可以更灵活地控制事件，比如为多个事件绑定同一个函数：
        
        $('input').bind(
        　　　　'click change', //同时绑定click和change事件
        　　　　function() {
        　　　　　　alert('Hello');
        　　　　}
　　    )
　　    
        有时，你只想让事件运行一次，这时可以使用.one()方法。
        $("p").one("click", function() {
        alert("Hello"); //只运行一次，以后的点击不会运行
        });
        .unbind()用来解除事件绑定。
        $('p').unbind('click');
        
        所有的事件处理函数，都可以接受一个事件对象（event object）作为参数，比如下面例子中的e：
        $("p").click(function(e) {
                alert(e.type); // "click"
        });
        event.pageX 事件发生时，鼠标距离网页左上角的水平距离
        event.pageY 事件发生时，鼠标距离网页左上角的垂直距离
        event.type 事件的类型（比如click）
        event.which 按下了哪一个键
        event.data 在事件对象上绑定数据，然后传入事件处理函数
        event.target 事件针对的网页元素
        event.preventDefault() 阻止事件的默认行为（比如点击链接，会自动打开新页面）
        event.stopPropagation() 停止事件向上层元素冒泡
        
        在事件处理函数中，可以用this关键字，返回事件针对的DOM元素：
        $('a').click(function(e) {
                if ($(this).attr('href').match('evil')) { //如果确认为有害链接
                　　e.preventDefault(); //阻止打开
                　　$(this).addClass('evil'); //加上表示有害的class
                }
        });
        
      有两种方法，可以自动触发一个事件。一种是直接使用事件函数，另一种是使用.trigger()或.triggerHandler()。
        $('a').click();
        $('a').trigger('click');
        
        .fadeIn() 淡入
        .fadeOut() 淡出
        .fadeTo() 调整透明度
        .hide() 隐藏元素
        .show() 显示元素
        .slideDown() 向下展开
        .slideUp() 向上卷起
        .slideToggle() 依次展开或卷起某个元素
        .toggle() 依次展示或隐藏某个元素
        
        除了.show()和.hide()，所有其他特效的默认执行时间都是400ms（毫秒），但是你可以改变这个设置。
        $('h1').fadeIn(300); // 300毫秒内淡入
        $('h1').fadeOut('slow'); // 缓慢地淡出
        
        在特效结束后，可以指定执行某个函数。
        $('p').fadeOut(300, function() { $(this).remove(); });
        
        .stop()和.delay()用来停止或延缓特效的执行。
        $.fx.off如果设置为true，则关闭所有网页特效。
===============================================================
        1、全局判断按键（按回车）
        $(document).keypress(function(e) {
               var eCode = e.keyCode ? e.keyCode : e.which ? e.which : e.charCode;
                if (eCode == 13){
                    alert('您按了回车键')
                    //自己写判断操作
                }
        });
        2、给某个元素（按回车）
        $("input[name=keyword]").keypress(function(e){
                var eCode = e.keyCode ? e.keyCode : e.which ? e.which : e.charCode;
                if (eCode == 13){
                    alert('您按了回车键')
                    //自己写判断函数
                }
        })
        
        以下是组合按键的应用：
        if(e.altKey && e.keyCode==13){
            alert('您同时按了Alt键和Enter键')
                //ctrl键是e.ctrlKey
                //shift键是e.shiftKey
            }
        });
        
        以下是单个按键对应的数字,建议使用keyup,keypress在某些浏览器不生效：
        
        keycode   8 = BackSpace BackSpace
        keycode   9 = Tab Tab
        keycode 12 = Clear
        keycode 13 = Enter
        keycode 16 = Shift_L
        keycode 17 = Control_L
        keycode 18 = Alt_L
        keycode 19 = Pause
        keycode 20 = Caps_Lock
        keycode 27 = Escape Escape
        keycode 32 = space space
        keycode 33 = Prior
        keycode 34 = Next
        keycode 35 = End
        keycode 36 = Home
        keycode 37 = Left
        keycode 38 = Up
        keycode 39 = Right
        keycode 40 = Down
        keycode 41 = Select
        keycode 42 = Print
        keycode 43 = Execute
        keycode 45 = Insert
        keycode 46 = Delete
        keycode 47 = Help
        keycode 48 = 0 equal braceright
        keycode 49 = 1 exclam on esuperior
        keycode 50 = 2 quotedbl twosuperior
        keycode 51 = 3 section threesuperior
        keycode 52 = 4 dollar
        keycode 53 = 5 percent
        keycode 54 = 6 ampersand
        keycode 55 = 7 slash braceleft
        keycode 56 = 8 parenleft bracketleft
        keycode 57 = 9 parenright bracketright
        keycode 65 = a A
        keycode 66 = b B
        keycode 67 = c C
        keycode 68 = d D
        keycode 69 = e E EuroSign
        keycode 70 = f F
        keycode 71 = g G
        keycode 72 = h H
        keycode 73 = i I
        keycode 74 = j J
        keycode 75 = k K
        keycode 76 = l L
        keycode 77 = m M mu
        keycode 78 = n N
        keycode 79 = o O
        keycode 80 = p P
        keycode 81 = q Q at
        keycode 82 = r R
        keycode 83 = s S
        keycode 84 = t T
        keycode 85 = u U
        keycode 86 = v V
        keycode 87 = w W
        keycode 88 = x X
        keycode 89 = y Y
        keycode 90 = z Z
        keycode 96 = KP_0 KP_0
        keycode 97 = KP_1 KP_1
        keycode 98 = KP_2 KP_2
        keycode 99 = KP_3 KP_3
        keycode 100 = KP_4 KP_4
        keycode 101 = KP_5 KP_5
        keycode 102 = KP_6 KP_6
        keycode 103 = KP_7 KP_7
        keycode 104 = KP_8 KP_8
        keycode 105 = KP_9 KP_9
        keycode 106 = KP_Multiply KP_Multiply
        keycode 107 = KP_Add KP_Add
        keycode 108 = KP_Separator KP_Separator
        keycode 109 = KP_Subtract KP_Subtract
        keycode 110 = KP_Decimal KP_Decimal
        keycode 111 = KP_Divide KP_Divide
        keycode 112 = F1
        keycode 113 = F2
        keycode 114 = F3
        keycode 115 = F4
        keycode 116 = F5
        keycode 117 = F6
        keycode 118 = F7
        keycode 119 = F8
        keycode 120 = F9
        keycode 121 = F10
        keycode 122 = F11
        keycode 123 = F12
        keycode 124 = F13
        keycode 125 = F14
        keycode 126 = F15
        keycode 127 = F16
        keycode 128 = F17
        keycode 129 = F18
        keycode 130 = F19
        keycode 131 = F20
        keycode 132 = F21
        keycode 133 = F22
        keycode 134 = F23
        keycode 135 = F24
        keycode 136 = Num_Lock
        keycode 137 = Scroll_Lock
        keycode 187 = acute grave
        keycode 188 = comma semicolon
        keycode 189 = minus underscore
        keycode 190 = period colon
        keycode 192 = numbersign apostrophe
        keycode 210 = plusminus hyphen macron
        keycode 212 = copyright registered
        keycode 213 = guillemotleft guillemotright
        keycode 214 = masculine ordfeminine
        keycode 215 = ae AE
        keycode 216 = cent yen
        keycode 217 = questiondown exclamdown
        keycode 218 = onequarter onehalf threequarters
        keycode 220 = less greater bar
        keycode 221 = plus asterisk asciitilde
        keycode 227 = multiply division
        keycode 228 = acircumflex Acircumflex
        keycode 229 = ecircumflex Ecircumflex
        keycode 230 = icircumflex Icircumflex
        keycode 231 = ocircumflex Ocircumflex
        keycode 232 = ucircumflex Ucircumflex
        keycode 233 = ntilde Ntilde
        keycode 234 = yacute Yacute
        keycode 235 = oslash Ooblique
        keycode 236 = aring Aring
        keycode 237 = ccedilla Ccedilla
        keycode 238 = thorn THORN
        keycode 239 = eth ETH
        keycode 240 = diaeresis cedilla currency
        keycode 241 = agrave Agrave atilde Atilde
        keycode 242 = egrave Egrave
        keycode 243 = igrave Igrave
        keycode 244 = ograve Ograve otilde Otilde
        keycode 245 = ugrave Ugrave
        keycode 246 = adiaeresis Adiaeresis
        keycode 247 = ediaeresis Ediaeresis
        keycode 248 = idiaeresis Idiaeresis
        keycode 249 = odiaeresis Odiaeresis
        keycode 250 = udiaeresis Udiaeresis
        keycode 251 = ssharp question backslash
        keycode 252 = asciicircum degree
        keycode 253 = 3 sterling
        keycode 254 = Mode_switch
        
        
        Javascript中 有3个事件句柄在对应键盘的输入状态：keydown、keypress和keyup。 
        分别对应的意思是：按键被按下（按下按键但还没有抬起）、点击按键（按下并抬起按键）、按键抬起（按键抬起之后）

        按键的分类:

        按键可以分为“实键”和“虚键” 
        实键可以理解为我们能够看到并打印出来的按键，如字母“A”、数字“1”、字符“?”等等 
        虚键就是那些无法打印出来起到控制作用的按键，如“Ctrl”、“Alt”、“Shift”、“方向键”等等 
        IE在处理虚键时有个特例：虚键不会产生keypress事件，必须使用keydown或keyup来捕获

        按键码和字符码

        按键码是计算机用来识别不同按键的编码，每一个按键都有按键码 
        字符码是可被打印的实键特有的，对应了键盘上显示的字符 
        按键码可以使用String.fromCharCode()转换为字符码 
        按键码和和字符码的对应表可以在本文最后找到。
        
        获取实键
        $('body').bind('keypress',getKeyCode);   
        function getKeyCode(e) {  
            var evt = e || window.event;  
            var keyCode = evt.keyCode || evt.which || evt.charCode;  
            alert(keyCode);  
        }
        
        稍微解释下 
        1. e为Firefox等标准浏览器支持的JS隐藏变量，表示一个“事件”；IE系列中没有“e”，而是用window.event来表示“事件”；所以var e = e || window.event;就表示：获取当前正在发生的事件。 
        2. e.keyCode、e.which、e.charCode都代表获取按键码，但不同的浏览器支持不同的写法
        
        获取虚键
        function getKeyCode(e) {  
            var evt = e || window.event;  
            if (evt.ctrlKey) alert("ctrlKey pressed");  
            if (evt.altKey) alert("altKey pressed");  
            if (evt.shiftKey) alert("shiftKey pressed");  
        }  
===============================================================
        什么是deferred对象？
        开发网站的过程中，我们经常遇到某些耗时很长的javascript操作。其中，既有异步的操作（比如ajax读取服务器数据），也有同步的操作（比如遍历一个大型数组），它们都不是立即能得到结果的。
        通常的做法是，为它们指定回调函数（callback）。即事先规定，一旦它们运行结束，应该调用哪些函数。
        但是，在回调函数方面，jQuery的功能非常弱。为了改变这一点，jQuery开发团队就设计了deferred对象。
        简单说，deferred对象就是jQuery的回调函数解决方案。在英语中，defer的意思是"延迟"，所以deferred对象的含义就是"延迟"到未来某个点再执行。
        它解决了如何处理耗时操作的问题，对那些操作提供了更好的控制，以及统一的编程接口。它的主要功能，可以归结为四点。
        
        
        二、ajax操作的链式写法
        首先，回顾一下jQuery的ajax操作的传统写法：
        $.ajax({
　　　　url: "test.html",
　　　　success: function(){
　　　　　　alert("哈哈，成功了！");
　　　　},
　　　　error:function(){
　　　　　　alert("出错啦！");
　　　　}
　　});
        $.ajax()操作完成后，如果使用的是低于1.5.0版本的jQuery，返回的是XHR对象，你没法进行链式操作；如果高于1.5.0版本，返回的是deferred对象，可以进行链式操作。
        现在，新的写法是这样的：
        $.ajax("test.html")
        .done(function(){ alert("哈哈，成功了！"); })
        .fail(function(){ alert("出错啦！"); });
        
        deferred.reject()方法，作用是将dtd对象的执行状态从"未完成"改为"已失败"，从而触发fail()方法。
        dtd.resolve(); // 改变Deferred对象的执行状态
        
        前面已经讲到了deferred对象的多种方法，下面做一个总结：
        （1） $.Deferred() 生成一个deferred对象。
        （2） deferred.done() 指定操作成功时的回调函数
        （3） deferred.fail() 指定操作失败时的回调函数
        （4） deferred.promise() 没有参数时，返回一个新的deferred对象，该对象的运行状态无法被改变；接受参数时，作用为在参数对象上部署deferred接口。
        （5） deferred.resolve() 手动改变deferred对象的运行状态为"已完成"，从而立即触发done()方法。
        （6）deferred.reject() 这个方法与deferred.resolve()正好相反，调用后将deferred对象的运行状态变为"已失败"，从而立即触发fail()方法。
        （7） $.when() 为多个操作指定回调函数。
        除了这些方法以外，deferred对象还有二个重要方法，上面的教程中没有涉及到。
        （8）deferred.then()
        有时为了省事，可以把done()和fail()合在一起写，这就是then()方法。
        $.when($.ajax( "/main.php" ))
        .then(successFunc, failureFunc );
        如果then()有两个参数，那么第一个参数是done()方法的回调函数，第二个参数是fail()方法的回调方法。如果then()只有一个参数，那么等同于done()。
        （9）deferred.always()
        这个方法也是用来指定回调函数的，它的作用是，不管调用的是deferred.resolve()还是deferred.reject()，最后总是执行。
        $.ajax( "test.html" )
        .always( function() { alert("已执行！");} );
        
===============================================================
        单选框触发事件
        ;
        (function($) {
            $.fn.JQRadio = function(settings) {
                var $div = this;
                // 当前的radio选中项的value值
                var radioVal = $div.find(".radioVal");
                var items = $div.find("ul > li");
                // 每个li的点击事件
                $div.on("click", "ul > li", function() {
                    radioVal.val($(this).attr("id"));
                    $(this).addClass("selected").siblings("li").removeClass("selected");
                });
                items.each(function() {
                    if ($(this).hasClass('selected')) {
                        $(this).trigger('click');
                    }
                });
            };
        })(jQuery);
===============================================================
        jquery清除选中样式[jquery清除样式][jq清除样式][jquery清除input焦点样式][jq清除input焦点样式]
        // 用事件委托清除input获取焦点样式
        $(document).on('focus', 'input', function () {
            // 失去焦点事件
            // $(this).trigger('blur');
            
            // 清除阴影
            $('input').css({
                '-webkit-box-shadow': 'none',
                '-moz-box-shadow': 'none',
                'box-shadow': 'none',
                'outline': 'none'
            })
            
            // 去除光标
            $('input').attr('readonlyunselectable', 'on');
        });             
===============================================================
        Java方法?
        【getParameter()】获取客户端的数据
        【setAttribute()】保存客户端的数据以对象转换,在其他java页面使用【getAttribute()】获取数据
        
        【session.setAttribute()】和【request.getSession()】,【request.setAttribute()】是一样的。。
        【session.setAttribute()和【request.setAttribute()】就有区别了。。
        
        Java数据如何存入session? 以下两一起使用
        【HttpSession session = request.getSession();】
        【session.setAttribute("obj", JavaObj);】
        
        → java中request的getParameter方法和getAttribute方法的用法区别比较
        
        1.request的getParameter方法的作用是获取到客户端通过表单或url请求参数所发送过来的参数值，是客户端与服务器端之间的交互，服务器端想获取到客户端发送过来的数据，就需要使用getParameter方法来获取，没有与getParameter方法对应的setParameter方法。

        2.request的setAttribute与getAttribute方法一般都是成对出现的，首先通过setAttribute方法设置属性与属性值，然后通过getAttribute方法根据属性获取到与该属性对应的对象值（获取到之后一般都需要进行向下类型转换，将属性值转换为真正的对象）。setAttribute与getAttribute方法都是在服务器端内部执行的，客户端不知道服务器端是否执行过这两个方法。
         
                只要记住以下一句话即可
                Parameter参数
                getParameter方法就是服务器端接受客户端传递过来的数据时使用
                
                getAttribute方法是在服务器端内部使用，数据通过getParameter获取进来之后，在另一个页面还想继续使用这个数据就要把这个数据通过setAttribute保存起来，想用时再用getAttribute取出来即可使用！（同样也可以用session.setAttribute和session.getAttribute方法来进行数据的保存和使用！）
                
        session生命周期为30分钟，超过30分钟会释放掉
        
        
        java的for in循环,遍历对象的属性
        for (BpDicArea dic : list) {}
===============================================================
        Javascript编程风格?
        规则1：
                表示区块起首的大括号，不要另起一行。
        规则2：
                调用函数的时候，函数名与左括号之间没有空格。
        规则3：
                函数名与参数序列之间，没有空格。
        规则4：
                所有其他语法元素与左括号之间，都有一个空格。 
        规则5：
                不要省略句末的分号。
        规则6：
                不要使用with语句
        规则7：
                不要使用"相等"（==）运算符，只使用"严格相等"（===）运算符。
        规则8：
                不要将不同目的的语句，合并成一行。
        规则9：
       　       所有变量声明都放在函数的头部。
        规则10：
                所有函数都在使用之前定义。
      　规则11：
      　        避免使用全局变量；如果不得不使用，用大写字母表示变量名，比如UPPER_CASE。
        规则12：
               不要使用new命令，改用Object.create()命令。
        规则13：
                建构函数的函数名，采用首字母大写（InitialCap）；其他函数名，一律首字母小写。
        规则14：
                不要使用自增（++）和自减（--）运算符，用+=和-=代替。
        规则15：
       　       总是使用大括号表示区块。
       　
       　
=======================================================
不错的橘黄色 : 	255,153,0 
	 		#FF9900
深色的橘色 : 	255,121,0
			#FF7900

	../../../theme/images/myImg/info.png
=======================================================
        SHA256解密/解密
加密:
        a4ayc/80/OGda4BO/1o/V0etpOqiLx1JwB5S3beHW0s=
解密:   1
        解密:
                b64_sha256(password) + "="
加密:
        a4ayc/80/OGda4BO/1o/V0etpOqiLx1JwB5S3beHW0s=
解密:   2
=======================================================
        md5加密/解密
加密:
        c4ca4238a0b923820dcc509a6f75849b
解密:   1
        
        加密;
                hex_md5()

加密:
        e10adc3949ba59abbe56e057f20f883e
解密:   123456

加密:
        96e79218965eb72c92a549dd5a330112
解密:   111111


=======================================================
	SlSmalloanProjectVM.js
	上传资料与担保措施.vm

数据库查询银行绑定[银行卡绑定]
SELECT bpCustMemberId FROM `cs_person` WHERE bpCustMemberId=127;

报500错误?
	删除cs_person表里添加的数据就成功了

192.168.0.107
===============================================================
        数据库查询用户号[Navicat查询][数据库查询][数据库查询登录名][数据库查询name][mysql查询用户名][mysql查询登录名][mysql查询name][mysql查询][sql查询]
        select * from bp_cust_member where loginname = 'yiyi123';
        
        数据库查询手机号[mysql查询手机号]
        select * from bp_cust_member where telphone='15855566701'
        
        数据库查询绑定第三方[mysql查询绑定第三方]
        select * from bp_cust_member where isCheckCard='1'
        
        
        数据库查询体验标[mysql查询体验标]
        SELECT * from pl_managemoneyplan_buyinfo where mmplanId = 1173;

        select * from pl_managemoney_plan where mmplanId = 1173;
        
        [数据库批量查询][mysql批量查询][sql批量查询][Navicat批量查询]
SELECT
	houseofsheng,
	houseofshi,
	mortgageTime,
	yuehuankuan,
	houseHaveBig,
	providentfundCompany,
	providentFundDepositBase,
	socialSecurityDepositBase
FROM
	cs_person
WHERE
	bpCustMemberId = 17
        
===============================================================
        数据库查询理财计划   
        select * from pl_managemoneyplan_buyinfo where investPersonId = 805 and state IN(2,7) and keystr IN('mmplan','UPlan');
===============================================================
        cmd恢复数据库
        【mysql > use dbname】
        【mysql > resource c:\dbname.sql】
===============================================================
常用阴影:
        box-shadow: 0 0 4px rgba(0,0,0,0.2)            
        box-shadow:0 0 4px rgba(0,0,0,0.75)
设置周围颜色:
        box-shadow:0 0 10px #999; 设置四周颜色
        
        
    background-color: #fff;
    height: 44px;
    vertical-align: top;
    border-radius: 2px;
    box-shadow: 0 2px 2px 0 rgba(0,0,0,0.16), 0 0 0 1px rgba(0,0,0,0.08);
    transition: box-shadow 200ms cubic-bezier(0.4, 0.0, 0.2, 1);
    
    鼠标移入:
    box-shadow: 0 3px 8px 0 rgba(0,0,0,0.2), 0 0 0 1px rgba(0,0,0,0.08);
    
    
    chrome删除浏览记录阴影:
        background-color: rgba(255, 255, 255, 0.75);
    模态框:    
    background: white;
    box-shadow: 0 4px 23px 5px rgba(0, 0, 0, 0.2), 0 2px 6px rgba(0,0,0,0.15);
    color: #333;
            
===============================================================
如何关闭打开文件安全警告
        1.【Win + R】 输入【gpedit.msc】
        2.在左侧的控制台树依次展开【用户配置 → 管理模板 → Windows 组件 → 附件管理器】
        3.在右侧窗口中双击【中等危险文件类型的包含类表】
        4.在出来的【设置】界面下选择【已启用】，并在指定高危险扩展名的框中添加【.exe】等要隐蔽安全警告提示的文件类型。（添加多个扩展名请用分号；隔开）
        5.【确定】

        批处理:
        @echo off
        reg add HKCU\Software\Microsoft\Windows\CurrentVersion\Policies\Associations /v ModRiskFileTypes /t REG_SZ /d .exe;.bat;.vbs /f
        gpupdate /force
        exit
　注：如果你要添加其他格式的类型可以在/d 参数后面添加。用;号分隔开就可以。如本例中 .exe;.bat;.vbs
===============================================================
        批处理启动远程服务器[bat启动远程服务器]
        【start mstsc /v:123.57.143.197】
===============================================================
        批处理注释[bat注释]
        
        写bat批处理也一样，都要用到注释的功能，这是为了程式的可读性

在批处理中，段注释有一种比较常用的方法：
    goto start
     = 可以是多行文本，可以是命令
     = 可以包含重定向符号和其他特殊字符
     = 只要不包含 :start 这一行，就都是注释
    :start

另外，还有其他各种注释形式，比如：
 
   1、:: 注释内容（第一个冒号后也可以跟任何一个非字母数字的字符）
    2、rem 注释内容（不能出现重定向符号和管道符号）
    3、echo 注释内容（不能出现重定向符号和管道符号）〉nul
    4、if not exist nul 注释内容（不能出现重定向符号和管道符号）
    5、:注释内容（注释文本不能与已有标签重名）
    6、%注释内容%（可以用作行间注释，不能出现重定向符号和管道符号）
    7、goto 标签 注释内容（可以用作说明goto的条件和执行内容）
    8、:标签 注释内容（可以用作标签下方段的执行内容）
    
    
        echo 方案一：
        ::利用转义符号^
        优点是无任何显示，缺点是每行都要加^(而且最后一行一定不能加)，比较适用于注释行数少时
        pause>nul

        echo 方案二：
        rem 同样是用转义符号^
        优点是大部分时候比较简单省事，缺点同上
        pause>nul

        echo 方案三：
        if 1==0 (
        利用恒不等的判断语句
        个人认为是有长注释时的最优方案，不解释
        )
        pause>nul

        echo 方案四：
        (利用屏蔽错误回显的方法。
        优点是注释比较零碎且行数少时效率比方案五高，但行数多时比较难说，而且有可能出错
        )2>nul
        pause>nul

        echo 方案五：
        goto 1
        利用跳转让电脑不执行注释内容。
        优点是绝不出错，但是效率低，频繁使用时更低
        :1
        pause>nulF
===============================================================
      浏览器书签缩放
        http://codebomber.com/jquery/resizer/
                javascript:(function(){document.body.appendChild(document.createElement('script')).src='http://codebomber.com/jquery/resizer/resizer.min.js';})();
===============================================================
        [git相关]]
git配置:
        1.桌面右键【Git Bash Here】
        2.【mkdir ~/.ssh】创建
          【cd ~/.ssh/】进入
        3.输入以下
        	【git config --global user.name "waecy"】
        	【git config --global user.email "wang867258173@gmail.com"】
        4.生成key
          【ssh-keygen -t rsa -C "wang867258173@gmail.com"】
        5.连续按三次回车,设置密码为空
        6.打开%Userprofile%\.ssh
        7.记事本打开【id_rsa.pub】,复制密钥
                https://github.com/settings/keys
                在github添加key
        8.测试是否添加成功
                github输入命令:
                【ssh git@github.com】
                bitbucket输入命令:
                【ssh -T git@bitbucket.org】
        9.提示是否登录【yes】回车
        Hi waecy! You've successfully authenticated, but GitHub does not provide shell access.
Connection to github.com closed.
嗨waecy !您已经成功地进行了身份验证，但是GitHub不提供shell访问。 连接到github.com关闭。
===============================================
git添加文件
        
        1.github先创建一个项目:
        https://github.com/orgs/waecysj/people/waecy
        ① 快速设置:
       【https://github.com/waecysj】
        右上角【New】创建一个新项目
        
        HTTP:
        【https://github.com/waecysj/demo.git】
        SSH:
        【git@github.com:waecysj/demo.git】
        
        ② 创建一个新的库
        1.【mkdir test】    //创建一个项目test
        2.【cd test】 //进入项目test
        3.【git init】 //初始化
        4.1【echo "# demo" >> README.md】创建一个文件
        4.2【touch README.md】也可以,这样创建一个空文件
        5.【git add README.md】 //更新README文件
        【git commit -m "这里是提交的注释<=不要小于5个字"】 //提交更新，并注释信息
        【git remote add origin git@github.com:waecysj/demo.git】 //连接远程github项目
        【git push -u origin master】 //将本地项目更新到github项目上去
        
        ※:添加当前目录所有文件,不会添加空文件夹
        进入当前目录
        【git add .】
        【git commit -m "summit content! _(:з」∠)_"】
        【git remote add origin git@github.com:waecysj/demo.git】
        【git push -u origin master】
        
        ③ 更新一个库
        【git remote add origin git@github.com:waecysj/demo.git】
        【git push -u origin master】
        
        更新下载的github代码[更新github代码]
               【git fetch origin master】
                
        代码合并:
        【git pull --rebase origin master】
        
        从服务器覆盖版本地文件下载
        【git fetch】
        【git checkout -m 版本号 文件/文件夹】
                文件:git checkout -m 2408ca5 1.php 2.php
                目录:git checkout -m 2408ca5 test1
        
        第1种模式，直接删除远程仓库的，本地仓库的还是没有删除，可以进行物理删除或者叫手动删除。
        【git rm -r --cached a/ss.txt】
        【git commit -m  "这是用来删除文件"】
        【git push】
        
         用-r参数删除目录, git rm --cached a.txt 删除的是本地仓库中的文件，且本地工作区的文件会保留且不再与远程仓库发生跟踪关系，如果本地仓库中的文件也要删除则用 【git rm a.txt】
        硬盘删除文件后，执行 git status
        会提示你仍然需要 git rm <文件> 【同上】
        此时如果是要删除大批量文件，这么一个一个命令下去不得累死人啊
        其实可以这样（不管之前有没有已经本地物理删除）
        执行 【git rm * -r】（记得，cd 到你要删除的目录下。当然 * 可以换成指定目录）
        这时删除文件已经进入本地缓存区，
        接下来就是正常的提交操作了
        
        第2种模式，先进行本地物理删除，在进行远程仓库的删除。操作如下：
        【git add .】 
        【git commit -m "clear"】
        【git push origin master】
        
        本人遇到错误:
        1.多次提交
        failed to push some refs to git?
        Git Your branch is ahead of 'origin/master' by X commits
       【Your branch is ahead of 'origin/mast】
       
        上网搜索，有的说是 本地之前的代码有部分提交了，使用强制提交覆盖
        【git push -f】 强推，即利用强覆盖方式用你本地的代码替代git仓库内的内容
        试了，不行；
        还有说 先使用git fetch 到本地 之后在merge ,然后在push
        【git fetch】
        【git merge】

        试了，依然不行
        偶然用百度的方法
        把当前分支代码上传到指定分支上
        【git push -u origin develop】
        结果是可以的。
=============================================== 
        git快捷键和命令:
        【Shift + Insert】键粘贴
        【clear】清空命令窗口内容,也可以【Alt + F8】
        【cmd /c cls】 切换回系统cmd
        【ls】查看当前目录下都有些什么
        【git remote】命令列出所有远程主机。
        【git remote -v】 使用-v选项，可以参看远程主机的网址。
                克隆版本库的时候，所使用的远程主机自动被Git命名为origin。如果想用其他的主机名，需要用git clone命令的-o选项指定。
             git clone -o jQuery https://github.com/jquery/jquery.git
             git remote
             jQuery   
        【git remote show】命令加上主机名，可以查看该主机的详细信息。
        【git remote add <主机名> <网址>】用于添加远程主机。
        一旦远程主机的版本库有了更新（Git术语叫做commit），需要将这些更新取回本地，这时就要用到git fetch命令。
        【git fetch <远程主机名>>】 将某个远程主机的更新，全部取回本地
        比如，取回origin主机的master分支。
        【git fetch origin master】
         所取回的更新，在本地主机上要用"远程主机名/分支名"的形式读取。比如origin主机的master，就要用origin/master读取。
         git branch命令的-r选项，可以用来查看远程分支，-a选项查看所有分支。
         【git branch -r】
         【git branch -a】
         【git checkout -b newBrach origin/master】在origin/master的基础上，创建一个新分支。
         也可以使用git merge命令或者git rebase命令，在本地分支上合并远程分支
        【git merge origin/master】
        # 或者
        【git rebase origin/master】
        上面命令表示在当前分支上，合并origin/master。

        git pull命令的作用是，取回远程主机某个分支的更新，再与本地的指定分支合并。它的完整格式稍稍有点复杂。
        【git pull <远程主机名> <远程分支名>:<本地分支名>】
        比如，取回origin主机的next分支，与本地的master分支合并，需要写成下面这样。
        【git pull origin next:master】
        如果远程分支是与当前分支合并，则冒号后面的部分可以省略。
        【git pull origin next】
         上面命令表示，取回origin/next分支，再与当前分支合并。实质上，这等同于先做git fetch，再做git merge
        【git fetch origin】
        【git merge origin/next】
        在某些场合，Git会自动在本地分支与远程分支之间，建立一种追踪关系（tracking）。比如，在git clone的时候，所有本地分支默认与远程主机的同名分支，建立追踪关系，也就是说，本地的master分支自动"追踪"origin/master分支。
Git也允许手动建立追踪关系。
       【git branch --set-upstream master origin/next】 
上面命令指定master分支追踪origin/next分支。
如果当前分支与远程分支存在追踪关系，git pull就可以省略远程分支名。

        【git pull origin】
        上面命令表示，本地的当前分支自动与对应的origin主机"追踪分支"（remote-tracking branch）进行合并。
        如果当前分支只有一个追踪分支，连远程主机名都可以省略。

        【git pull】
        上面命令表示，当前分支自动与唯一一个追踪分支进行合并。
        如果合并需要采用rebase模式，可以使用--rebase选项。

        【git pull --rebase <远程主机名> <远程分支名>:<本地分支名>】
        如果远程主机删除了某个分支，默认情况下，git pull 不会在拉取远程分支的时候，删除对应的本地分支。这是为了防止，由于其他人操作了远程主机，导致git pull不知不觉删除了本地分支。
        但是，你可以改变这个行为，加上参数 -p 就会在本地删除远程已经删除的分支。

        【git pull -p】
        # 等同于下面的命令
        【git fetch --prune origin】
        【git fetch -p】
                
        git push命令用于将本地分支的更新，推送到远程主机。它的格式与git pull命令相仿。

        【git push <远程主机名> <本地分支名>:<远程分支名>
        注意，分支推送顺序的写法是<来源地>:<目的地>，所以git pull是<远程分支>:<本地分支>，而git push是<本地分支>:<远程分支>。
        如果省略远程分支名，则表示将本地分支推送与之存在"追踪关系"的远程分支（通常两者同名），如果该远程分支不存在，则会被新建。

        【git push origin master】
        上面命令表示，将本地的master分支推送到origin主机的master分支。如果后者不存在，则会被新建。
        如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。

        【git push origin :master】
        # 等同于
        【git push origin --delete master】
        上面命令表示删除origin主机的master分支。
        如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略。

        【git push origin】
        上面命令表示，将当前分支推送到origin主机的对应分支。
        如果当前分支只有一个追踪分支，那么主机名都可以省略。

        【git push】
        如果当前分支与多个主机存在追踪关系，则可以使用-u选项指定一个默认主机，这样后面就可以不加任何参数使用git push。
        【git push -u origin master】
        上面命令将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了。
        不带任何参数的git push，默认只推送当前分支，这叫做simple方式。此外，还有一种matching方式，会推送所有有对应的远程分支的本地分支。Git 2.0版本之前，默认采用matching方法，现在改为默认采用simple方式。如果要修改这个设置，可以采用git config命令。

        【git config --global push.default matching】
        # 或者
        【git config --global push.default simple】
        还有一种情况，就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要使用--all选项。

        【git push --all origin】
        上面命令表示，将所有本地分支都推送到origin主机。
        如果远程主机的版本比本地版本更新，推送时Git会报错，要求先在本地做git pull合并差异，然后再推送到远程主机。这时，如果你一定要推送，可以使用--force选项。

        【git push --force origin】
        上面命令使用--force选项，结果导致远程主机上更新的版本被覆盖。除非你很确定要这样做，否则应该尽量避免使用--force选项。
        最后，git push不会推送标签（tag），除非使用--tags选项。

        【git push origin --tags】
        
       
git错误解决?    
        1.failed to push some refs to git错误?
          原因:github中的README.md文件不在本地代码目录中
          可以通过如下命令进行代码合并【注：pull=fetch+merge]
                【git pull --rebase origin master】
                【git push -u origin master】
              
        2.删除了本地文件或github文件,无法提交文件或删除       
                【git status】 //可以看到我们删除的哪些文件
                【git add .】   //删除之后的文件提交git经管。
                【git rm a.c】 //删除文件
                【git rm -r gittest】 //删除目次
                
                【git reset --hard HEAD】 回滚到add之前的状态
                【git diff】比较的是跟踪列表中的文件和文件系统中文件的差别
 
        检出仓库：【git clone git://github.com/jquery/jquery.git】
        查看远程仓库：【git remote –v】
        添加远程仓库：【git remote add [name] [url]】
        删除远程仓库：【git remote rm [name]】
        拉取远程仓库：【git pull [remoteName] [localBranchName]】
        推送远程仓库：【git push [remoteName] [localBranchName]】
        分支(branch)操作相关命令查看本地分支：【git branch】
        查看远程分支：【git branch –r】
        创建本地分支：【git branch [name]】 ----注意新分支创建后不会自动切换为当前分支
        切换分支：【git checkout [name]】
        创建新分支并立即切换到新分支：【git checkout -b [name]】
        删除分支：【git branch -d [name]】 ---- -d选项只能删除已经参与了合并的分支，对于未有合并的分支是无法删除的。如果想强制删除一个分支，可以使用-D选项
        合并分支：【git merge [name]】 ----将名称为[name]的分支与当前分支合并创建远程分支
        (本地分支push到远程)：【git push origin [name]】
        删除远程分支：【git push origin :heads/[name]
        版本(tag)操作相关命令查看版本：【git tag】
        创建版本：【git tag [name]】
        删除版本：【git tag -d [name]】
        查看远程版本：【git tag –r】
        创建远程版本(本地版本push到远程)：【git push origin [name]】
        删除远程版本：【git push origin :refs/tags/[name]】
        子模块(submodule)相关操作命令添加子模块：【git submodule add [url] [path]
        初始化子模块：【git submodule init】  ----只在首次检出仓库时运行一次就行
        更新子模块：【git submodule update】 ----每次更新或切换分支后都需要运行一下
        删除子模块：【git rm --cached [path]】
        忽略一些文件、文件夹不提交在仓库根目录下创建名称为“.gitignore”的文件，写入不需要的文件夹名或文件，每个元素占一行即可，如targetbin*.db

        【git init 产生的目录解释】
        error: src refspec master does not match any.
        引起该错误的原因是，目录中没有文件，空目录是不能提交上去的
        error: insufficient permission for adding an object to repository database ./objects
        服务端没有可写目录的权限

        错误提示：fatal: remote origin already exists.
        解决办法：【git remote rm origin】
        错误提示：error: failed to push som refs to ........
        解决办法：【git pull origin master】//先pull 下来 再push 上去
        【Git init】 //在当前项目工程下履行这个号令相当于把当前项目git化，变身！
        【git add .】//把当前目次下代码参加git的跟踪中，意思就是交给git经管，提交到本地库
        【git add <file>】 //把当前文件参加的git的跟踪中，交给git经管，提交到本地库
        【git commit -m “…”】//相当于写点提交信息
        【git remote add origin git＠github.com:ellocc/gittest.git】 //这个相当于指定本地库与github上的哪个项目相连
        【git push -u origin master】 //将本地库提交到github上。
        【git clone git＠github.com:ellocc/gittest.git】  //将github上的项目down下来。
        【git fetch origin】 //取得长途更新，这里可以看做是筹办要取了
        【git merge origin/master】 //把更新的内容归并到本地分支/master

========================================================
        git下载项目[git下载github][下载github代码][github下载代码]
        【git clone git://github.com/waecysj/demo】
        【git clone https://github.com/waecysj/demo.git】
========================================================
        【bat交互执行git命令演示.bat】

        @echo off
        @title bat交互执行git命令演示

        REM 临时添加Git到 path 环境变量,此处也可以手动加到"环境变量"控制面板,永久生效
        echo\&echo 切换工程目录
        cd /d %userprofile%\Desktop\extJS及其他代码学习\jquery学习

        REM =======以下是创建文件命令========
        REM echo new file > file.txt
        REM cd.>README.md
        git add .
        git commit -m "新增文件!"
        git remote add origin git@github.com:waecysj/demo.git
        git push -u origin master

        pause
========================================================
Dos命令之setx-------常用来设置系统环境变量
        cmd设置环境变量
        第一种:
         【set Path=C:\Program Files\360\360sd】
        set Path1=C:\Program Files\360\360sd
        
        第二种(推荐):
        【setx binn 这是binn的值】
        binn是变量名称，后面是他的值
        
        先设置setx为全局路径
        【setx path %systemroot%\system32; /m】
        
        查看环境变量
        【echo %binn%】
        
        注意事项。 
        (1)setx的执行需要setx.exe,在【%systemroot%\system32\setx.exe】目录下，win2008默认有这个exe,xp一般没有，需要去下载一个。 
        (2)网上盛行的设置java环境变量如果是在xp下是不能用的，需要下载setx.exe

        设置用户环境变量 
        【setx ENV_NAME env_value】

        设置系统环境变量 
        【setx ENV_NAME env_value /m】
        
        注意1. 
        在某些情况下会出现“setx 无效语法 默认选项不能超过’2’次”的错误，据信是因为原先的环境变量中存在空格导致的，可使用双引号进行避免。

        注意2. 
        setx设置环境变量后，将在新打开的终端中生效，当前终端不会立即生效。所以当设置path这样内容较为丰富的环境变量时，要一次到位，而不要针对同一变量反复调用setx。例如： 
        正确做法： 
        【sset test = %binn%】
        【ssetx "test" "%binn%" /m】
        错误做法： 
        set path_=%Path% 
        setx “Path” “%path_%;newpath1” /m 
        setx “Path” “%path_%;newpath2” /m 
        上述错误的做法将会漏掉newpath1。
========================================================
        备份环境变量
        
        系统环境变量：
                【HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\Environment】
        用户环境变量：
                【HKEY_CURRENT_USER\Environmet】
               
               导出注册表
              【reg export "注册表位置" D:\Environmet.reg】
               
               导入注册表
               【regedit /s D:\Environmet.reg】 
               加上/s参数就可以不用提示按Y
               
        一、备份环境变量注册表
        点击开始菜单，在搜索输入框里输入regedit，并回车打开注册表编辑器。
        定位到系统环境变量的位置，然后再environment位置，鼠标右键Export导出即可备份。
        在命令行下执行：
        【set >> D:\Environmet.txt】
        就可以把环境变量备份到文件。
        如果只是修改部分环境变量也可以到计算机 > 属性 > 高级系统设置 > 高级 > 环境变量，如下图：
        提示：使用注册表导出功能备份的环境变量，如果变量类型为REG_EXPAND_SZ等类型时，导出格式为16进制，所以不好编辑，可采用cmd、或上述单个变量修改窗口手动修改。
========================================================
CSS设置三条线[CSS生成三条边][CSS生成三条线]
background-clip: content-box; 生成三条线

  .shadow{
    width:15em;
    height:1em;
    padding:20px 0;
    border-top: 1em solid #777;
    border-bottom: 1em solid #777;
    background-color: #777;
    background-clip: content-box;
    margin-top: 10px;
  }
  .shadow:hover{
    border-color:blue;
    background-color:blue;
    cursor:pointer;
  }
========================================================
        F12 提示 net::ERR_BLOCKED_BY_CLIENT
        原因：广告拦截插件（我这儿是Adblock Plus，也可能是其他插件…全家桶系列什么的…）
        解决方法：把域名添加到白名单
========================================================
        FileReader
        【onabort】
        当读取操作被中止时调用.
        【onerror】
        当读取操作发生错误时调用.
        【onload】
        当读取操作成功完成时调用.
        【onloadend】
        当读取操作完成时调用,不管是成功还是失败.该处理程序在onload或者onerror之后调用.
        【onloadstart】
        当读取操作将要开始之前调用.
        【onprogress】
        在读取数据过程中周期性调用
========================================================
        js判断IE[js判断浏览器内核]
        navigator.appName === "Microsoft Internet Explorer"
        
        
        【navigator.userAgent】识别各种浏览器
        userAgent 属性是一个只读的字符串，声明了浏览器用于 HTTP 请求的用户代理头的值。.
        navigator.userAgent
        
        js判断是否联网
        【navigator.onLine】true代表连上网了.false代表没联网
        
        navigator.connection.type
        
更兼容的写法：
        var EventUtil = { 
        　　　　addHandler: function (element, type, handler) { 
        　　　　　　if(element.addEventListener) { 
        　　　　　　　　element.addEventListener(type, handler, false); 
        　　　　　　}else if (element.attachEvent) {
        　　　　　　　　element.attachEvent("on" + type, handler); 
        　　　　　　}else { 
        　　　　　　　　element["on" + type] = handler;
        　　　　　　} 
        　　　　}
        　　 }; 

        　　EventUtil.addHandler(window, "online", function () { alert("Online"); }); 
        　　EventUtil.addHandler(window, "offline", function () { alert("Offline"); });
======================================================== 
        /**
         * 验证是否为智能手机
         */
         $.checkMobile = function(){
             var flag = false;  
            var agent = navigator.userAgent.toLowerCase();  
            var keywords = [ "android", "iphone", "ipod", "ipad", "windows phone", "mqqbrowser" ];  
            
            //排除 Windows 桌面系统  
            if (!(agent.indexOf("windows nt") > -1) || (agent.indexOf("windows nt") > -1 && agent.indexOf("compatible; msie 9.0;") > -1)) {  
                //排除苹果桌面系统  
                if (!(agent.indexOf("windows nt") > -1) && !agent.indexOf("macintosh") > -1 ) {  
                    for (var item in keywords) {  
                        if (agent.indexOf(item) > -1 ) {  
                            flag = true;  
                            break;  
                        }  
                    }  
                }  
            }  
            return flag;
         }
         
window PC
        Mozilla/5.0 (Windows NT 6.1; WOW64; rv:12.0) Gecko/20100101 Firefox/12.0   ---FF
        Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.162 Safari/53  ---Chrome
        Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/534.52.7 (KHTML, like Gecko) Version/4.0.5 Safari/531.22.7  ----safari
        Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; MDDS; InfoPath.2; Alexa Toolbar)   ----IE
        Opera/9.80 (Windows NT 6.1; WOW64; U; zh-cn) Presto/2.10.229 Version/11.64  ---opera


下面搜集的一些Agent，话说找到这么多的智能设备，好不容易啊：
        Mozilla/5.0 (iPod; U; CPU iPhone OS 4_3_2 like Mac OS X; zh-cn) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8H7 Safari/6533.18.5
        Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_3_2 like Mac OS X; zh-cn) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8H7 Safari/6533.18.5
        MQQBrowser/25 (Linux; U; 2.3.3; zh-cn; HTC Desire S Build/GRI40;480*800)
        Mozilla/5.0 (linux; U; android 2.3.3; zh-cn; HTC_DesireS_S510e Build/GRI40) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1
        Mozilla/5.0 (SymbianOS/9.3; U; Series60/3.2 NokiaE75-1 /110.48.125 Profile/MIDP-2.1 Configuration/CLDC-1.1 ) AppleWebKit/413 (KHTML, like Gecko) Safari/413
        Mozilla/5.0 (iPad; U; CPU OS 4_3_3 like Mac OS X; zh-cn) AppleWebKit/533.17.9 (KHTML, like Gecko) Mobile/8J2
        Mozilla/5.0 (Windows NT 5.2) AppleWebKit/534.30 (KHTML, like Gecko) Chrome/12.0.742.122 Safari/534.30
        Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_2) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.835.202 Safari/535.1
        Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_2) AppleWebKit/534.51.22 (KHTML, like Gecko) Version/5.1.1 Safari/534.51.22
        Mozilla/5.0 (iPhone; CPU iPhone OS 5_0 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9A5313e Safari/7534.48.3
        Mozilla/5.0 (iPhone; CPU iPhone OS 5_0 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9A5313e Safari/7534.48.3
        Mozilla/5.0 (iPhone; CPU iPhone OS 5_0 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9A5313e Safari/7534.48.3
        Mozilla/5.0 (Windows NT 6.1) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.835.202 Safari/535.1
        Mozilla/5.0 (compatible; MSIE 9.0; Windows Phone OS 7.5; Trident/5.0; IEMobile/9.0; SAMSUNG; OMNIA7)　　　　　　----SAMSUNG MP7
        Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0; XBLWP7; ZuneWP7)  　　　　　　　　----HTC MP7
========================================================
        js浏览器兼容[兼容浏览器]
        【setSelectionRange】
        【document.selection】  IE/Opera支持 Firefox/Safari/Chrome不支持
        【createRange()】  IE/Opera支持 Firefox/Safari/Chrome不支持
        【createTextRange()】  IE支持 Firefox/Safari/Chrome/Opera不支持
        【window.getSelection()】  Firefox/Safari/Chrome/Opera支持 IE不支持
        
        
        <meta http-equiv="x-ua-compatible" content="IE=9" >
        <meta http-equiv="x-ua-compatible" content="IE=8" >
        <meta http-equiv="x-ua-compatible" content="IE=7" >
        多模式指定
        <meta http-equiv="x-ua-compatible" content="IE=7,9,10" >
        为了测试，我们也可以使用下面的语句指定浏览器按照最高的标准模式解析页面。
        <meta http-equiv="x-ua-compatible" content="IE=edge" >
========================================================
        IE7解决png透明度问题?
        CSS代码:
        filter: progid:DXImageTransform.Microsoft.AlphaImageLoader(sizingMethod=scale);
        
        JS代码:
        获取DOM图片元素.filters.item("DXImageTransform.Microsoft.AlphaImageLoader").src 
========================================================
        一些有用技能点

        通过设置css属性 -webkit-tap-highlight-color: rgba(0, 0, 0, 0);取消掉手机端webkit浏览器 点击按钮或超链接之类的 默认灰色背景色 
        设置css属性 -webkit-user-select:none; 控制用户不可选择文字 
        区域性 overflow: scroll | auto 滚动时使用原生效果：-webkit-overflow-scrolling: touch （ios8+，Android4.0+）
========================================================
        【UserData】
        userData行为通过将数据写入一个UserData存储区（UserData store）来保存数据，userData可以将数据以XML格式保存在客户端计算机上，如果你用的是 Windows 2000 或者 Windows XP，是保存在C:\Documents and Settings\Liming\UserData\文件夹下（如果操作系统不是安装在C盘，那么C就应该是操作系统所在的分区）。 

        该数据将一直存在，除非你人为删除或者用脚本设置了该数据的失效期。 
        
        userData行为提供了一个比Cookie更具有动态性和更大容量的数据结构。每页的UserData存储区数据大小可以达到【64 Kb】，每个域名可以达到【640 Kb】。 

        userData行为通过sessions为每个对象分配UserData存储区。使用save和load方法将UserData存储区数据保存在缓存（cache）中。一旦UserData存储区保存以后，即使IE浏览器关闭或者刷新了，下一次进入该页面，数据也能够重新载入而不会丢失。 

        userData行为可用于Microsoft? Win32?和Unix平台上的IE 5.0以上版本，不支持Netscape。 
        【getAttribute()】
          取得指定的属性值。 
        【load(存储区名)】 
          从UserData存储区载入存储的对象数据。 
        【removeAttribute()】
          从对象中删除指定的属性值。 
        【save(存储区名) 】
          将对象数据存入一个UserData存储区。 
        【setAttribute()】 
          设置指定的属性值。 
        【XMLDocument()】 
          取得存储该对象数据的XML DOM引用。 
========================================================
        一、Window视图属性
        这些属性可以hold住整个浏览器窗体大小。微软则将这些API称为“【Screenview】 接口”。包括：
        【innerWidth】属性和【innerHeight】属性
                【IE5.5 -- IE8】不支持
                【IE9 pr3】支持
                【FF3.0 -- FF4b1】支持
                【Saf 4.0 -- Saf 5.0】支持
                【Chrome 4 -- Chrome 5】支持
                【Opeta 10.10 + Opeea 10.53 + Opeea 10.60】支持
        【pageXOffset】属性和【pageYOffset】属性
                        同上
        【screenX】属性和【screenY】属性
                        同上
        【outerWidth】属性和【outerHeight】属性
                        同上
                        
         二、Screen视图属性                  
        相关属性组对应的兼容性以及使用见下面。这类API又被称为“Screen 接口”。相关兼容性与特性依次见下面内容：
                【IE5.5 -- IE9 pr3】支持
                【FF3.0 -- FF4b1】支持
                【Saf 4.0 -- Saf 5.0】支持
                【Chrome 4 -- Chrome 5】支持
                【Opeta 10.10 + Opeea 10.53 + Opeea 10.60】支持
        screen.availWidth
        screen.availHeight
        【colorDepth】表示显示器的颜色深度。兼容性参见下
                【IE5.5 -- IE9 pr3】支持
                【FF3.0 -- FF3.5】支持
                【FF3.6 -- FF 4b1】不支持
                【Saf 4.0 -- Saf 5.0】支持
                【Chrome 4 -- Chrome 5】支持
                【Opeta 10.10 + Opeea 10.53 + Opeea 10.60】支持
                 screen.colorDepth
                 一般浏览器（包括低版本IE）都返回32，因为现在的浏览器一般都支持透明通道的。但是，FireFox 3.6 一直到现在的FireFox 6浏览器screen.colorDepth返回的却是24。这让我有点想起了photoshop中存储图片时候保存为png24的选项，虽说是png 24，但是实际上是png 32 的支持透明通道。
        
        判断一个浏览器是否是火狐浏览器3.6+版本提供了灵感：
                 【var $isFF = (screen.colorDepth === 24)? true: false;】
        【pixelDepth】 该属性基本上与colorDepth一样。其兼容性如下表：
                【IE5.5 -- IE8】不支持
                【IE9 pr3】支持    
                【FF3.0 -- FF3.5】支持
                【FF3.6 -- FF 4b1】不正确                
                【Saf 4.0 -- Saf 5.0】支持
                【Chrome 4 -- Chrome 5】支持
                【Opeta 10.10 + Opeea 10.53 + Opeea 10.60】支持
        低版本IE不支持。FireFox3.6+版本返回内容不准确。使用示例：
        screen.pixelDepth
        
        除了在IE6~IE8浏览器下显示undefined外，其他浏览器的弹出结果跟上面colorDepth一致，这里就不重复展示图片了。
        pixelDepth和colorDepth的不同之处（不确定新的是否也是如此？）是在Unix机器上，旧的X-客户端可以运行应用程序定义属于自己的颜色组。在这种情况下，colorDepth匹配应用程序的颜色深度，pixelDepth匹配显示器的颜色深度。其他所有情况下，pixelDepth和colorDepth是互通有无的。
        【width】和【height】 表示显示器屏幕的宽高。其兼容性还是很不错的，参见下表：      
                【IE5.5 -- IE9 pr3】支持
                【FF3.0 -- FF4b1】支持
                【Saf 4.0 -- Saf 5.0】支持
                【Chrome 4 -- Chrome 5】支持
                【Opeta 10.10 + Opeea 10.53 + Opeea 10.60】支持
         使用示例：
        screen.width
        screen.height

        三、文档视图(DocumentView)和元素视图(ElementView)方法
        旗下有四个方法，如下：
        1.【elementFromPoint()】返回给定坐标处所在的元素。是个在目前而言，兼容性不错的方法
                【IE5.5 -- IE9 pr3】支持
                【FF3.0 -- FF4b1】支持
                【Saf 4.0】不正确
                【Saf 5.0】支持
                【Chrome 4 -- Chrome 5】支持
                【Opeta 10.10】不正确
                【Opeea 10.53 + Opeea 10.60】支持
        document.elementFromPoint(100,100)打印html结构
        这个方法可以用来检测元素是否发生重叠或是碰撞。
        
        2.【getBoundingClientRect()得到 边角 丁 当前 矩形  [得到矩形元素的界线，返回的是一个对象，包含 top, left, right, 和 bottom四个属性值，大小都是相对于文档视图左上角计算而来。返回内容类似于]：
        {
            top: 143,
            right: 1196,
            bottom: 164,
            left: 889
        }
                【IE5.5 -- IE9 pr3】支持
                【FF3.5 -- 4b1】支持和修改 在FireFox 6下的测试，元素偏移客户端的上下值是可以得到的
                【FF6】支持
                【Saf 4.0 -- Saf 5.0】支持
                【Chrome 4 -- Chrome 5】支持
                【Opeta 10.10 + Opeea 10.53 + Opeea 10.60】支持
          该方法与下面即将展示的getClientRects()方法是近亲，两者都为“Range接口”方法。
          某些版本的IE浏览器的文档根元素默认是有2px边框，用这个替代比较好
          【$("")[0].getBoundingClientRect().top – $("html")[0].clientTop;】
          
        示范:
        $('#test')[0].getBoundingClientRect().topt.left);
        能获取top,right,bottom,left,width,height
        
        3.【getClientRects()】返回元素的数个矩形区域，返回的结果是个对象列表，具有数组特性。这里的矩形选区只针对inline box，因此，只针对a, span, em这类标签元素，这个下面会详细讲述。首先看看该方法的兼容性表：
                【IE5.5 -- IE6】有bug
                【IE8 -- IE9 pr3】支持
                【FF3.5 -- 4b1】部分支持
                【FF6】支持
                【Saf 4.0 -- Saf 5.0】支持
                【Chrome 4 -- Chrome 5】支持
                【Opeta 10.10 + Opeea 10.53 + Opeea 10.60】支持
        对于按照规范来走的浏览器，点击demo页面右半区域的文字部分，就会弹出一些文字（显示的个数就是文字的行数），例如，我的浏览器下就显示“2个矩形”，如下截图：
        
        IE6,IE7下的bug
        getClientRects()方法是跟着line box模型走的，其返回的每个矩形区域歧视就是一个line boxes，也就是一行文字内容。如果您对inline box模型不熟悉，可以在我博客右上区域的搜索框中搜索“inline box模型”，会有几个相关的文章，里面基本上都有所介绍的。

        也就是说，例如一段文字在一个span标签下，如果这个span标签内的文字有两行，则getClientRects()返回的就是含有两个Rect对象的列表；如果文字是三行就三个。

        然而，在IE6, IE7浏览器下，其返回的区域个数像吃了激素一样，完全不受控制，数目多得很，都不知从哪儿冒出来的！

        IE6, IE7还有一个文字，就是按照定义，如果是block水平标签内的文字，不过文字有多少行，返回的都是这个block水平的标签区域。但是，IE6, IE7却不走寻常路，反而“正常模样”地返回行数等。例如上面的demo页面，如果把span标签换成p标签，则其他所有浏览器返回的列表个数是1，就IE6,IE7返回的是文字行数相等的矩形区域。

        总结为，IE6, IE7把针对inline水平标签的方法应用到block水平的标签上了，而inline水平标签像弃婴一样，仍在一旁，bug横生啊。

        【getClientRects和getBoundingClientRect差异】
        getClientRects返回的其实是个数组，数组中有很多个类似getBoundingClientRect返回的对象。getBoundingClientRect返回的永远是最外框框的那个矩形区域相关的坐标偏移对象；而getClientRects是多行文字区域的坐标偏移集合，在非IE浏览器下，只对inline水平的标签有反应。
        
        一般getBoundingClientRect方法用的多一点。我们可以很容易获取某个元素的偏移值。甚至高宽都能很轻松的计算出来。所以，下载你想用js获取元素的高宽尺寸，就可以试试getBoundingClientRect方法了。

       4. 【scrollIntoView()】 让元素滚动到可视区域（不属于草案方法）。兼容性如下：
              scrollIntoView()
                【IE5.5 -- IE9 pr3】支持
                【FF3.0 -- 4b1】支持
                【Saf 4.0 -- Saf 5.0】支持
                【Chrome 4 -- Chrome 5】支持
                【Opeta 10.10 + Opeea 10.53 + Opeea 10.60】支持
        element.scrollIntoView()
        点击demo页面上的按钮，高高图片下面的有蓝色粗糙质感背景的框框就显示出来的。此方法的兼容性甚是不错。这为我们实现元素的锚点跳转功能又敞开了另外一条途径。

        四、元素视图属性
        关于元素大小位置等信息的一些属性。有：
        1.【clientLeft和clientTop】表示内容区域的左上角相对于整个元素左上角的位置（包括边框）。其兼容性不错，如下：
                【IE5.5 -- IE9 pr3】支持
                【FF3.0 -- 4b1】支持
                【Saf 4.0 -- Saf 5.0】支持
                【Chrome 4 -- Chrome 5】支持
                【Opeta 10.10 + Opeea 10.53 + Opeea 10.60】支持 
        2.【clientWidth和clientHeight】 表示内容区域的高度和宽度，包括padding大小，但是不包括边框和滚动条。兼容性跟上面一样
                        同上
        3.【offsetLeft和offsetTop】表示相对于最近的祖先定位元素（CSS position 属性被设置为 relative、absolute 或 fixed 的元素）的左右偏移值。兼容性如下表：
                        同上
        4.【offsetParent】第一个祖定位元素（即用来计算上面的offsetLeft和offsetTop的元素），兼容性让人欣慰：
                        同上
offsetParent元素只可能是下面这几种情况：
        <body>
        position不是static的元素
        <table>, <th> 或<td>，但必须要position: static。
        在本demo例子中，页面是没有任何定位元素，于是，点击按钮后返回的就是body标签了。
        HTML代码：
        <button id="button1">点击弹出本按钮offsetParent的标签名</button>
        JS代码：
        document.getElementById("button1").onclick = function() {
            alert("标签名是：" + this.offsetParent.tagName.toLowerCase());
        };
        
        ※→:body元素为定位元素的终极boss，所以其上头就没有其他定位元素了。也就是说body元素没有offsetParent（尽管有时候html进入offsetParent链）。

        另外，在IE和Opera浏览器下，position: fixed的元素没有offsetParent。
        可以发现高度值多了6像素，这正好是上下3像素边框的高度值。
        5.【offsetWidth和offsetHeight】整个元素的尺寸（包括边框）。兼容性与上面一致  
        6.【scrollLeft和scrollTop】表示元素滚动的像素大小。可读可写。这个玩意貌似我们用得比较多     
                        同上
        7.【scrollWidth和scrollHeight】表示整个内容区域的宽高，包括隐藏的部分。如果元素没有隐藏的部分，则相关的值应该等用于clientWidth和clientHeight。当你向下滚动滚动条的时候，scrollHeight应该等用于scrollTop + clientHeight。
        兼容性有些微妙：
                【IE5.5 -- IE7】不正确
                【IE8 -- IE9 pr3】支持
                【FF3.0 -- 4b1】支持
                【Saf 4.0 -- Saf 5.0】支持
                【Chrome 4 -- Chrome 5】支持
                【Opeta 10.10 + Opeea 10.53】不正确
                【Opeea 10.60】部分支持 
        
        五、鼠标位置(Mouse position)
        1.【clientX】,【clientY】相对于window，为鼠标相对于window的偏移。在iphone上，这对值返回的位置就等同于下面要提到的pageX/Y
                【IE5.5 -- IE9 pr3】支持
                【FF3.0 -- 4b1】支持
                【Saf 4.0 -- Saf 5.0】支持
                【Chrome 4 -- Chrome 5】支持
                【Opeta 10.10 + Opeea 10.53 + Opeea 10.60】支持
         event.clientX 
         event.clientY
       
        2.【offsetX】, 【offsetY】表示鼠标相对于当前被点击元素padding box的左上偏移值，各个浏览器的兼容性五花八门，如下：
                【IE5.5 -- IE6】有BUG
                【IE8 -- IE9 pr3】支持
                【FF3.0 -- 4b1】不支持
                【Saf 4.0 -- Saf 5.0】border box
                【Chrome 4 -- Chrome 5】border box
                【Opeta 10.10 + Opeea 10.53 + Opeea 10.60】content box
        event.offsetX
        event.offsetY
        在IE7以及以下浏览器下，只有当当前目标元素为offsetParent是才计算坐标值，否则，它就会拿当前目标元素的offsetParent来计算。还有，当发现元素应用了position: relative后，IE会去寻找下一个offsetParent来计算offsetY，但又不是offsetX。是的，读两次，很蛋疼吧！
       
        3.【pageX】, 【pageY】为鼠标相对于document的坐标。IE6~IE8浏览器是不支持的。
                【IE5.5 -- IE8】不支持
                【IE9 pr3】支持
                【FF3.0 -- 4b1】支持
                【Saf 4.0 -- Saf 5.0】支持
                【Chrome 4 -- Chrome 5】支持
                【Opeta 10.10 + Opeea 10.53 + Opeea 10.60】支持
                
           event.pageX
           event.pageY
        对于支持的浏览器，返回的就是由鼠标点击位置决定的数值，对于不支持的浏览器，例如IE8，得到的就是undefined：
        
        4.【screenX】, 【screenY】 鼠标相对于显示器屏幕的偏移坐标。久违的兼容性过得去的属性：
                【IE5.5 -- IE9 pr3】支持
                【FF3.0 -- 4b1】支持
                【Saf 4.0 -- Saf 5.0】支持
                【Chrome 4 -- Chrome 5】支持
                【Opeta 10.10 + Opeea 10.53 + Opeea 10.60】支持
                
        在iphone中，这个属性基本上就等同于pageX/pageY，尽管通常会有1~2像素点差异。谁叫iphone的显示器区域跟window区域跟文档区域都是一样的呢？
        
        event.screenX
        event.screenY
        
        5.【x, y】相当于clientX/clientY。既然已经有了clientX/clientY，为什么还需要x, y呢？莫非是为了少写几个字母？谁知道呢！
                【IE5.5 -- IE7】支持
                【IE8 -- IE9 pr3】page X/Y
                【FF3.0 -- 4b1】不支持
                【Saf 4.0 -- Saf 5.0】支持
                【Chrome 4 -- Chrome 5】支持
                【Opeta 10.10 + Opeea 10.53 + Opeea 10.60】支持
====================================================================================
        clip:rect矩形剪裁只能作用于position:absolute的元素上。
==================================================================================== 
        搞清楚CSS单位px、em、rem、vh、vw、vmin、vmax?
        
        1、px：相对长度单位。像素px是相对于显示器屏幕分辨率而言的。
        2、em：相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸。 

        计算关系是这样的：

        body的font-size是继承自跟元素html，html的尺寸是浏览器默认尺寸14px；
        div1的font-size=1.5*14px = 21px;
        div2的font-size=1.5*21px = 31.5px;
        div3的font-size=1.5*31.5px = 47.25px;

        如果手动设置div2的font-size为40px，div3的font-size应该为1.5*40px = 60px。
        
        3、rem：相对长度单位。r’是“root”的缩写，相对于根元素<html>的字体大小。
        .div3{
            font-size:1.5rem;
        }
        此时div3的font-size = 1.5*14px = 1.5*html的font-size  
        
        4、vh and vw：相对于视口的高度和宽度，而不是父元素的（CSS百分比是相对于包含它的最近的父元素的高度和宽度）。
        1vh 等于1/100的视口高度，1vw 等于1/100的视口宽度。
        比如：浏览器高度900px，宽度为750px, 1 vh = 900px/100 = 9 px，1vw = 750px/100 = 7.5 px。
        很容易实现与同屏幕等高的框：.slide { height: 100vh;} 
        设置一个和屏幕同宽的标题，h1{font-size:100vw}，那标题的字体大小就会自动根据浏览器的宽度进行缩放，以达到字体和viewport大小同步的效果。

        5、vmin and vmax：关于视口高度和宽度两者的最小值或者最大值。
        比如，浏览器的宽度设置为1200px，高度设置为800px， 1vmax = 1200/100px = 12px， 1vmin = 800/100px = 8px。如果宽度设置为600px,高度设置为1080px, 1vmin就等于6px, 1vmax则未10.8px。
        有一个元素，你需要让它始终在屏幕上可见：
        .box { 
            height: 100vmin; 
            width: 100vmin;
        }
                
        deg：度（角度单位）
        grad：梯度（角度单位）
        rad：弧度（角度单位）
        turn：转（角度单位）
        ms：毫秒（时间单位）
        s：秒（时间单位）
        rem：根元素的字体大小（相对长度单位）
        vw：视区宽度（相对长度单位）
        vh：视区高度（相对长度单位）
        vm：视区宽度或高度的较小值（相对长度单位）
        ch：零宽度（呈现字体中零字形的宽度；相对长度单位
====================================================================================  
        像素【px】(pixels)
        　　在web上，像素px是典型的度量单位，很多其他长度单位直接映射成像素。最终，他们被按照像素处理
        英寸【in】(inches)
        　　1in = 2.54cm = 96px　　
        厘米【cm】(centimeters)
        　　1cm = 10mm = 96px/2.54 = 37.8px
        毫米【mm】(millimeters)
        　　1mm = 0.1cm = 3.78px
        1/4毫米【q】(quarter-millimeters)
        　　1q = 1/4mm = 0.945px
        点【pt】(points)
        　　1pt = 1/72in = =0.0139in = 1/72*2.54cm = 1/72*96px = 1.33px
        派卡【pc】(picas)
        　　1pc = 12pt = 1/6in = 1/6*96px = 16px
        
em表示元素的font-size属性的计算值，如果用于font-size属性本身，相对于父元素的font-size；若用于其他属性，相对于本身元素的font-size
        
        【em】:
        em表示元素的font-size属性的计算值，如果用于font-size属性本身，相对于父元素的font-size；若用于其他属性，相对于本身元素的font-size
        【rem】:
        rem是相对于根元素html的font-size属性的计算值
　　    兼容性: IE8-不支持
        默认地，浏览器的字体大小font-size是16px，也就是1rem=16px。而如果将HTML的font-size设置为100px，方便后续计算，不设置为10px是因为chrome下最小字体大小为12px
        【em】
        ex是指所用字体中小写x的高度。但不同字体x的高度可能不同。实际上，很多浏览器取em值一半作为ex值
        [注意]ex在实际中常用于微调
        【eh】
        ch与ex类似，被定义为数字0的宽度。当无法确定数字0宽度时，取em值的一半作为ch值
　　    兼容性: IE8-不支持
　　    [注意]ch在实际中主要用于盲文排版
        
     ※→ 视口相关相对长度单位
　　视口相关的长度值相对于初始包含块的大小。当初始包含块的宽高变化时，他们都会相应地缩放。然而，当根元素的overflow值为auto时，任何滚动条会假定不存在。
　　关于视口相关的单位有vh、vw、vmin、vmax4个单位
　　兼容性:IE8-不支持，IOS7.1-不支持，android4.3-不支持(对于vmax，所有IE浏览器都不支持)
　　[注意]黑莓错误的将其相对于视觉视口来计算；而safari奇怪地相对于html元素来计算，如果html中增加了内容，这两个单位也会发生变化
        【vh】
        　　布局视口高度的 1/100
        【vw】
        　　布局视口宽度的 1/100 
        【vmin】
　　    布局视口高度和宽度之间的最小值的 1/100
        【vmax】
　　    布局视口高度和宽度之间的最大值的 1/100
====================================================================================  
        结构伪类
        通过结构伪类，可以基于文档树中无法使用简单选择器或连结符选择的额外信息进行选择。
        下面的代码选择作为文档根的 E 元素。
        E:root 
        下面的代码选择作为其父级的第 n 个子级的 E 元素。
        E:nth-child(n)
        下面的代码选择作为其父级的第 n 个子级（从最后一个开始计数）的 E 元素。
        E:nth-last-child(n) 
        下面的代码选择作为其类型的第 n 个同级的 E 元素。
        E:nth-of-type(n) 
        下面的代码选择作为其类型的第 n 个同级（从最后一个开始计数）的 E 元素。
        E:nth-last-of-type(n)
        下面的代码选择作为其父级的最后一个子级的 E 元素。
        E:last-child 
        下面的代码选择作为其类型的第一个同级的 E 元素。
        E:first-of-type 
        下面的代码选择作为其类型的最后一个同级的 E 元素。
        E:last-of-type 
        下面的代码选择作为其父级的唯一子级的 E 元素。
        E:only-child
        下面的代码选择作为其类型的唯一同级的 E 元素。
        E:only-of-type
        下面的代码选择没有子级（包括文本节点）的 E 元素。
        E:empty
        目标伪类

        目标伪类选择引用 URI 的目标元素。段标识符用于标识页面中的位置，使用数字符号以及随后的锚点标识符组成，例如 http://www.example.com/mypage.html#section_3。
        下面的代码选择类 important 的 div 元素，该元素是引用 URI 的目标元素。如果文档的 URI 没有段标识符，则不存在目标元素。
        div.important:target
        UI 元素状态伪类

        UI 元素状态伪类用于选择处于特定状态（已启用、已禁用或已选择（选中））的 UI 元素（窗体控件，如单选按钮或复选框）。
        下面的代码选择已启用的 E 窗体控件元素。
        E:enabled
        下面的代码选择已禁用的 E 窗体控件元素。
        E:disabled 
        下面的代码选择已选择的 E 窗体控件元素。
        E:checked 
        : indeterminate 伪类选择无法确定其切换状态（既不是已选中（已选择），也不是未选中（未选择））的单选按钮和复选框。下面的代码选择无法确定其状态的 E 窗体控件元素。
        E:indeterminate
        注意   当前 CSS3 规范中不再定义 :indeterminate 伪类，但是许多常用浏览器仍支持该伪类。
        求反伪类

        求反伪类采用简单选择器作为参数，选择未被该参数选择的元素。下面的代码选择与简单选择器 s 不匹配的 E 元素：
        E:not(s)
        UI 元素段伪元素

        UI 元素段伪元素 ::selection 用于选择用户突出显示的任何页面部分，包括可编辑文本字段中的文本。此伪元素可以应用于 color 和 background-color 属性。下面的代码选择 E 元素中的任何用户选定文本。
        E::selection 
        注意   当前 CSS3 规范中不再定义 ::selection 伪元素，但是许多常用浏览器仍支持该伪元素。
====================================================================================
        expression context函数上下文
        如果变量与执行上下文相关，那变量自己应该知道它的数据存储在哪里，并且知道如何访问。这种机制称为变量对象(variable object)。
        变量对象(缩写为VO)是一个与执行上下文相关的特殊对象，它存储着在上下文中声明的以下内容：
            变量 (var, 变量声明);
            函数声明 (FunctionDeclaration, 缩写为FD);
            函数的形参
        　　
        例如:
        var a = 10;
         
        function test(x) {
          var b = 20;
        };
         
        test(30);
        对应的变量对象是：

        // 全局上下文的变量对象
        VO(globalContext) = {
          a: 10,
          test: <reference to function>
        };
         
        // test函数上下文的变量对象
        VO(test functionContext) = {
          x: 30,
          b: 20
        };
====================================================================================
　　    case案例
　　    Team团队
　　    一定不能遗漏的是数据的合法性,验证，健壮性是代码的重要指标之一
　　    (调研、分析、原型设计、架构、详细设计、编码、测试、bug修改、维护）
　　
        js中opener和parent的区别
        opener即谁打开我的，比如A页面利用window.open弹出了B页面窗口，那么A页面所在窗口就是B页面的

        opener，在B页面通过opener对象可以访问A页面。

        parent表示父窗口，比如一个A页面利用iframe或frame调用B页面，那么A页面所在窗口就是B页面的parent。在JS 中，window.opener只是对弹出窗口的母窗口的一个引用。比如：a.html中，通过点击按钮等方式window.open出一个新的窗口 b.html。那么在b.html中，就可以通过window.opener（省略写为opener）来引用a.html，包括a.html的 document等对象，操作a.html的内容。
        假如这个引用失败，那么将返回null。所以在调用opener的对象前，要先判断对象是否为null，否则会出现“对象为空或者不存在”的JS错误。
====================================================================================
        变量对象(缩写为VO)是一个与执行上下文相关的特殊对象，它存储着在上下文中声明的以下内容： 变量 (var, 变量声明);
        函数声明 (FunctionDeclaration, 缩写为FD);
        函数的形参
        这边的“函数的形参”是否需要注释一下为：
        若此执行环境为函数的执行环境，则“形参”即为该函数的参数； 
        若此执行环境为全局执行环境，则不包括“形参”
====================================================================================
 二.js的内部属性
      在上面的例子中，有的变量或属性能够删除成功，而有的变量或属性则无法进行删除，那是什么决定这个变量或属性能不能被删除呢。
      ECMA-262第5版定义了JS对象属性中特征（用于JS引擎，外部无法直接访问）。ECMAScript中有两种属性：数据属性和访问器属性。

      2.1 数据属性
      数据属性指包含一个数据值的位置，可在该位置读取或写入值，该属性有4个供述其行为的特性：
      . [[configurable]]:表示能否使用delete操作符删除从而重新定义，或能否修改为访问器属性。默认为true;
      . [[Enumberable]]:表示是否可通过for-in循环返回属性。默认true;
      . [[Writable]]:表示是否可修改属性的值。默认true;
      . [[Value]]:包含该属性的数据值。读取/写入都是该值。默认为undefined；如上面实例对象Person中定义了name属性，其值为’wenzi’,对该值的修改都反正在这个位置
      要修改对象属性的默认特征（默认都为true)，可调用【Object.defineProperty()】方法，它接收三个参数：属性所在对象，属性名和一个描述符对象（必须是：configurable、enumberable、writable和value，可设置一个或多个值）。
      
         2.2 访问器属性
          它主要包括一对getter和setter函数，在读取访问器属性时，会调用getter返回有效值；写入访问器属性时，调用setter，写入新值；该属性有以下4个特征：
          . [[Configurable]]:是否可通过delete操作符删除重新定义属性；
          . [[Numberable]]:是否可通过for-in循环查找该属性；
          . [[Get]]:读取属性时自动调用，默认：undefined;
          . [[Set]]:写入属性时自动调用，默认：undefined;

         访问器属性不能直接定义，必须使用defineProperty()来定义
         
        2.3 获取内部属性
            ES5为我们提供了【Object.getOwnPropertyDescriptor(object, property)】来获取内部属性。
            */
          var person2 = {name:'wenzi'};
          var desp = Object.getOwnPropertyDescriptor(person2, 'name'); // person中的name属性
          console.log(desp);    // {value: "wenzi", writable: true, enumerable: true, configurable: true}
====================================================================================
        三种编程命名规范（匈牙利命名法、驼峰式命名法、帕斯卡命名法）
        1 . 匈牙利命名：

        开头字母用变量类型的缩写，其余部分用变量的英文或英文的缩写，要求单词第一个字母大写。

        ex: 
        int iMyAge; “i”是int类型的缩写； 
        char cMyName[10]; “c”是char类型的缩写； 
        float fManHeight; “f”是float类型的缩写；

        其他： 
        前缀类型 a b by c cb cr cx,cy dw fn h i l lp m_ n np p s sz w （一一对应关系） 
        数组 (Array) 布尔值 (Boolean) 字节 (Byte) 有符号字符 (Char) 无符号字符 (Char Byte，没有多少人用) 颜色参考值 (ColorRef) 坐标差（长度 ShortInt） Double Word 函数 Handle（句柄） 整型 长整型 (Long Int) Long Pointer 类的成员 短整型 (Short Int) Near Pointer Pointer 字符串型 以 null 做结尾的字符串型 (String with Zero End) Word

        2 . 驼峰式命名法：

        又叫小驼峰式命名法。 
        第一个单词首字母小写，后面其他单词首字母大写。

        ex: 
        int myAge; 
        char myName[10]; 
        float manHeight;

        3 . 帕斯卡命名法：

        又叫大驼峰式命名法。 
        每个单词的第一个字母都大写。

        ex: 
        int MyAge; 
        char MyName[10]; 
        float ManHeight;

        4 . 还有些许其他的命名规范，如：下划线命名法，但是不是太常用，个人感觉可能是因为下划线位置太偏的事，不方便大量使用。综合各方面考虑，驼峰式命名法比较好，优势明显，事实上，目前使用驼峰式命名法的人也真的越来越多了。
====================================================================================
        如果某段代码有功能未实现，或者有待完善，必须添加“TODO”标记，“TODO”前后应留一个空格。例如：
        解释：
        TODO: 有功能待实现。此时需要对将要实现的功能进行简单说明。
        FIXME: 该处代码运行没问题，但可能由于时间赶或者其他原因，需要修正。此时需要对如何修正进行简单说明。
        HACK: 为修正某些问题而写的不太好或者使用了某些诡异手段的代码。此时需要对思路或诡异手段进行描述。
        XXX: 该处存在陷阱。此时需要对陷阱进行描述。
====================================================================================
       js事件兼容
                function addEvent(obj,type,handle){  
                    try {  // Chrome、FireFox、Opera、Safari、IE9.0及其以上版本  
                        obj.addEventListener(type,handle,false);  
                    } catch (e){  
                        try{  // IE8.0及其以下版本  
                            obj.attachEvent('on' + type,handle);  
                        } catch (e) {  // 早期浏览器  
                            obj['on' + type] = handle;  
                        }  
                    }  
                }
　　
        bad 坏的
        param 参数
        TODO 待办事项
        hasOwnProperty 
        Global 全局
        note 笔记
        
====================================================================================
        如果出现NaN?
        解决方法:
                查看+号是否多拼接了
====================================================================================
        // jquery自定义tap
          $(function () {
                $(document).on("touchstart", function(e) {
                    var $target = $(e.target);
                    if(!$target.hasClass("disable")) $target.data("isMoved", 0);
                });
                $(document).on("touchmove", function(e) {
                    var $target = $(e.target);
                    if(!$target.hasClass("disable")) $target.data("isMoved", 1);
                });
                $(document).on("touchend", function(e) {
                    var $target = $(e.target);
                    if(!$target.hasClass("disable") && $target.data("isMoved") == 0) $target.trigger("tap");
                });
            })
====================================================================================
        查找ftl文件方法:
       
        第一种:
        1.打开对应方法
       2.Ctrl + O搜索【loadTemplate()】打开加载模板接口,简化Ctrl + O搜索【load】
        3.选中【LOANMANAGEMENTENTERPRISE】按住Ctrl - 打开声明
        4.选中后面的【Ctrl + Shift + R】查找对应文件名,打开进行操作
        
        第二种:
        第一种第4步找不到文件
        1.【Ctrl Shift + R】搜索【template.xml】
       2.搜索文件名

        allSaleTemplate.ftl
        bidOrSale.js
        saleTempContainer.ftl 债权交易
====================================================================================
        优惠券不生效[优惠券无效]
        原因:
                优惠券ID不对
        解决方法:
                添加【couponId】
====================================================================================
        ST切换底部栏样式
        // 移除首页点击css类,添加默认css类
        $('.x-button-normal.x-button.x-sized').eq(0).removeClass('home_select').addClass('home');
        
        // 添加点击class类
        $('.x-button-normal.x-button.x-sized').eq(1).addClass('wdzh_select');

====================================================================================
        【ST隐藏滚动条】[st设置滚动][st设置滚动方式]
        
        → 第一种(CSS代码)
        /* 隐藏x方向滚动条 */  
        .x-scroll-bar-x.active {  
          width: 0px;   
        }  
        /* 隐藏y方向滚动条 */  
        .x-scroll-bar-y.active {  
          width: 0px;   
        }
        
        → 第二种(js方式):
        scrollable: {  
           // 注意横向竖向模式的配置，不能配错(horizontal横向)
            direction: 'vertical',  
           // 隐藏滚动条样式  
           indicators: false  
        }
====================================================================================
        st滚动事件
        {
            xtype:'dataview',
            fullscreen: true,
            scrollable: {
                direction:'vertical',
                scroller: {
                    listeners:{
                        scroll:function(){
                            console.log('[scrollable][on scroll]');
                        },
                        scrollend:function( scroller, x, y, eOpts ){
                            console.log('[scrollable][on scrollend]x='+x+', y='+y);
                        }
                    }
                }
            },
            
            
            第二种:
            var panel = Ext.getCmp('workInfo1'); 
            panel.getScrollable().getScroller().on('scroll', function(scroller, x, y){
                if (!isScroll) {
                    console.log(1);
                    isScroll = true;
                     if (!flag) {
                        scroller.scrollTo(0, 100)
                        flag = true;
                     } else {
                        scroller.scrollTo(0, 0);
                        flag = false;
                     }
                isScroll = false;
                }
            });
====================================================================================
       【EmEditor快捷键】
        禁止点击
                【Ctrl + Shift + R】
        删除当前行
                 【Ctrl + L】
        复制当前行
                 【Ctrl + Shift + Y】
        复制当前剪切板(不换行)
                 【Ctrl + J】
        设置标签
                【Ctrl + K】
                
        EmEditor保存书签
        【工具(T) -- 自定义(C) -- 文件 -- 保存光标位置与书签(S)】√
        
        
        选中【Alt + 鼠标左键】选择
        
        
        【Ctrl + Shift + Z】移动到上次编辑的位置.也可以右键【高级(N) -- 移动到上次编辑的位置(M)】
        【Ctrl + Shift + F8】开始进入垂直选择模式。
        
====================================================================================
　　    封装重复调用获取ajax属性值
	/*
		重复调用Ajax函数
		@param Interface {String} 需要请求接口
		@param getEle {Element} 需要添加内容的DOM元素
		@param getDataName {String} 需要获取的属性名,以.分割,若获取子对象内的属性,后面也以.属性名格式访问
		
	*/
	function $callAjaxs (Interface, getEle, getDataName) {
		// 得到请求接口
		var Interface = Interface;
		
		// 需要添加内容的DOM元素
		window.getEle = getEle;
		
		// 获取对象属性名
		var getDataName =  getDataName;
		
		// 开始ajax
		Ext.Ajax.request({ 
				 url : __ctxPath + Interface,
		         params: {
				    isMobile : "1"
		        },
		        
		        // 同步发布请求
		         async : false,
				 success : function(response) {
				 	var data =  JSON.parse(response.responseText);

				 	// 如果没有.,说明只访问一层属性名
				 	if(getDataName.indexOf('.') == -1) {
				 		// 给指定元素添加请求的json值
				 		$(window.getEle).html(data[getDataName]);
				 		
				 		// 销毁temp临时属性,以便重复调用
					 	delete window.getEle;
				 		
				 	} else {
						// 得到添加内容的DOM元素
						var getEle = window.getEle;
												
						// 若返回层级属性值.分割数组
						var splitArr = getDataName.split('.');
						
						// 保存拼接字符串
						var tempStr = '';
						
						// 保存最终返回数组格式访问属性值
						var resultStr = typeof data === 'object' ? 'data' : data;
						
						// 返回可执行结果
						var result = null;
						
						// 循环遍历分割数组
						for(var i = 0, len = splitArr.length; i < len; i++) {
							// 进行拼接
							tempStr += '["' + splitArr[i] + '"]';
						}
							// 返回最终访问属性值数组格式
							resultStr = resultStr + tempStr;
							
							// 将字符串转换成可执行代码
								result = eval('(' + resultStr + ')');
							
							// 给指定元素添加请求的json值
							$(getEle).html(result);
							
							// 销毁temp临时属性,以便重复调用
					 		delete window.getEle;
				 	}
				 }
		})
	}
====================================================================================
　　   senche touch ajax请求[ST ajax请求]
        一、请求方式Get、Post
        Ext.Aiax.request({
             url:'myUrl',
             method:'POST',
             params:{
                  username:'king',
                  password:'king'
             },
             callback:function(response){
                  console.log(response.responseText);
             }
        });

        请求自动地将param对象打包为form数据，是作为POST请求的一部分发送出去

        Ext.Aiax.request({
             url:'myUrl',
             method:'GET',
             params:{
                  username:'king',
                  password:'king'
             },
             callback:function(response){
                  console.log(response.responseText);
             }
        });
        当你发送一个GET请求时，许多web服务器将缓存一个应答，并总是将这个相同的应答发给你。这加快了web的速度，但有时这不总是我们想要的。
        所以，我们要破坏这个cache，也只需加上一个时间戳就可以达到目的了。目的是告诉web服务器这次请求是新的，不要缓存请求

        如果你想关闭这种处理，你只需设置disableCaching为false就可以了
        Ext.Aiax.request({
             url:'myUrl',
             method:'GET',
             disableCaching:false,
             params:{
                  username:'king',
                  password:'king'
             },
             callback:function(response){
                  console.log(response.responseText);
             }
        });

          二、根据Header改变返回数据格式
        web服务器可以根据Header头不同，回应JSON、XML、CVS数据

        下面获取JSON数据
        Ext.Aiax.request({
             url:'myUrl',
             method:'GET',
             headers:{"Content-type":"application/json"},
             params:{
                  username:'king',
                  password:'king'
             },
             callback:function(response){
                  console.log(response.responseText);
             }
        });

        三、callback回调
        当Ajax请求失败时，Ext.Ajax可以帮你指定所有场景下的callback回调函数
        Ext.Ajax.request({
             url:'myUrl',
             success:function(response){
                  console.log('请求成功');     
             },
             failure:function(response){
                  console.log('请求失败');
             },
             callback:function(response){
                  console.log('数据');
             }
        });
        当请求成功时，success函数首先会被调用，然后是callback函数。
        当请求失败时，failure函数会被调用，然后是callback函数。

        四、请求超时和中断
        当后台服务器响应时间过长而导致请求超时时。failure函数将会被调用，该函数的传递参数request对象中，timeout的属性为true
        Ext.Ajax.equest({
             url:'myUrl',
             failure:function(reqponse){
                  console.log(reqponse.timeout);
             }
        });

        缺省情况下，timeout值为30秒，但是你可以通过timeout设置该值，该值单位是毫秒
        var myRequest = Ext.Ajax.equest({
             url:'myUrl',
             timeout:5000,  // 5秒超时
             failure:function(reqponse){
                  console.log(reqponse.timeout);
             }
        });

        Ext.Ajax.abort(myRequest);
        上面代码中，超时处理函数将被调用，reqponse.aborted属性将设置为true。

        Ext.Ajax.request({
             url:'myUrl',
             failure:function(reqponse){
                  if(reqponse.timeout){
                       alert('Timeout','服务器超时');
                  }else if(reqponse.aborted){
                       alert('Aborted','请求终止');
                  }else{
                       alert('Bad','请求失败');
                  }
             }
        });
====================================================================================
        优化MyEclipse速度?[优化MyEclipse][MyEclipse优化]
        一;
        1.打开【.project】文件
        2,删除<nature>org.eclipse.wst.jsdt.core.jsNature</nature>
        3.sava保存

        二:
        【 窗口(W) -- 首选项(P) -- MyEclipse -- 验证(Validation)】执行验证时将运行指定的验证程序,将【构建】的√都去掉.
====================================================================================
        【MyEclipse设置主题】[MyEclipse主题][MyEclipse更换主题]
        http://www.eclipsecolorthemes.org/
        
        Sublime Text 3主题色
        http://www.eclipsecolorthemes.org/?view=theme&id=28524
        
        1.打开【myeclipse -> 帮助(help) -> install from site】将路径粘贴在这里。等待安装颜色主题。      
        【https://raw.github.com/guari/eclipse-ui-theme/master/com.github.eclipseuitheme.themes.updatesite】
        起名:theme
        【theme - https://raw.github.com/guari/eclipse-ui-theme/master/com.github.eclipseuitheme.themes.updatesite】
        
        2.选中【常规 - 外观 - 主题】为【Windows】,
              【当前主题(C))】为【缺省值(当前)】
        3.选中【常规 - 外观 - Edjtor Color Theme -- RecognEyes】
        4.【导入 - General(常规) - 首选项】选中epf后缀文件
        5.【常规 - 外观和字体 -- 基本 -- 文本字体 -- 编辑】 大小选中【12】确定
====================================================================================
        ST显示右图标
        在Tools.js定义
        
        Ext.define('hurong.navigation.View',{
          extend: 'Ext.navigation.View',
          xtype: 'hurongNavigationView',
          alias: 'hurong.navigation.View',
          push : function () { 这里定义以下判断,让其跳转}
        }
  
        // 这里进行判断页面
        if(a.$className == "" ) {
        	Ext.getCmp('login').setHidden(false);
        	mobileNavi.getNavigationBar().show();
        }
        
        // 使用通过每个页面的Ext.define('path',Object这里面进行使用);
        a : functionn (e) {}
====================================================================================
        cmd操作java文件 
        【javac 文件名.java】 编译,会生成同名的class类
        【Java 文件名】 查看结果
        【Javap 文件名】查看java代码
        
        引用类型Java得到类型的名称
        变量名.getClass().getName()
        
        判定引用类型是不是某个类可以用
        object变量名 instanceof ClassName里面有的类名
====================================================================================
         如何解除chrome对扩展安装的限制
-       【-enable-easy-off-store-extension-install】 
====================================================================================
          安卓引导图尺寸
          【400x800】 drawable-hdpi
          【240x320】 drawable-ldpi
          【320x340】 drawable-mdpi
          【720x1280】 drawable-xhdpi
          【1080x1920】 drawable-xxhdpi
====================================================================================
      ST更改点击更改效果[淡入弹出效果][ST更改效果][ST更改点击效果][ST滑动效果][ST切换效果][ST谈入谈出效果]
          1.打开【sencha-touch-all-debug.js】
          2.【Ctrl + L】 打开 【88501】
          3.把【duration】改成【350】 
                gaomimi降低切换的速度
          4.把【type】改【slide】
                gaomimi视图切换的方式
                        【cover】
                        【cube】
                        【fade】
                        【flip】
                        【pop】
                        【reveal】
                        【scroll】
                        【slide】
====================================================================================
       ST修改input获取焦点样式[ST修改input样式][input边框][修改input边框]
        把【mobile.css】的样式
        【input:focus】
        【select:focus】
        去掉
        
        jQuery清除focus边框隐藏
        // 用事件委托
	$(document).on('focus', 'input', function () {
	   	// 清除阴影
		$('input').css({
			'-webkit-box-shadow': 'none',
			'-moz-box-shadow': 'none',
			'box-shadow': 'none'
		})
	});
        
====================================================================================
        更改债权交易 - 已关闭 点击样式
        【#b6e1ff】
        【.x-list-normal .x-list-item.x-item-pressed.x-list-item-tpl, .x-list-normal .x-list-item.x-item-pressed .x-dock-horizontal】
        改成
        border-top-color: white;
        background-color: white;
        
       【.x-list-round.x-list-grouped .x-list-footer-wrap.x-item-pressed > .x-dock-body】
        改成
        background: white none;
====================================================================================
        [CSS样式类]
        CSS两字分别左右对齐
        【text-align-last: justify;】

        【移动端高清、多屏适配方案】

        设备像素比(device pixel ratio )
        设备像素比(简称dpr)定义了物理像素和设备独立像素的对应关系，它的值可以按如下的公式的得到：
        设备像素比 = 物理像素 / 设备独立像素 // 在某一方向上，x方向或者y方向
        在javascript中，可以通过
        【window.devicePixelRatio】 获取到当前设备的dpr。

        在css中，可以通过
        -webkit-device-pixel-ratio
        -webkit-min-device-pixel-ratio
        -webkit-max-device-pixel-ratio
        进行媒体查询，对不同dpr的设备，做一些样式适配(这里只针对webkit内核的浏览器和webview)。
            

        retina下，图片高清问题
        这个问题上面已经介绍过解决方案了：两倍图片(@2x)，然后图片容器缩小50%。
        如：图片大小，400×600;
        1.img标签
        width: 200px;
        height: 300px;
        2.背景图片
        width: 200px;
        height: 300px;
        background-image: url(image@2x.jpg);
        background-size: 200px 300px; // 或者: background-size: contain;
        
        二：background-size 在ie7\8的兼容写法：用filter滤镜
        css中加入一句：
        filter: progid:DXImageTransform.Microsoft.AlphaImageLoader(src='../img/justice.jpg',sizingMethod='scale');
        
        参数解释：
        src = "图片路径"，可以是相对，也可以是绝对；
        sizingMethod：“scale|crop|image” 可选项。字符串(String)。设置或检索滤镜作用的对象的图片在对象容器边界内的显示方式。
        　　crop：剪切图片以适应对象尺寸。 
        　　image：默认值。增大或减小对象的尺寸边界以适应图片的尺寸。 
        　　scale：缩放图片以适应对象的尺寸边界。

        PS:注意：如果设置了background-attachment:fixed;会是background-size属性失效
        
        这样的缺点，很明显，普通屏幕下：
        1、同样下载了@2x的图片，造成资源浪费。
        2、图片由于downsampling，会失去了一些锐利度(或是色差)。
        所以最好的解决办法是：不同的dpr下，加载不同的尺寸的图片。
        不管是通过css媒体查询，还是通过javascript条件判断都是可以的。
        那么问题来了，这样的话，不就是要准备两套图片了嘛？(@1x 和@2x)
        我想，做的好的公司，都会有这么一个图片服务器，通过url获取参数，然后可以控制图片质量，也可以将图片裁剪成不同的尺寸。
        所以我们只需上传大图(@2x)，其余小图都交给图片服务器处理，我们只要负责拼接url即可。
        如，这样一张原图：
        https://img.alicdn.com/tps/TB1AGMmIpXXXXafXpXXXXXXXXXX.jpg // 原图
        可以类似这样，进行图片裁剪：
        // 200×200
        https://img.alicdn.com/tps/TB1AGMmIpXXXXafXpXXXXXXXXXX.jpg_200x200.jpg
         
        // 100×100
        https://img.alicdn.com/tps/TB1AGMmIpXXXXafXpXXXXXXXXXX.jpg_100x100.jpg
        (ps: 当然裁剪只是对原图的等比裁剪，得保证图片的清晰嘛~)
        
        【rem = document.documentElement.clientWidth * dpr / 10】
        【rem = document.documentElement.clientWidth * window.devicePixelRatio / 10】
        
         html{font-size: 32px;}
        //iphone 6
        @media (min-device-width : 375px) {
           html{font-size: 64px;}
        }
        // iphone6 plus 
        @media (min-device-width : 414px) {
            html{font-size: 75px;}
        }
        */
        
        

        var dpr, rem, scale;
        var docEl = document.documentElement;
        var fontEl = document.createElement(‘style’);
        var metaEl = document.querySelector(‘meta[name=”viewport”]’);
         
        dpr = window.devicePixelRatio || 1;
        rem = docEl.clientWidth * dpr / 10;
        scale = 1 / dpr;
         
         
        // 设置viewport，进行缩放，达到高清效果
        metaEl.setAttribute(‘content’, ‘width=’ + dpr * docEl.clientWidth + ‘,initial-scale=’ + scale + ‘,maximum-scale=’ + scale + ‘, minimum-scale=’ + scale + ‘,user-scalable=no’);
         
        // 设置data-dpr属性，留作的css hack之用
        docEl.setAttribute(‘data-dpr’, dpr);
         
        // 动态写入样式
        docEl.firstElementChild.appendChild(fontEl);
        fontEl.innerHTML = ‘html{font-size:’ + rem + ‘px!important;}’;
         
        // 给js调用的，某一dpr下rem和px之间的转换函数
        window.rem2px = function(v) {
            v = parseFloat(v);
            return v * rem;
        };
        window.px2rem = function(v) {
            v = parseFloat(v);
            return v / rem;
        };
         
        window.dpr = dpr;
        window.rem = rem;
====================================================================================
            ST点击两次[ST点击两下]
            Tools.js  2199行
        	if(a.$className==this.getActiveItem().$className){
         			return; 
         		}else{
        			if(a.$className=="hrmobile.public.myhome.main"){
        				if(Ext.isEmpty(curUserInfo)){
        					ajaxgetuserid();
        				}
        				mobileNavi.getNavigationBar().hide();
        			} else if(a.$className == "hrmobile.public.myhome.index"){
        	            mobileNavi.setNavigationBar().show();
        			} else if(a.$className=="hrmobile.public.myhome.loanList"){
        				Ext.getCmp('login').setHidden(true);
        				mobileNavi.getNavigationBar().show();
        			} else{
        				Ext.getCmp('login').setHidden(true);
        			    mobileNavi.getNavigationBar().show();    
        			}
        				return this.add(a)
        			}
           
====================================================================================
        IOS打包[IOS发布][IOS上架]
        1.登录密码123456789
        2.打开MacOs,下方点击 【终端】进入cmd
        3. 输入【cd /Users/gaomimi/desktop/projectios】进入桌面存放项目目录
        4.输入【cordova create hello[项目存放的文件名] com.example.hello[项目包名] HelloWorld[项目名]】
        例如:
        【cordova create hbxtios com.example.hext hbxtios】
        5.【cd /Users/gaomimi/desktop/projectios/hbxtInvestor】 进入创建项目目录
        6.【cordova platform add ios】 添加ios项目
        7.压缩移动端页面和图标为【zip】后缀,然后双击解压
        8.【打开项目文件夹/platforms/ios/HelloWorld.xocdeproj】双击打开进入Xcode界面
        将【hrmobile】和【index.html】复制到【Staging】目录下的【www】文件夹中
        将引导图和图标的命名换成和原有的命名一样 删除原有文件后复制到文件夹中
        10.单击选中【Resources/Images.xcassets】,选择右上角第三个下图标的看size大小，拖动对应logo和引导图到里面
        双击是新窗口打开
        出现
        出现APACHE CORDOVA
        DEVICE IS EEREADY
        解决方法:
        替换安卓打包的【index.html】

        11.打开【https://developer.apple.com/】,选中【Account/Certificates,ldentifiers & Profiles】

        【https://developer.apple.com/account/ios/certificate/?teamId=RVKDYVT565】
        12.调试【Development】和发布【Production】 
        13.单击【Certificates/Development】调试，右上角+添加，然后选中【iOS App Development】iOS应用程序开发(签署iOS应用程序的开发版本。)
        14.点击【continue】持续
        15.再点击【continue】继续
        16.打开MacOs底部【Launchpad】启动,选择【钥匙串访问】
        17.上方选择【钥匙串访问 -- 证书助理 -- 从证书颁发机构请求证书...】
        18.选择储存在硬盘,用户电子邮件地址和CS电子邮件地址,随便填
        19.选择钥匙串文件【CertificateSigningRequest.certSigningRequest.】继续

        20.双击【ios_development.cer】

        重复13-19操作，选择【App Store and Ad Hoc】应用商店和临时，发布证书下载双击
        【ios_distribution.cer】

        21.单击【Identifiers/App IDs】，右上角+添加套装ID

        22.【App ID Description/Name】 添加项目名，不能有-和_,

        选择xcode【Display Name】

        比如

                【dhtzios】

        23.【App ID Suffix/Bundle ID】 添加签名。用公司网址+项目名
        比如：
            【com.example.dhtz】

        24.一直下一步
        25.单击【Devices/All】，右上角+添加
        26.【Register Device】填写内容
            Name填写项目名
            比如：p2p_jl_dhtz

        27.UDID需连接苹果手机查看，打开iTunes点击，右侧窗口左上角的小手机
        28.点击【序列号】切换UDID，右键【拷贝】
        比如：
        6247f2a423e6c6283a59abfe69b0313415e6cbeb

        28.点击【iContinue】下一步，【Register】
        
        29.单击【Provisioning Profiles/All】，右上角+添加
        30.选择【iOS App Development】，点击界面最下方的【Continue】。
        31.选择【Select All】，再点击【Continue】
        32.在【Profile Name】输入项目名，方便辨识
            比如：p2p_jl_dhtz
        33.点击界面最下方的【Continue】
        34.下载并双击【p2p_jl_dhtz.mobileprovision】- 选择【install】
        35.添加appID 
        打开Xcode选择左上角【Xcode = > Preferences  => Accounts】选择左下角+加号键 Add【Apple ID】

        36.选择【Apple ID】点击界面最下方的【Continue】输入苹果开发者账号,登录

        37.上方选择【Generic IOS Device】，下面选项卡选择第一个【General】
        38.在【Sioning】的【Team】选择【Apple ID】
        ※:最后一定要选一个证书,也就是苹果开发者账号

        39.新建APP,打开我的APP

        【https://itunesconnect.apple.com】

        【https://itunesconnect.apple.com/WebObjects/iTunesConnect.woa/ra/ng/app】

        40.套装id选择23步的Bundle ID
        41.类别选择【商务/财务】
        39.构建版本
        【xcode => product => Archive】
        
====================================================================================
        【苹果上架尺寸】[IOS上架尺寸][IOS引导图][IOS Logo]
        【logo】[logo]
                共19种尺寸
                20x20
                29x29
                30x30
                40x40
                50x50
                57x57
                58x58
                60x60
                72x72
                76x76
                80x80
                100x100
                114x114
                120x120
                144x144
                152x152
                167x167
                180x180
                1024x1024
                
                IOS 5.6和IOS 5-11 (29pt)
                        【29x29】
                        【58x58】
                        【87x87】
                        
                IOS 7 -11 (20pt)
                        【20x20】
                        【60x60】
                        
                IOS 7 -11 (40pt)
                        【40x40】
                        【120x120】

                IOS 5.6 (57pt)
                        【57x57】
                        【114x114】

                IOS 7.11 (60pt)
                        【120x120】
                        【180x180】
                        
                IOS 5.11 (29pt)
                        【30x30】
                        【58x58】

                IOS 7.11 (40pt)
                        【40x40】
                        【80x80】

                IOS 5.6 (50pt)
                        【50x50】
                        【100x100】

                IOS 5.6 (72pt)
                        【72x72】
                        【144x144】

                IOS 7.11(76pt)
                        【76x76】
                        【152x152】

                IOS 9.11(83.5pt)
                        【167x167】

                App Store IOS(1024pt)
                        【1024x1024】 必须有背景色,不能透明

        【引导图】[ios引导图][ios介绍图]
         共11种尺寸
		320x480
		640x960
		640x1136
		750x1334
		768x1024
		1024x768
		1125x2436
		1242x2208
		1536x2048
		2048x1536
		2208x1242
        PS:图片不能包含alpha通道或透明度
        
              
        iPhone X Portrait Ios 11+
                【1125x2436】Default-iOS11-812h@3x.png
        iPhone X Landscape 11+
                【1125x2436】
                
        iPhone  Portrait IOS 8+
                【1242x2208】（iPhone Retina HD 5.5″ ）
                【750x1334】（Retina HD 4.7″）

        iPhone Landscape IOS 8+
                【2208x1242】（Retina HD 5.5″）

        iPhone  Portrait IOS 7+
                【640x960】
                【640x1136】

        iPad  Portrait IOS 7+
                【768x1024】
                【1536x2048】

        iPad Landscape IOS 7+
                【1024x768】
                【2048x1536】

        iPhone  Portrait IOS 5,6
                【320x480】
                【640x960】
                【640x1136】
                
        iPad  Portrait IOS 5,6
                【768x1024】
                【1536x2048】

        iPad Landscape IOS 5,6
               【1024x768】
               【2048x1536】

报错:
        Your binary is not optimized for iPhone 5 - - New iPhone apps and app updates submitted must support the 4-inch display on iPhone 5 and must include a launch image referenced in the Info.plist under UILaunchImages with a UILaunchImageSize value set to {320, 568}. Launch images must be PNG files and located at the top-level of your bundle, or provided within each .lproj folder if you localize your launch images. Learn more about iPhone 5 support and app launch images by reviewing the 'iOS Human Interface Guidelines' at https://developer.apple.com/ios/human-interface-guidelines/graphics/launch-screen.
        
        你的二进制不优化的iPhone 5 -新的iPhone应用程序和应用程序的更新提交必须支持4英寸的显示屏iPhone 5，必须包括一个发射图像引用并在uilaunchimages与uilaunchimagesize值设置为{ 320, 568 }。启动图像必须是PNG文件位于您的束的顶层，或设置在每个。lproj文件夹如果你定位你的发射图像。通过回顾“iOS人机界面指南”在https://developer.apple.com/ios/human-interface-guidelines/graphics/launch-screen了解更多关于iPhone 5的支持和应用程序启动画面。

一旦这些问题得到纠正，然后你可以把修正后的二进制。


       适配iPhone 5         
        【320x568】
        命名为:【Default-568.png】
        拖动到
        【Resources】文件夹下
===============================================================中文崭新
        预览图[介绍图][IOS预览图][IOS介绍图] 
        5.5英寸【1242 x 2208】
        5.8英寸 【1125 x 2436】
        12.9英寸【2048 x 2732】
        PS:图片不能包含alpha通道或透明度
           ps保存时选择rgb的格式

        
        4.7英寸 【750 x 1334】
        4英寸   【640 x 1136】
        3.5英寸 【640 x 960】
        
===============================================================
        IOS启动图出现两次启动图

注释【staging -- config.xml 】文件下

    <feature name="SplashScreen">

        <param name="ios-package" value="CDVSplashScreen" />

        <param name="onload" value="true" />

    </feature>

===============================================================
        【苹果快捷键】[MacOS快捷键]
        
        window键盘改键⌘键为window键
        【⌘ + I】 打开属性
        【⌘ + T】 打开浏览器新标签
        【⌘ + Q】退出当前应用
        【⌘ + H】隐藏当前窗口
        【⌘ + M】 最小化当前窗口
        【⌘ + W】关闭当前窗口
===============================================================
        【苹果充值返回账户页】[苹果充值提现返回账户页][苹果提现返回账户页][苹果插件][cordova插件][MacOs插件]

        1.【Classes】目录复制【WebModal.h】和【WebModal.m】文件
        2.打开【Staging/config.xml】文件,将以下代码复制进去
          <feature name="webmodal">
                <param name="ios-package" value="WebModal" />
            </feature>
            <feature name="InAppBrowser">
                <param name="ios-package" value="CDVInAppBrowser" />
            </feature>
            
            
           百度搜索【 cordova inapp browser】
            
            访问外部链接
            【cordova plugin add cordova-plugin-whitelist】
            
            跳转第三方链接
            【cordova plugin add cordova-plugin-inappbrowser】
            
            
            使用方法:
                1.使用window.open(url, '_blank')打开页面
                2.cd到项目目录,输入上面插件地址就好
===============================================================
        ST获取url参数
        在动态获取方法里,拼接id + 自定义变量名,通过获取id和自定义变量名来获取想得到参数值
       【window['bidId_' + bidId + '_url'] = url;】
===============================================================
        WPS快捷键[表格快捷键]
        【Ctrl + Shift + ：】 输入当前时间
        【Ctrl + ：】 输入当前日期
        【Ctrl + 1】 打开当前表格单元格选项
        【Ctrl + A】 选定整个工作簿
        【Ctrl + B】 变粗体
        【Ctrl + I】 变斜体
====================================================================================
        js隐藏滚动条
         【document.documentElement.style.overflowY = 'hidden'】
====================================================================================
　　//user/isTelphoneBpCustMember.do?telphone=13333036035
　　telphone:13333036035
　　
　　验证码接口
　　//user/isRightCheckCodeBpCustMember.do?checkCode=24WH
　　checkCode:24WH
　　
====================================================================================
        【App提示升级】[App升级][App自动升级][安卓更新][安卓不更新]
        打开【src/com.hotent.mobile.invester/MainActivity.java】
        
        第一步:
        把private String localVersion;注释
        
        第二步:
        把private String localVersion;
        改成
        private int localVersion;
        
        第三步:
        把String getVersionName()
        改成int getVersionName()
        	
        第四步:
        把
        return packInfo.versionName;
        改成
        return packInfo.versionCode;
        
        第五步:
        检查是否更新版本
        if (info.getVersion().equals(localVersion)) {
        改成
        if (Integer.parseInt(info.getVersion()) <= localVersion) {
====================================================================================
         【App白屏】[App白屏][安卓App白屏][安卓白屏]
         
         第一种:
         1.引入文件不全或有引入地址报错
         2.打开【Init.js】将下面代码移到isApp == false下
         
         // 如果不是app的话也即使浏览器访问，或微信访问，就要先验证session
	if(!Ext.isEmpty(onePageType)&&onePageType!="1"){
		mobileNavi = Ext.create('mobile.Viewforregister',{recommandPerson:onePageType});
		mobileView.add(mobileNavi);
		return;
	}
        
        
        第二种:
        将以下代码
        <script type="text/javascript"> 
	       document.addEventListener("deviceready", function(){}, false);
	   		isLoaddataOfme = false;    
			//themeColor="#0062A7";
			//themecolor="#0062A7";
			// 浏览器访问
			//isApp = false;
			isApp = true;
			isweixin = false;
			
			// 是否IOS
			isIos = false;
			
			// 判断参数是否为空
			onePageType = null;
	
	       	// 本地 
	       	//var __ctxPath = "http://172.16.10.33:8049/p2p_heb_hbxt1";
	       	
	       	// 测试
	         var __ctxPath = "http://123.57.143.197";
	       	
	       	// 正式
	       	 //var __ctxPath = "http://www.zhongtuo99.com";
	       	
	       	
	           if (localStorage.getItem("__ctxPath") != null) {
	               __ctxPath=localStorage.getItem("__ctxPath");
	           }
       </script>
       
       以下代码下面
        <script type="text/javascript" src="hrmobile/util/check.js"></script>
        <script type="text/javascript" src="hrmobile/Init.js"></script>
        <script type="text/javascript" src="hrmobile/Tools.js"></script>
        <script type="text/javascript" src="hrmobile/Util.js"></script>
====================================================================================
        【App按返回键退出】[安卓按返回键退出][安卓返回键退出][返回键退出白屏][返回白屏]
        一.【Init.js】最下面添加以下代码
        ↓
        
        ①.不完善,会返回页面,按一次以上返回键,提示再点击一次退出
	curUserInfo = null;
	
	var quitflag = 0;
	     
	document.addEventListener( "deviceready", onDeviceReady, false);
	function onDeviceReady() {
	    navigator.splashscreen.hide();
	    // 注册返回键
	    document.addEventListener( "backbutton", eventBackButton, false);
	}
	function eventBackButton () {
		if (mobileNavi.pop()) {
		} else {
			quitflag++;
		}
		
		// 如果点击一下,给提示再点击退出
		if (quitflag >= 1) {
			if(window.plugins.toast){
			     window.plugins.toast.shortshow( "再按一次返回键退出程序" );
			}
		}
		setTimeout(function() {
		         quitflag = 0;
		}, 3000);
		
		// 如果按2次返回键,退出App
	    if (quitflag >= 2) {
	         navigator.app.exitApp();
	    }   
	}
        
        ↓
        ②.首页,点一下退出App,其他底部栏标签点击没反应,二级页面点击返回
	curUserInfo = null;
	
	var quitflag = 0;
	     
	document.addEventListener( "deviceready",onDeviceReady, false);
	function onDeviceReady() {
	    navigator.splashscreen.hide(); 
	    // 注册返回键
	    document.addEventListener( "backbutton", eventBackButton, false);
	}
	function eventBackButton(){
		
		// 获取变量里不同的参数进行判断
		switch (mobileNavi.getActiveItem().$className) {
			case "hrmobile.public.myhome.index":
				 if (mobileNavi.pop()) {
				 } else {
					 quitflag++
				 }
				if (quitflag == 1) {
					if(window.plugins.toast){
						navigator.app.exitApp();
					}
				}
				setTimeout(function() {
				         quitflag = 0;
				    }, 3000);
				
				 break;
			case "hrmobile.public.myhome.login":
			case "hrmobile.public.myhome.investManage":
			case "hrmobile.public.myhome.main":
				break;
			default :
				 if (mobileNavi.pop()) {
				 } else {
					 quitflag++
				 }
				if (quitflag >= 1) {
					if(window.plugins.toast){
				       window.plugins.toast.shortshow( "再按一次返回键退出程序" );
					}
				}
				setTimeout(function() {
				         quitflag = 0;
				    }, 3000);
				
				     if (quitflag >=2) {
				         navigator.app.exitApp();
				    }   
				break;
		}
	}
        
        ↓
        ③:移动端任何页面,点一下提示信息,点两下退出App
        curUserInfo = null;
	
	var quitflag = 0;
	     
	document.addEventListener( "deviceready", onDeviceReady, false);
	function onDeviceReady() {
	    navigator.splashscreen.hide();
	    // 注册返回键
	    document.addEventListener( "backbutton", eventBackButton, false);
	}
	function eventBackButton () {
		// 获取页面名称
		var pageNames = {
				0 : "hrmobile.public.myhome.login",
				1: "hrmobile.public.myhome.investManage",
				2: "hrmobile.public.myhome.loanList",
				3: "hrmobile.public.myhome.main",
				4: "hrmobile.public.myhome.help.helpMain"
		}
		
		// 获取变量里不同的参数进行判断
		if (mobileNavi.getActiveItem().$className == pageNames[0] 
			|| mobileNavi.getActiveItem().$className == pageNames[1]
			|| mobileNavi.getActiveItem().$className == pageNames[2]
			|| mobileNavi.getActiveItem().$className == pageNames[3]
			|| mobileNavi.getActiveItem().$className == pageNames[4]
		) {
			quitflag++;
		} else {
			quitflag++;
		}
		
		// 如果点击一下,给提示再点击退出
		if (quitflag >= 1) {
			if(window.plugins.toast){
			     window.plugins.toast.shortshow( "再按一次返回键退出程序" );
			}
		}
		setTimeout(function() {
		         quitflag = 0;
		}, 3000);
		
		// 如果按2次返回键,退出App
	    if (quitflag >= 2) {
	         navigator.app.exitApp();
	    }
	}
==========================================================================================

        二.打包的index.js引入以下
        <!-- 返回键提示 -->
        <script type="text/javascript" src="cordova.js"></script>
        <script type="text/javascript" src="cordova_plugins.js"></script>
 	<script type="text/javascript" src="hrmobile/plugins/Toast-Plugin.js"></script>
      
        放在
        <script src="hrmobile/resources/sencha-touch-all-debug.js"></script>
        之后
====================================================================================
       安卓启动白屏[安卓白屏][App白屏][启动图白屏][引导图白屏]
       1.在【index.html】里title标签下,加入以下代码
        <script type="text/javascript">
			Ext.Loader.setConfig({ disableCaching: false });
			Ext.Ajax.setDisableCaching(false);
        </script>
        
        2.【StartActivity.java】里61行
        // 手机慢的带一点白屏
        timer.schedule(task, 1500, 1500);
        
        完全无白屏
        timer.schedule(task, 2000, 2000);
       
       3.把【StartActivity.java】放入【src/com.hurong.invester】
       4.在【AndroidManifest.xml】文件里</application>上添加
                <activity android:name="com.hurong.invester.StartActivity"></activity>
====================================================================================
       安卓启动3秒[App3秒][启动图3秒][App启动图3秒][安卓启动图3秒] 金语格
       1【res/layout】文件下放入【start.xml】文件
       2.【res/drawable】文件下放入【skip.xml】文件
       3.在【MainActivity.java】里
        public void onCreate(Bundle savedInstanceState) {
                super.onCreate(savedInstanceState);
        下面添加
                Intent intent = new Intent(this,StartActivity.class);
		startActivity(intent);
                
       4.在【AndroidManifest.xml】文件里</application>上添加
                <activity android:name="com.hurong.invester.StartActivity"/>    
====================================================================================
        众拓贷:
        【svn://192.168.0.102/hurong/p2p/branch/proj/heb/hbxt】
        Credit@2017Admin
        SIX5Nc*SKCY9
        阿里云账号密码：账号【hushiliang@4008360070.com】 密码【ART.5shaozheng】  
        erp：【101.201.146.24】   【administrator】  密码【SIX5Nc*SKCY9】
        web: 【60.205.169.55】    【administrator】  
        数据库：【rm-2ze1a8e4jqdv2l97t.mysql.rds.aliyuncs.com】  
        账号【zjxt_db】  密码：【Credit@2017Admin】
        【SIX5Nc*SKCY9】  密码两个一样
        
        http://101.201.146.24:8181/hurong_proj_heb_hfyh/index.jsp#   
        正式后台  【admin】   【xiaozhengart】
        【www.zhongtuo99.com】  正式前台
        正式环境商户号：【0001210F0279678】   法人户：【17303285229】
        -----------------------------------------------------------------------------
        测试环境信息：
        IP:【123.57.143.197】 
                账号： 【administrator】   密码：【SIX5Nc*SKCY9】
        【http://123.57.143.197/】  测试前台    
                账号：【ztd002】  登录密码：【111111】  交易密码：【houye1111】
        【http://123.57.143.197:8181/hurong_proj_heb_hbxt/login.jsp】 
        测试后台   
                账号：【admin】
                密码：【xiaozhengart】
        测试环境法人户【17172489042】   登录密码  【jinrong123】
        -----------------------------------------------------------------------------
        ios开发者账号：账号：【zhongtuodai@zhongtuo99.com】 
        密码：【Zhongtuodai123】
        
        https://i.loli.net/2018/01/09/5a54334daddd6.png
        https://i.loli.net/2018/01/09/5a54334e4bfdf.jpg
 
        -----------------------------------------------------------------------------
        恒丰正式环境操作员账号：【HBXTD001b】
        密码【xt888888】
        
        众拓贷服务号：
                【303446439@qq.com】
                【zhongtuodai000】

        账号:【c15897601927】
        密码:【1】
　　
　　    光大银行卡号
　　            【6226661203661552】
　　    招商银行卡号[银行账号]
　　            【6225880156977777】
　　            【622588015687****】 后四位自定义
　　           6225880156871139
　　           6225880156871138
　　           6225880156871137
　　           6225880156871136
　　           6225880156871135
　　           6225880156871134
　　           6225880156871133
　　           6225880156871132
　　           6225880156871131
　　           
　　   广悦 320381199302149231	男	24	江苏省 徐州市 新沂市
　　   池晓蕾 210103199106274187	女	26	辽宁省 沈阳市 沈河区
　　   郝白凡 14080219910616132X	女	26	山西省
　　   何仙婷 140202199204080467	女	25	山西省 大同市 城区
　　   从凝珍 42108319930506594X	女	24	湖北省 荆州市 洪湖市
　　   安建华 53290119920329833X	男	25	云南省 大理白族自治州 大理市
　　   曹颜 51152519910313085X	男	26	四川省 宜宾市 高县
　　   卞彤 441502199401138670	男	23	广东省 汕尾市 城区
　　   康志红 110105199305302346	女	24	北京市 市辖区 朝阳区
　　   
【mobile.css】
　　提取/充值按钮背景设置
　　.data-time .btn
　　
　　累计收益下方横线属性
　　.user-num
　　

    融融理财背景色:#e62129
    众拓贷背景色:#1EC3B2　　
　  购买按钮背景色,修改钱数字体色:#FF7626
　　账号总览-资产/收益:#40C8B8
　　
http://localhost:8049/p2p_heb_hbxt/codecreate.do?sms_code_type=bind_telphone&telphone=13333036035&randomCode=0.5252564298138871&token=

        sms_code_type => bind_telphone
        telphone  => b 13333036035
        randomCode  => b 0.5252564298138871
        token:

        //返回
        phone => 111111
        remark => 1
        result : 1
        status : 200
        success : true
        
        获取验证码
        java:
                【CreateRandomRemate.java】
        方法:
                【code】

        资金信息[FundInformation]
        Fund information
        交易信息[TransactionInformation]
        Transaction information
        收益信息[EarningsInformation]
        Earnings information

       【Java实体指不带Action后缀文件】
       【Java实体 映射文件 指在不带Action后缀文件生成get和set方法】
        
        个人直投标：
        借款账户
                【zhongji1】
        投资账户
                【zhongjit2】
                【zhongjit3】
                
        个人债权标：
        借款账户
                【zhongji2】
        债权账户
                【zhongt11】
        投资账户打包
                【zhongjit5】
                【zhongjit6】
                
        企业账号
                【zhaozhao】
        
        充值账号
                【xiantuotj3】
                 【18700002222】
        短信验证码:
                【0000】
        
        提现账号
                【aa111111】
        支付密码:
                【nana123456】
        短信验证码:
                【0000】
                
                 【zhaozhao123】
                
        【wangmiaomiao】 手机:【13582170529】 邮箱:【 525797595@qq.com】
        
        guoya1
        
        客户测试账号:
        其他账号:
        账号【ztd002】          密码【111111】
        账号【yiyi123】         密码【yiyi321】
        账号【ztd007】          密码【111111】
        账号【ping123】         密码【ping123】
        账号【hao456】          密码【hao123】
        账号【zhaoyujiao】      密码【zhaoyujiao087】 投标有问题
        账号【ze801yango】      密码【zeyang123】 我的借款  已结清状态有数据的账号
        账号【houye11】         密码【111111】 测最大优惠券面值
        账号【houye10】         密码【111111】 测账户 - 借款管理
        账号【s13604544788】 
        账号【xueyaoshuang1】  密码【123456q】
        账号【ztd007】         密码【111111】 加息劵
        账号【ztd008】         密码【111111】 优惠券
        账号【ze801yang】      密码【zeyang123】
        账号【guang123】  密码【guang456】

        
        中冀app：苹果开发者账号和密码
        账号：【zhongtuodai@zhongtuo99.com】
        密码：【Zhongtuodai123】

        苹果客服热线	400-670-1855
        苹果开发者中心
         
         解决方案中心
                https://itunesconnect.apple.com/WebObjects/iTunesConnect.woa/ra/ng/app/1315570438/platform/ios/resolutioncenter
         
        个人信息存放数据库:】
                 【ob_system_account】

       查询第三方认证
                【thirdPayFlagId】

        // Banner图查询
        数据库:
                【p2p_bannerlink】
        PC页面:
                【index.ftl】
        Java类:
                【LoginAction.java】
        方法名:
                【/indexBannerlogin.do】
                【/index.do】
        查询方法路径:
                【Struts.xml】

        底边栏
        首页:
        接口①:/user/isSessinonValidBpCustMember.do
        接口②:/creditFlow/financingAgency/listPlBidPlan.do
        需传参数:
                limit:5
                page:1
                isMobile:1
        返回:
                result :[]
                success:true
                totalCounts:26
        
        加载:【View.js】hurong.navigation.View
             【bottomBarIndex.js】hrmobile.public.myhome.related.bottomBarIndex
             【index.js】hrmobile.public.myhome.index
        
        
        
        账户:
        接口:/user/mobileaccountBpCustMember.do
        需传参数:
                isMobile:1

        消息管理
        接口:/message/getUserAllOaNewsMessage.do 
        需传参数:
                isMobile:1
                page:1
                start:0
                limit:10
        返回 : result



        充值和提现[充值/提现][充值金额][提现金额]
                【toFastRecharge.ftl】
        充值方法
        
        
       // 查询计划金额和加入人数
        PlManageMoneyPlanServiceImpl.java 中setDetail()方法
        
        // 为用户赚取
        curentInte
        
         投资 - 众拓理财计划详情PC页面
         PC页面:
                【newmmplan_content.ftl】
        
        
        我要理财PC页面[散标投资PC页面]
                【bid_list.ftl】
        
        招标信息详情PC页面[散标投资PC页面][散标详情PC页面][散标投资详情PC页面]
        个人:
        PC页面:P_Dir
                【persionDirBid_content.ftl】
        PC页面:P_Or
                【persionOrBid_content.ftl】
        企业:
        PC页面:B_Dir
                【businessDirBid_content.ftl】
        PC页面:B_Or
                【businessOrBid_content.ftl】
               
        账户 - 理财计划 - 持有中 - 债权 - 债权清单PC页面[债权清单详情PC页面][招标信息详情PC页面]
                【persion_lineChildren.ftl】    个人
                【business_lineChildren.ftl】   企业
        
        债权交易PC页面[债权交易列表PC页面]
                【alltransferinglist.ftl】
        
        债权交易 - 债权详情PC页面[债权交易详情PC页面][债权详情PC页面][投标记录PC页面]
                【bid_saleInfo.ftl】
                
        招标信息 -风控流程和审核资料
         PC页面:P_Dir
                【persionDirBid_content.ftl】
        
        
         我的 -- 散标投资PC页面[我的散标PC页面]
                【myFinancePurchase.ftl】
        
        我的 -- 散标投资 --回款中 -- 回款计划PC页面:
        PC页面:
                【payment_plan.ftl】

        理财计划-持有中-债权PC页面
        PC页面:
                【claims.ftl】35行
        
        借款管理:[借款管理PC页面]
        PC页面:
                【loan_management.ftl】
                145行
                招标中借款PC页面[已完成]:413行
                已结清借款PC页面[已完成]:413行
        借款详情:
        PC页面:
                【persionDirBid_content.ftl】
        提前回款:
        PC页面:
                【advanceLoan.ftl】
        
        借款管理 - 已结清 - 还款计划PC页面
                【loan_payment_plan.ftl】
        
        贷款类型
        PC页面:
                【financeCenter.ftl】
                
        个人/企业借款
         PC页面:
                【applyPersonFinance.ftl】
         
        开通第三方
        PC页面:
                【toThirdReg.ftl】
        
        我要投标
        PC页面:
	        【popup.ftl】

        PC参数
        期数 payintentPeriod
        计划金额 planPaymentsMoney
        实际金额 factPaymentsMoney
        计划到账日 intentDate
        计划到账日 intentDate
        实际到账日 factDate
        
        
        挂牌交易PC页面:
                【canTransferingList.ftl】
        个人账户 - 债权交易 -- 可交易 挂牌交易PC页面[交易信息PC页面][债权交易PC页面]
                【orStartTransfer_form.ftl】
                计算js:
                        【bidOrSale.js】
                计算js方法:
                        【signMoney】277行
                
                挂牌js:
                        【bidOrSale.js】 transferFormPhone
                
        个人账户 - 债权交易 -- 交易中PC页面
                【transferingList.ftl】
                
        个人账户 - 债权交易 -- 已关闭
                【closeedList.ftl】
                
                
        投资  - 理财计划 - 立即购买PC页面
                确认购买信息PC页面
                【newmmplan_content.ftl】
        js:
                【sign.js】
                【checkShow】方法
                
        自动投标PC页面:
                【automatic_bid.ftl】
                
        开启自动投标
        /user/openBidAutoBpCustMember.do?whetherOpen=1&retUrl=user/automaticbidBpCustMember.do

        取消自动投标
        /user/closeBidAutoBpCustMember.do

        
        散标投资 数据库[投标详情]
                【pl_bid_plan】
        
        借款管理查询
        PC页面:
                【loan_management.ftl】
        
        个人账号[个人账户][个人中心][我的][个人信息pc页面][授权PC页面][自动授权PC页面]
        PC页面:
                【leftsidebar_user.ftl】
                
        站内消息
        PC页面:
                【messageList.ftl】
        js文件:
                【message.js】
       删除站内信（单个删除）
                【deleteMessage】
       
        理财计划 - 加入记录PC页面
                【newmmplan_content.ftl】
                
        
        招贤纳士PC页面
                【careers.ftl】
        联系我们PC页面 
                【contact.ftl】
        帮助中心的详情PC页面
                【help_content.ftl】
        
        
       [回调][第三方回调][回调方法][第三方回调方法][java回调][java第三方回调][java回调方法][java第三方回调方法]
       Hengfeng.java 恒丰接口
      充值方法:【PayAction.java】
                【rechargea】
      提现方法:【PayAction.java】
                【withdraws】
      第三方充值提现方法 【HengfengServiceImpl.java】
                【deposit】
        
       超类
        【HengfengService.java】
        
        示范:
        public String[] depositApp(BpCustMember bp, String amt, String basePath, String type, String orderNum, String isMobile);
                
      金账户免app登录快速充值 
                方法:【HengfengServiceImpl.java】
                类:【depositApp】
      回调方法
                方法:/thirdPay/pageUrlThirdPayInteface.do
                类:pageUrl
                
                【ThirdPayInterfaceAction.java】
                
        新手标[新手体验-模拟投资][体验标][体验标PC页面]
        PC页面:
                【bid_list.ftl】
         
         接口:
                /creditFlow/financingAgency/getExperienceDetailPlManageMoneyPlan.do
                
         体验标详情[体验标招标详情页][体验标招标详情页PC页面]:
         PC页面:
                【experience_content.ftl】
         马上投标方法:
                【sign.jsl】
          体验标优惠券列表[优惠券列表]
          类:
                【BpCouponsAction.javal】
          方法:
                【listByExperiencel】
          
          体验标 - 投标记录详情:
                【bid_saleInfo.ftl】
          
         众拓理财计划PC页面:
                【alltransferingList.ftll】
                其他
                【newmmplan_content.ftl】
         公告:
         PC页面:
                【leftsidebar_aboutus.ftl】
         接口:
                /article/newslistArticle.do?lid=30
                
         Java类:
                【ArticleAction.java】
         方法:
                【newslist】
         
         公告列表点击样式
                【cssP2p.css】
                【.listitems_select】 187行
                
         资金总览PC页面
                【myHome.ftl】
        
         账户 - 理财计划PC页面[我的理财PC页面]
               【mmplanManage.ftl】
              
         账户 - 理财计划 - 回款计划PC页面
                【assigninterestlistDetail.ftl】
                【newMmplanManage.ftl】
          js文件:
                【mmplan.js】
                【mmPlanRender.js】21行
                 
          回款计划方法
                【clickAssigninterest】46行
          
          账户 - 理财计划 - 持有中 -退出PC页面(提前支付PC页面)
                【mmplanManage.ftl】
                js:
                【mmplan.js】
                js方法:
                【clickearlyout】70行
         还在锁定期，不能提前支取
                【mmplan.js】
          账户 - 理财计划 - 持有中 -退出 - 提前支取PC页面
                【earlyOutDetail.ftl】21行
         
        投资 - 债权交易 - 购买PC页面
                购买债权PC页面
                【orStartTransfer_form.ftl】
        js:
                【bidOrSale.js】
        点击元素[计算]:
                【#transferFormbuy】177行1
                【signMoney】方法 218行
                
        投资 - 债权交易 - 购买债权 - 回款计划
        js:
                【payment.js】
        点击方法:
                【clickFinancing】
                
                
         账户 - 账户信息PC页面
                【editUserInfo.ftl】
                
        回款计划
        /user/paymentplanBpCustMember.do?str=3052,Repaymented
        
        提前还款
        /user/advanceLoanBpCustMember.do?bidPlanId=3110
        /pay/toEarlyRepaymentByLoanerPay.do?planId=3110&notMoney=0.00
        
        账户 - 我的积分PC页面
                【bpactivityList.ftl】
           所在js
                【editUserInfo.js】
           方法
               【sel()】
                
       账户 - 我的积分 - 积分记录PC页面     
                【bonusRecordList.ftl】
                
       账户 - 散标理财管理PC页面[散标理财PC页面]
         账户 - 散标理财管理 -- 回款中PC页面
                【myFinancePurchase.ftl】
====================================================================================   
        java API类[java模板类]:
                【DynamicConfig.java】
       
       移动版模板[移动版ftl模板]
         
         PC通知模板:
                【message.ftl】
         移动端通知模板[移动端模板][移动端ftl模板][手机版模板][手机版ftl][app模板]
              【mobilemessage.ftl】
               
               放到【WebRoot/hrmobile/plugins/】文件内
====================================================================================     
        充值App刷新方法[安卓充值][App充值][App提现][安卓返回账户页][App返回账户页]
               【WebActivity.java】
               【AndroidManifest.xml】
               【WebModal.js】
               【config.xml】
               
               将
               【WebModal.js】
               放到【WebRoot/hrmobile/plugins/】文件内
====================================================================================     
                删除安卓充值导航条[删除安卓navbar][删除安卓nav]
                1.注释【WebActivity.java】以下代码
       		webImage = (ImageView) findViewById(R.id.webImage);
		webText = (TextView) findViewById(R.id.webText);
		webImage.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				WebModal.webcallback.error("取消操作");
				WebActivity.this.finish();
			}
		});
                还有
                webText.setText(webtitle);//设置标题
                2.【res/layout/webactivity.xml】 选择API 22;Android 5.1.1
                3.注释【<RelativeLayout>】到【</RelativeLayout>】
====================================================================================
                去掉App导航条[去掉App导航]
                1.注释【WebActivity.java】以下代码
                webText = (TextView) findViewById(R.id.webText);
                
                webText.setText(webtitle);//设置标题
                2.【res/layout/webactivity.xml保留
                <WebView
                        android:id="@+id/webact" 
                        android:layout_width="match_parent"
                        android:layout_height="match_parent"/>
                    <ImageView
                        android:id="@+id/webImage"
                        android:layout_width="28dp"
                        android:layout_height="28dp"
                        android:layout_marginTop="10dp"
                        android:src="@drawable/ic_action_previous_item"/>
              去掉【<LinearLayout></LinearLayout>】
              
               3.【AndroidManifest.xml】
                将
                        android:theme="@style/AppTheme" >
                修改为
                        android:theme="@android:style/Theme.NoTitleBar">
====================================================================================
        项目部--吉林东汇投资 P2P+ERP+移动端（安卓+ios）常青树
        前台：101.200.58.32   用户名 administrator 登录密码:liuguang031.
        
        吉林省东汇投资有限公司	erp+db服务器	47.94.89.232	远程桌面	administrator	liuguang031.	
	吉林省东汇投资有限公司	web服务器	101.200.58.32	远程桌面	administrator	liuguang031.
        
        svn地址：
        svn://192.168.0.102/hurong/p2p/branch/proj/jl/dhtz
        svn://192.168.0.102/hurong/erp/branch/proj/jl/dhtz

        服务器：
        前台IP：101.200.58.32
        后台IP：47.94.89.232
        密码：liuguang031.

        正式环境：
        前台  http://www.cqscaifu.com/
        后台  http://47.94.89.232/hurong_proj_jl_dhtz/index.jsp#

        测试环境：
        前台：http://101.200.58.32:8080/test_web/
        后台：http://47.94.89.232:8182/erp_test/login.jsp

        // 配置测试成功
        FuiouTestEnvironment.properties
        
        isCheckCard

        支持第三方绑定账号
        	【zhanxintz】
        	【aaa111】
        	【xichen】
        
        企业 B_Dir
                【ljx18724672712】
                【liuguang】
        
        测试地址:
                【chenhx】
                【123456】 提取密码也是
        
        有合同账号:
                账户【sunyuxue11】【15765521215】     密码【sunyuxue11】
                
                
        zhang456
        s13604544788 手机号:18845485567
        
        
        东汇：苹果开发者账号
               【760001108@qq.com】
        密码
                【Lyq891108】
        https://i.loli.net/2018/01/11/5a572d9e0b0bf.jpg        
                
        给他们上架吧
        https://itunes.apple.com/cn/app/%E5%B8%B8%E9%9D%92%E6%A0%91/id1322910920?mt=8
        https://itunes.apple.com/cn/app/常青树/id1322910920?mt=8
        
        资金明细PC页面:
                【detailsFunds.ftl】
        
        回调方法
                【ThirdPayInterfaceAction.java】
        
      手机验证:
		/user/jumpBpCustMember.do?regType=telphone
       邮箱验证:
		/user/jumpBpCustMember.do?regType=email

	第一步
	验证码:
		/user/isRightCheckCodeBpCustMember.do
	参数:checkCode <= 手动输入验证码
 
	第二步:
	获取验证码:
		/user/checkUerSendMegBpCustMember.do?telphone=13582170529	
	确定:
		/gotoUpdatePasswordreg.do?uuid=undefined
	
       第三步
       提交新密码
		/user/resetPasswordBpCustMember.do
      模板名:updatePassword.ftl
      
      
      
      个人信息[个人账户]:
                【myHome.ftl】
                
      绑定第三方支付PC页面:
                【thirdPay.ftl
      交易信息PC页面[第三方交易信息PC页面][第三方交易密码PC页面]:
                【updateUserDealPwd.ftl】
      账户提现 - 交易密码[账户提现页面]
                【userGetCashBySelect.ftl】
      账户充值PC页面:
                【userRecharge.ftl】
       下一步js:
                【recharge.js】      
          
      更换手机号码PC页面:
                【changeLoginPassword.ftl】
        
        
        标信息详情 - 相关材料 - 详细PC页面[查看PC页面]
                【businessDirBid_content.ftl】
                
       [项目进程PC页面]加入人数PC页面
        D债权:
                【newmmplan_content.ftl】
        U债权:
                 【uplan_content.ftl】
                 
        账户 - 我的投资 - 回款中 - 回款计划PC页面
                【payment_plan.ftl】
====================================================================================
          金交在线
                客户svn:
                       svn://116.62.72.238/svn/p2p/jjzx_web
                用户名hurong_dengzk    密码hurong_dengzk!
                
                前台网址：http://118.31.129.112/ 
                后台网址：http://118.31.129.112:9090/heb_jjzx/login.jsp

                这是金交在线正式环境的pc地址
                
                测试环境：

                阿里云登录名：金交在线8688  阿里云密码：gongxing01
                数据库：
                链接地址;rm-8vb1e7mwft39g1886o.mysql.zhangbei.rds.aliyuncs.com
                用户名：heb_jjzx
                密码：Credit2015Admin
                Linux 服务器;
                前台 47.92.116.172    root			jjzxcs123@	
                后台 47.92.90.97   root			jjzxcs321@	
                ---------------------------------------------------------------------
                正式环境
                阿里云生产服务器 账号：qq42174131   jjzx2017!

                远程连接密码   ssh 账号密码root  密码：jjzxcs321@ 
                p2p_01     116.62.73.49      957590   
                p2p_02     116.62.72.238     792327
                erp        116.62.73.102     362291
                ----------------------------------------------------------------------------------------
                测试环境信息：
                http://47.92.116.172/   账号：houyetz2  密码： 111111  交易密码：houye1111
                http://47.92.90.97:8181/hurong_proj_heb_jjzx/login.jsp;                                            admin    1
----------------------------------------------------------------------------------------------------------
                ios  
                开发者账号【wangqi@chinaifae.com】
                密码: 【13011588618wW】
----------------------------------------------------------------------------------------------------------------
                http://118.31.129.112/  正式前台
                http://118.31.129.112/  正式前台
                https://www.chinaifae.com:9091/index.jsp#   正式后台
-------------------------------------------------------------------------------------------------------------
金交在线存管号：10160
-------------------------------------------------------------------------------------------        
           svn用户名:hurong_panjh
           svn密码:hurong_panjh!
           
           svn用户名:hurong_dengzk
           svn密码:hurong_dengzk!
           
           svn用户名:hurong_wangxh
           svn密码:hurong_wangxh!
           
           svn用户名:hurong_zhangwl
           svn密码:hurong_zhangwl!
------------------------------------------------------------------------------------------- 
                【houye1】   【111111】 不能用
                【luoxiao】  【aaaaaa】
                【houye5555】
                【yanyingqiao】
                【aaaaaa】
                【hebizhi】
                
                账号【qq111222】  密码:【1】
                
                账号【leizhifei】  密码:【aaaaaa】
          企业账号
                【alibaba】
          
          客户账户:
                账号【shidaizhou】【xiecaijing】
                密码【aaaaaa】
                交易密码【11111aA】
                 
                银行验证码 
                充值是【666666】
                提现是【123456】
                
                账号【shidaizhou】
                密码【aaaaaa】
                
                绑定银行卡
                账号【yinmingshan】 
                密码【aaaaaa】
                交易密码【11111aA】
                
                账号:【huxuanxue】              密码:【aaaaaa】
                账号:【zhaoangxiao】            密码:【aaaaaaa1】 借款人
                账号:【dengyuanye】             密码:【aaaaaa】 客户企业账号
                账号:【wanghaoze】              密码:【aaaaaaa1】 投资人账号
                账号:【linyongjin】             密码:【aaaaaa】 投资人账号
                挂牌人:【linyongjin】
                购买人:【yuqingdanv】
                账号:【shinanyu】               密码:【aaaaaa】
                账号:【18601224625】            密码:【aaaaaa】
         
                企业开户qiyekaihuapp01  aaaaaa
                债权交易zuohexian  aaaaaa
                hanmeng  
         
          绑定银行卡账号
                【houyetz7】
               短信验证码:
                【666666】

                银行卡列表PC页面
                【smstelph,ftl】

            用户在商户下不存在
            
            解决方法:
                把本地的商户号改成测试环境
                【HuifuTestEnvironment.properties】
                src/com/thirdPayInterface/Huifu/HuifuUtil/HuifuTestEnvironment.properties

                替换
                【MerPrK.key】
                
                中国银行卡号
                【6214850212331630y】
                
                个人信息 -资金信息PC页面
                        【myHome.ftl】
                        
               账户 - 债权交易 - [可交易债权PC页面][交易中债权PC页面][已卖出债权PC页面][已购买债权PC页面][已关闭交易PC页面][债权转让PC页面]
                       【allSaleTemplate.ftl】
                       【saleTempContainer.ftl】
                       
             开通银行存管账户PC页面       
                【thirdPay.ftl】个人
                【thirdPayEnterprise.ftl】企业
                
              绑定js
                【thirdPay.js】 16行 个人
                【thirdPay.js】 99行 企业
                        获取二级市 377行

            注册PC页面
                【reg.ftl】
            注册js文件
                【newregister.js】
                
            账户提现PC页面[银行卡列表PC页面][银行卡列表PC页面]
                 【bankList.ftl】
             
             账号 -  用户开始评估PC页面[风险测评PC页面]
                【toAccess.ftl】
                
            公司介绍PC页面[信息披露PC页面]
            
             债权交易PC页面
                【allSaleTemplate.ftl】
             结算清单PC页面[交易信息PC页面]
                【orStartTransfer_form.ftl】
            
            
            
            
            
            
            
            
            
====================================================================================
              window.open乱码[跳转乱码]
              1、JS客户端编码
                var selStr=document.getElementsByName('selStr')[0].value;
                    selStr=encodeURI(encodeURI(selStr));
                    window.open('printWindow.do?bm=j&selStr='+selStr+'');

                注意：编码的时候需要使用两次encodeUri，写一个就是？？？？号，写两个则输出: %4d%5a这种

                2、服务器端解码:

                String tempSelStrs=request.getParameter("selStr").toString();

                String selStr=java.net.URLDecoder.decode(tempSelStrs,"UTF-8"); 
====================================================================================
                【java解码】[URLDoBase64解密]
                1.打开
                        【LangFangBankInterfaceUtil.java】
                2.选中解密URLDoBase64字符串
                3.右键【Debug As - JUnit测试】
                        Debug As调试
                        JUnit:Java语言的单元测试框架
               4.看控制台打印解密文本
====================================================================================
        中发展信-管家金服[升升投]
        
        
        测试环境：http://47.94.131.13:8182/erp_test/login.jsp
        http://47.94.173.28:8181/test_web/
        https://www.sstol360.com


        下面是正式环境的
        https://www.zxzbol.com/
        https://www.sstol360.com 
        
        借款人：ceshiaiye 111111
        投资人：chenhx 111111
        交易密码都是 111111J
        
        需要连客户服务器
        发展信（北京）投资管理有限公司	
        erp服务器	
                47.94.131.13	
                远程桌面
                【administrator】
                【ZhanXinZiBen2203!】
                
                
       中发展信（北京）投资管理有限公司 
        erp服务器 47.94.131.13 远程桌面 administrator ZhanXinZiBen2203! 
        中发展信（北京）投资管理有限公司
        web服务器 47.94.173.28 远程桌面 administrator ZhanXinZiBen2203!
        
        账号【chenhx】  密码【123456】
        
        第三方:
                富滇(dian)银行
        交易密码：【111111Jk】  
        校验码 【9999】
        
        借款账号
                账号【ceshiqiye】  密码【123456】 

                
               散标投标无法调整第三方: 
               thirdPay_fudian_notifyIp=localhost\:8080/
                这个给他 让他加到 
                FuDianTestEnvironment.properties这个文件的最下边，然后端口号让他自己改一下
                
                
      上架应用宝
      http://op.open.qq.com/manage_centerv2/android?owner=987618133&uin=987618133
      
      账号:
        【987618133】     
      密码:
        【yy20150206】
      
      【16 x 16】 大小20K以内，PNG格式的图片
      【512 x 512】大小200K以内，JPG、PNG格式，建议使用直角图标
      【480 x 800】 请上传2-5张截图（尺寸保持一致），单张图片不超过1M。截图不能小于320*480像素，推荐480*800像素。JPG、PNG格式。
====================================================================================
        小猫种钱
测试：
        江杭州周庆经济信息咨询有限公司
        ERP服务器+DB	zjzqgy.8866.org:9998	远程桌面	administrator	zqxm0754.	
	web服务器: www.xxmmzzqq.com   hurong   hurong123
正式：
        浙江杭州周庆经济信息咨询有限公司	
        ERP服务器	114.55.56.118	QQ远程	administrator	rw5x@*[X_zq
        web服务器: www.xxmmzzqq.com   hurong   hurong123
        
        项目编码：hurong_proj_zj_zqzceq  端口号：8245 参考版本：主干6.0  第三方：富有
        svn://192.168.0.102/hurong/p2p/branch/proj/zj/zqzceq_new

        正式服务器密码：rw5x@*[X_zq
        测试服务器的密码：zqxm0754.
-----------------------------------------------------------------------------
        测试前台：http://www.xxmmzzqq.com:8183/ 小猫种钱测试地址
        测试后台：http://zjzqgy.8866.org:8245/login.jsp   admin  yuseen
        
        正式地址:
                https://xxmmzzqq.com/
                https://114.55.56.118/
                http://www.xxmmzzqq.com:8184/login.jsp
                admin  yuseen
                
                
                
        账户
                【zhouqing123】  密码:【123456】
                【zhouqing1234】
                【jiekuanren123】
                【13264391752】
                【hxx111】
                
        账号:【testwuhuimin】        密码:【123456】
        账号:【zhengbj】        密码:【123456】
             【wuhuimin】
             【xiaomao】
             【chenmm】
             【zhangdw】
             【wsj123】
        
                
       正式环境：
        账号:【chenqichao】        密码:【123456】
====================================================================================
        爱钱来[沈阳云创项目]
        
        本地前台： http://192.168.0.106:13340/hurong_proj_ln_ycgy_web/#
        本地后台：http://192.168.0.106:8340/hurong_proj_ln_ycgy/login.jsp
        客户正式环境前台地址：http://47.92.77.127/
        客户正式环境ERP地址：http://47.92.5.186:8181/hurong_proj_ln_ycgy/login.jsp
        客户远程地址：47.92.5.186
        47.92.77.127
        用户名administrator
        密码是Qianhaizerun123
        

        svn://192.168.0.102/hurong/p2p/branch/proj/ln/ycgy_invertor_android
        
        账户
                【zhenzhen】 
                【rttz02】
                【rttz01】
       
       提现充值账号
                【18810762222】
       短信验证码
                【111111】
       
       合同下载,数据多(账户中心散标,理财计划,债券交易)
              账号【18810745322】       密码【111111】
              账号【huanggh】           密码【111111】
                
       index PC页面[首页PC页面]
                【index.ftl】122行
                【web.xml】 323行
                【/indexlogin.do】
      平台数据
                 【/platShowMobilelogin.do】
      最新D计划:
                 【/experiencePlanMobilelogin.do】
                 
     优惠券PC页面
                【myCoupons.ftl】
     实名认证PC页面
                【userAuthenticate.ftl】
                
     绑定银行卡PC页面   
                【bankCardBind.ftl】
==================================================================================== 
        诸葛亮金服-河南金语格P2P
        
        svn://192.168.0.102/hurong/p2p/branch/proj/hen/jyg
               
        http://www.gsxt.gov.cn/%7BqNidDuk1xs15vtFazKGSK5dP_O2eMbpjQiXA-B8QZ8Jpys_JaHJck26uY4aWbq1jQdI8IhIfhFso86SWMlh_wSdPeXUvBV85tAwQ6Zz-36QrNjL8pwTrLwH-KQGxdilgCwXSMczufb4Q2rhjZG09BthPPSISal7WGPrNDlUlCl0-1519894903411%7D
        阿里云账号  jinyuge001   密码 zhugeliang001
        服务器密码：Zzjyg#7654$
        -----------------------------------------------------------------------------------------
        正式前台服务器：
        ip：39.104.58.206
        账号:administrator
        密码：Zzjyg#7654$
        正式后台服务器：
        ip：39.104.58.211
        密码：Zzjyg#7654$
        ---------------------------------------------------------------------------
        测试服务器：
        ip：39.104.55.227
        账号:administrator
        密码：Zzjyg#7654$
        -------------------------------------------------------------------------
        http://192.168.0.106:13341/hurong_proj_hen_jyg_web/    192测试前台
        http://192.168.0.106:8341/hurong_proj_hen_jyg/login.jsp;   192测试后台
        ------------------------------------------------------------------------
        漫道短信账号：SDK-HRY-010-00018  密码：1fd509-Ecd1  特服号：521807
        -------------------------------------------------------------------------------------------------------
        正式前台：http://39.104.58.206
        正式后台：http://39.104.58.211:8181/hurong_proj_hen_jyg/index.jsp    、
        admin    zzjyg9876
        ---------------------------------------------------------------------------------------
        test前台：http://39.104.55.227/test_web/
        test后台：http://39.104.55.227:8181/erp_test/login.jsp
           admin   1
        ------------------------------------------------------------------------------------------------------
        付款操作员：商户代码：0004910F1049170，操作员代码：DSF049170czy，操作员密码：F14LK32I。登录地址:https://fht.fuiou.com
        ----------------------------------------------------------------------------------------------------
        金语格ios
        IOS ID  【1720038986@qq.com】
        密码：  【Jinyuge1705】
         
        
        ios被拒解决方法
        提交公司的营业执照和软件著作权图片
        回复:
        您好！我已经提交了公司的营业执照和软件著作权图片。以此来证明此款APP是我们公司开发的。在此再次申明一次。诸葛亮金服这款APP是我们郑州金语格网络科技有限公司的开发的APP。如果有什么疑问请致电（+86）18638198797 联系我们。或者邮箱1720038986@qq.com 我们的网址是 ：http://39.104.58.206 联系QQ 1720038986 请尽快联系我们 帮助我们上架

        手机号18638198797，QQ和邮箱1720038986
        
        houye111
        账号:
                houye111( 13520995309)
               
        密码:
                111111
        
         账号【p760704087】
         密码【peng760704087a】
        
        公众号：zzzhugeliang@126.com
        密码：jin66766701
        
        
        没有更多数据css样式
                【mobile.css】 294行
          
          
         【CSS文本两端对齐】 text-align:justify;      
        .justify_fix {
            display: inline-block;
            width: 100%;
            height: 0;
            overflow: hidden;
        }
===================================================================================
        云南中业普惠
                【svn://192.168.0.102/hurong/erp/branch/proj/gd/zyxrcd】
        erp_gd_zyxrcd
===================================================================================
        信全
        东莞市信全汽车租赁
        
        新项目：东莞市信全汽车租赁有限公司   车抵贷+尽调审批安卓ios
        代码模板：标准车抵贷f
        信全汽车:erp_gd_xqqc
    
        测试地址:
                http://192.168.0.106:8342/hurong_proj_gd_xqqc/login.jsp
        
        测试远程:    
        ip:120.79.181.225    用户名:root 密码:Xq123456
====================================================================================
        个股期权
                API:
                        http://www.sopss.com/swagger-ui.html#/
                
                正式地址;
                        http://manage.zhangleoption.com/app/sops.html
        账号:13011111112
             13011111113
             13011111114
        密码:111111
        短信验证码:5555
        
        账号:13011111114
             13011111115
        密码:222222
        
        机构代码:gk3pd5gdp2
====================================================================================
                华远永达（北京）网络科技有限公司    互联网金融+安卓+ios
                项目编码：hurong_proj_bj_hyyd
                钱简单
                正式前台 10.0.0.2	root     Qjd.com@2018
                正式后台/数据库  10.0.0.3	root     Qjd.com@2018
---------------------------------------------------------------------------------------------------------
        测试服务器（测试环境前台，后台，数据库）10.0.0.4	root     Qjd.com@2018
---------------------------------------------------------------------------------------------------------
        测试erp
        http://10.0.0.4:8181/erp_test/index.jsp#
         测试web
        http://10.0.0.4:8080/web_test/
        正式web
        http://119.90.53.155/
        华远远达 正式erp
        http://119.90.53.155:8181/hurong_proj_bj_hyyd/login.jsp     账户： admin  密码：   1
        ---------------------------------------------------------------------------------------------
        短信账号密码 1NJE6Z
        账号169936

        华远永达的项目信息
        one111
        zhaiwei
        
        融融理财(测试)
        http://192.168.0.106:13310/hurong_proj_zj_rtd_web/indexp2pmobile.html
        融融理财(正式)
        https://116.62.227.62/indexp2pmobile.html
        
        跳板机：远程windows服务器登陆地址及密码：
        119.90.53.154:43289
        administrator
        HUAyuan806@2017
        
        
        测试用
        账号【gaoxuejiao】      密码【111111】
        账号【jialullu】        密码【111111】
        
       我要借款PC页面
           【financeCenter.ftl】
       个人借款PC页面
            【financeCenter.ftl】63行
       个人借款PC页面
            【financeCenter.ftl】163行
       提交js:
            【financeCheck.js】
       个人借款提交方法
            【savePer】450行
       企业借款提交方法
            【saveBusiness】506行
       
       
        IOS ID :1720038986@qq.com
        密码：Jinyuge1705
====================================================================================
        天匣易贷二期
        svn://192.168.0.103/hurong/proj/gd/txyd
        
        天匣易贷	erp服务器	120.76.247.237		administrator	Ht-88txyd.com	
	天匣易贷	p2p服务器	120.76.202.166		administrator	Gw-txyd88.com
        
        正式;
                http://www.txyd88.com/hurong_proj_gd_txyd/indexp2pmobile.html
        旧版:
                http://weixin.txyd88.com/indexp2pmobile.html
        前台
        http://weixin.txyd88.com/
        weixin.txyd88.com
        
        // 微信正式地址
        http://www.txyd88.com/indexp2pmobile.html
        http://weixin.txyd88.com/hurong_proj_gd_txyd/indexp2pmobile.html
        
       公众号:
                【2748679398@qq.com】
       密码:
                【irisdudtjf2015】
                
       【微信公众号绑定管理员】[微信公众号][微信绑定公众号]
       
       【第一步骤】:                            
       1.登录https://mp.weixin.qq.com/
       2.点击左侧【设置 - 安全中心】
       3.点击右侧【管理员和运营者设置】的【详情】
       4.进【绑定运营者微信号】,点击【运营者管理】下的【绑定运营者微信号】
       5.请选择要绑定的时长选中【长期】,输入自己微信号
        ※:必须自己的微信号先关注公众号
       6.点击【邀请绑定】
       7.让客户的公众号管理员扫码同意 ←必须
        
        【第二步骤】:
        1.点击左侧【设置 - 基本配置】
        2,右侧【公众号开发信息】下【IP白名单】点击【查看】
        3.打开【https://ip.cn/】复制ip
        4.打开查看IP白名单,点击【修改】
        5.把复制的ip粘贴,点击【确认修改】
        6.管理员或长期运营者微信号扫描
        7.添加白名单ip成功

        【第三步骤】:
        将正式地址服务器域名,绑定一级域名 ←必须
        
        【第四步骤】:
        1.点击左侧【设置 - 公众号设置】
        2.点击右侧【功能设置】
        3.点击【业务域名】和【JS接口安全域名】和【网页授权域名】后的【设置】
        4.把备案的域名添加进去(不能加http://)
                例如:www.txyd88.com
        5.点【保存】或【确定】
        6.打开【业务域名 - 设置】注意事项的3的【点击下载】,放在服务器项目的根目录
                比如放在【tomcat\项目文件夹\】
        
        【第五步骤】:
        1.把【weChat】文件夹复制到【src\com】内
        2.从其他项目把【项目目录\WebRoot\WEB-INF\lib】以下文件复制到【当前项目\WebRoot\WEB-INF\lib】里
                【httpclient-4.3.6.jar】
                【xmlpull-1.1.3.1.jar】
                【xstream-1.4.1.jar】
        3.打开【项目目录\WebRoot\WEB-INF\web.xml】文件,复制以下到【</web-app>】内,确保【servlet-class】内的路径正确
                选中后【Ctrl】键,看是否能打开相应java
        <!-- 微信start  -->
        <servlet>
            <servlet-name>
                WeixinMainServlet
            </servlet-name>
            <servlet-class>
                com.weChat.action.mobile.weixin.WeixinMainServlet
            </servlet-class>
        </servlet>
        <servlet>
            <servlet-name>
                WeixinGetOpenIdServlet
            </servlet-name>
            <servlet-class>
                com.weChat.action.mobile.weixin.WeixinGetOpenIdServlet
            </servlet-class>
        </servlet>
        <servlet>
            <servlet-name>
                WeixinNotifyServlet
            </servlet-name>
            <servlet-class>
                com.weChat.action.mobile.weixin.WeixinNotifyServlet
            </servlet-class>
        </servlet>
        <servlet>
            <servlet-name>
                WeixinCoreAction
            </servlet-name>
            <servlet-class>
                com.weChat.action.mobile.weixin.WeixinCoreAction
            </servlet-class>
        </servlet>
        <servlet-mapping>
            <servlet-name>
                WeixinCoreAction
            </servlet-name>
            <url-pattern>
                /WeixinCoreAction
            </url-pattern>
        </servlet-mapping>
        <servlet-mapping>
            <servlet-name>
                WeixinMainServlet
            </servlet-name>
            <url-pattern>
                /WeixinMainServlet
            </url-pattern>
        </servlet-mapping>
        <servlet-mapping>
            <servlet-name>
                WeixinGetOpenIdServlet
            </servlet-name>
            <url-pattern>
                /WeixinGetOpenIdServlet
            </url-pattern>
        </servlet-mapping>
        <servlet-mapping>
            <servlet-name>
                WeixinNotifyServlet
            </servlet-name>
            <url-pattern>
                /WeixinNotifyServlet
            </url-pattern>
        </servlet-mapping>
        <!-- 微信end -->
        
        4.打开【项目目录\src\struts.xml】文件,复制以下到【</struts>】内,确保【file】内的路径正确
        <!-- 微信配置 start-->
	<include file="com/weChat/xml/weChat.xml"></include>
	<!-- 微信配置 end-->
        
        5.打开【项目目录\src\conf\app-action.xml】文件,复制以下到【</beans>】内,确保【class】内的路径正确
        <!-- 微信 start-->
         <bean id="WeixinCommonAction" class="com.weChat.action.mobile.weixin.WeixinCommonAction" scope="prototype"/>
         <bean id="WeixinCoreAction" class="com.weChat.action.mobile.weixin.WeixinCoreAction" scope="prototype"/>
        <!-- 微信 end-->
        
        【第六步骤】:
        1.点击左侧【设置 - 基本配置】
        2.服务器配置(未启用) 右侧点击【修改配置】
        3.【URL】输入备案的域名,后面加回调的方法名
                例如:http://www.txyd88.com/WeixinCoreAction
          【Token】输入项目名拼音(必须为英文或数字，长度为3-32字符。)
          【EncodingAESKey】点随机生成
        填写服务器配置
        
        
        【第?步骤】:   
        查看access_token[获取access_token]
        https://mp.weixin.qq.com/debug/cgi-bin/apiinfo?t=index&type=基础支持&form=获取access_token接口 /token
        
        查看【appid】和【secret】
        url:
                https://mp.weixin.qq.com/debug/cgi-bin/sandboxinfo?action=showinfo&t=sandbox/index
        1.左侧【开发 - 公众平台测试账号】
        3.扫描登录
        3.复制【测试号信息】下的
                【appID】和【appsecret】
        
        GET请求:
        https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=【输入自己的】&secret=【输入自己的】
        示范:
 https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=wx14eb5d8be4fb9442&secret=f9b37c6c4ae424390151db83d853a2bb
        
        编辑器运行环境:
        【JavaEE 5.0 Genneric Library】
        【JRE 系统库[jdk1.6.0_43]】
        【引入lib包】
        
        测试后台地址;http://192.168.0.104:8249/hurong_proj_gd_txyd/login.jsp
        账号：admin    密码：1
        部署好了
        远程的还没有 现在只有测试的
        
        测试Web:
        http://192.168.0.104:8249/hurong_proj_gd_txyd/indexp2pmobile.html
        
        
        正式Web:
        http://120.76.247.237/hurong_proj_gd_txyd/indexp2pmobile.html
        
        SVN:
                dengzhikai
                dengzhikai@20180423
        
        修改轮播图小圆点
                【sencha-touch.css】
        默认未选中样式:
                【.x-carousel-indicator-dark span】6123行
            width: 14px;
            height: 14px;
            display: inline-block;
            border-radius: 100%;
            background: transparent;
            background: transparent;
            border: 2px solid #fedf4a;
            
        选中样式:
                【.x-carousel-indicator-dark span.x-carousel-indicator-active】6128行
            width: 14px;
            height: 14px;
            display: inline-block;
            border-radius: 100%;
            background: #fedf4a;
            border: 0;


        ajax请求返回login.jsp页面
        解决:后台加了拦截器,不登录后台没法获取,改下拦截器就好
        
        
        ST弹框样式[ST弹框字体样式]
        CSS:
            【sencha-touch.css】
        CSS类:
           【.x-msgbox-dark .x-msgbox-text】5519行
           注释
           【text-shadow: rgba(0, 0, 0, 0.5) 0 -0.08em 0;】
         
         
        // JS校验是否含有中文（也包含日文和韩文）
        function isChineseChar(str){   
           var reg = /[\u4E00-\u9FA5\uF900-\uFA2D]/;
           return reg.test(str);
        }
        
   //--------------检查是否合法手机号码------------------
  function isMobile (mobile) {
 		if (mobile == null || mobile.length != 11) {
	        return false;
	    }
	    if (checkNUM(mobile) == 0) {
	        return false;
	    }
	    // 验证规则
	    var reg = /^1[3|4|5|7|8|9][0-9]{9}$/;
	    var reg2 = /^1[0-9]{10}$/; 
	    return reg2.test(mobile);
	  /*  var s = mobile.substring(0, 2);
	    if (s != "13" && s != "14" && s != "15" && s != "16" && s != "17" && s != "18" && s != "19") {
	        return false;
	    }
	    return true;*/
	 }
	 
	/*
	  	校验数字 
	  */
	 function checkNUM (NUM) {
		 var i, j, strTemp;
		 strTemp = "0123456789";
		 if (NUM.length == 0) return 0
		 for (i = 0; i < NUM.length; i++) {
		     j = strTemp.indexOf(NUM.charAt(i));
		     if (j == -1) {
		         return 0;
		     }
		 }
		 return 1;
	 }
         
	 /*
	  	============================== 获取小数2位  =======================================
	  */
	 function getFloatTwo (value, isType, Floatlength) {
	 	// 正则判断传入参数是否为数字
	 	 var patrn = /^\d+(\.\d+)?$/;
	 	 
	 	// 校验是否传入的是数字,和字符串数字
 		if (!patrn.test(value)) {
 			return false;
 		}
	 	
	 	// 判断是否需要返回指定类型小数
	 	var isType  = typeof isType == "undefined" ? 0 : isType;
	 	
	 	// 获取value,转化String类型进行操作
	 	var value = typeof value == "number" ? String(value) : value;
	 	
	 	// 判断是否指定类型
	 	var Floatlength = typeof Floatlength == "undefined" ? 2 : Floatlength;
	 	
	 	// 保存两位
	 	var RegStr = '^[\\+\\-]?\\d+\\.?\\d{0,' + Floatlength + '}';
	 	
	 	// 得到返回值
	 	var val = value.match(new RegExp(RegStr, 'g'));
	 	
	 	// 如果是0,返回字符串
	 	if (isType == 0) {
	 		// 返回
	 		return val.join('');
	 	} else if (isType == 1) { // 如果是1返回数字类型
	 		return Number(val);
	 	}
	 }
==================================================================================== 
        Java保存不上字段
        修改类型为【varchar】
====================================================================================
        px转vw
        iphone6宽度375计算，37.5/375=0.1，0.1 * 100=10,也就是10vw
====================================================================================
        [React Native][RN]
        
        npm install 时报错 Unexpected end of input at 1:15930
                【npm cache clean --force】
                
        React Native初始化项目时候报错？
        出现这个问题，可以试一下执行下面二行代码X
        npm config set registry https://registry.npm.taobao.org
        npm config set disturl https://npm.taobao.org/dist
        
        Con
        E:\Android\Local\Android\sdk
        
        安装react-native命令行工具React-native-cli
        【git clone https://github.com/facebook/react-native.git】
        【cd react-native/react-native-cli】
        【npm install -g】
        【react-native init AwesomeProject】 创建项目
        【node node_modules/react-native/packager/packager.js】
        
        
        新建RN项目:
        【react-native init AwesomeProject】
        【cd AwesomeProject】
        【react-native run-android】
        
        
        【react-native start】 或 【npm start】
        错误:
                ERROR  Packager can't listen on port 8081
        端口被占用
        【netstat -ano|findstr 8081】
        【taskkill  /pid  1572】
        
        
        夜神模拟器调试:
        1.启动 夜神模拟器安装路径\Nox\bin>nox_adb devices
           bin目录运行【nox_adb devices】
        将输出结果复制:
                比如:127.0.0.1:62001 device
        2.打开android-sdk目录\platform-tools
                【adb connect 127.0.0.1:62001】
       3.启动RN项目,在新建
                【react-native run-android】
                
                
          node
          git
          choco(Chocolatey)
          Yarn、React Native的命令行工具（react-native-cli）

        升级npm快捷键
                【npm install -g npm】
        Chocolatey安装
        第一种(cmd.exe安装)【管理员权限打开】
        Chocolatey
        @"%SystemRoot%\System32\WindowsPowerShell\v1.0\powershell.exe" -NoProfile -ExecutionPolicy Bypass -Command "iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))" && SET "PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin"
        
        
        环境变量 - 系统环境变量-添加
        变量名(N):【ChocolateyInstall】
        变量值(V):【C:\ProgramData\chocolatey】
        
       【Path】
        添加:
                【%ChocolateyInstall%\bin】
        
         环境变量 - 系统环境变量-添加
        变量名(N):【GRADLE_HOME】
        变量值(V):【D:\application\gradle-4.6】
        
       【Path】
        添加:
                【%GRADLE_HOME%\bin】
                
        环境变量 - 系统环境变量-添加
        变量名(N):【ChocolateyInstall】
        变量值(V):【C:\ProgramData\chocolatey】
        
       【Path】
        添加:
                【%ChocolateyInstall%\bin】
        
         环境变量 - 系统环境变量-添加
        变量名(N):【PYTHON_HOME】
        变量值(V):【C:\Python27】
        
       【Path】
        添加:
                【%PYTHON_HOME%】
                【%PYTHON_HOME%\Scripts】
               
        第二种(powershell.exe安装):
        @powershell -NoProfile -ExecutionPolicy Bypass -Command "iex ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1'))" && SET PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin
        
        
        PS:【必须安装Android 6.0(API 23) -- SDK Platform API 23】
            安卓模拟器使用【Custom Phone 5.1.0 API22 - 768x1280】
        
        当出现chocolatey is now ready时，表示安装完毕。
        
        1.安装Python 2.7.x版本（3.x版本不行）和node最新版.msi,还有jdk 1.8以上版本
        2.设置npm镜像以加速后面的过程
         【npm config set registry https://registry.npm.taobao.org --global】
         【npm config set disturl https://npm.taobao.org/dist --global】
        3.Yarn、React Native的命令行工具（react-native-cli）
         Yarn是Facebook提供的替代npm的工具，可以加速node模块的下载。React Native的命令行工具用于执行创建、初始化、更新项目、运行打包服务（packager）等任务。
         【npm install -g yarn react-native-cli】
        安装完yarn后同理也要设置镜像源：  
         【yarn config set registry https://registry.npm.taobao.org --global】
         【yarn config set disturl https://npm.taobao.org/dist --global】
          
          4.安装Android Studio,到Android Studio\bin\studio64.exe启动程序
          5.打开【File -- settings... --- Appearance -- System Settings -- Android SDK】
                【文件 -- 设置 -- 外观和行为——常规——Android SDK】
          
          若出现以下错误,说明没设置SDK
          Please specify a Androud SDK location
          
          解决方法:
                设置SDK
                      1.【Configure --  Project Defaults - Project Structure】
                      【配置 -- 项目默认设置 -- 项目结构】
                      2.Android SDK location(Android SDK的位置)选择SDK路径
                      比如:E:\Android\android\android-sdk_r24.3.4-windows\android-sdk-windows
                      3.JDK location(JDK的位置)选择jdk8以上版本
                      比如:E:\Android\android\android-sdk_r24.3.4-windows\android-sdk-windows
                      
          关闭重启自动打开最后一次项目
          【File -- settings... --- Appearance -- System Settings Reopen last project on statup(重启statup最后的项目)】
          
         第一次安装android studio时候弹出unable to access android sdk add-on list
        分析原因:
                电脑没有SDK而且你下载的android studio又是不带SDK的        
        解决方法:
                1.在自己安装的目录下找到：【bin\idea.properties】打开这个文件
                2.末尾添加一行【disable.android.first.run=true】就行了
          
          
          6.右下角选择【show Package Details】包装细节展示
          7.在SDK Platforms 选择↓
                Android 6.0(Marshmallow)下的
                 【Google APIs,Android 23】
                 【Android SDK Platform 23】
                 【Sources for Android SDK】
                 【Intel x86 Atom System Image】
                 【Intel x86 Atom 64 System Image】
                 【Google APIs Intel x86 Atom System Image】
                 【Google APIs Intel x86 Atom_64 System Image】
             翻译:
                【谷歌API，Android 23】
                【Android SDK平台23】
                【Android SDK】来源
                【英特尔x86 Atom系统图像】
                【英特尔x86 Atom 64系统的图像】
                【谷歌API英特尔x86 Atom系统图像】
                【谷歌API英特尔x86 atom_64系统图像】
          
          8.在SDK Tools(SDK工具)窗口
                选择【Show Package Details】显示包的细节
                然后在Android SDK Build Tools中勾选
                【Android SDK Build-Tools 23.0.1】（必须包含有这个版本。当然如果其他插件需要其他版本，你可以同时安装其他多个版本）。
                然后还要勾选最底部的
                【Android Support Repository.】
          
          测试安装
                【react-native init AwesomeProject】
                【cd AwesomeProject】
                【react-native run-android】
          
        1、打开夜神安卓模拟器
        2、在run-android前先执行【adb connect 127.0.0.1:62001】,执行此命令是连接到夜神模拟器（端口默认是52001,如果你的是62001就改成62001,根据实际情况来改）
        3、执行下【adb devices】查看下是否有连接设备，没有的话查看下第二步的IP和端口是否正确
        4、进入react native的项目根目录下，执行“run-android”。
          
          
        【adb】  查看是否输出一大串字符，可判断是否配置成功。
        【adb kill-server】   杀死adb，主要用于adb无法正常
        【adb start-server】  启动adb
        【adb devices】  查看adb服务
                devices设备
        在命令行管理模拟器设备（AVD）

        【android list】列出机器上所有已经安装的Android版本和AVD设备
        【android list avd】列出机器上所有已经安装的AVD设备；
        【android list sdk】列出机器上所有已经安装的SDK设备；
        【android list target】列出机器上所有已经安装的Android版本
        【android create avd】创建一个AVD设备
        【android delete avd】删除一个AVD设备
        【android update avd】升级一个AVD设备使其符合新的SDK环境
        【android create project】创建一个新的Android项目
        【android update project】更新一个已有的Android项目
        【android create test-project】创建一个新的Android测试项目
        【android update test-project】更新一个已有的Android测试项目
    例1：要查看当前系统上所有已安装的AVD设备，则可以输入：android list avd
        
        2.打开夜神模拟器
        3.打开cmd,执行以下代码连接设备
         【adb connect 127.0.0.1:62001】
        4.运行已经初始化的react-native包，先
        // 开启服务器
        【react-native start】
        //再运行安卓
        【react-native run-android】
          
          
         换了SDK版本,一定重新初始化项目
         出现红屏,成功
         1,点击Dismiss辞退
         2.摇一摇或【Ctr + 0】
         3.选择菜单：【Dev settings】开发环境
         4.选择【Debug server host & port for device】调试服务器主机和设备端口
         5.填写ipconfig的以太网适配器 本地连接 - IPv4地址
             比如:【172.16.10.46:8081】
                  【172.16.10.242:8081】
        ※:必须域名后面添加端口号,否则无法启动项目



        Couid not connect to development sever
        无法连接到服务器的开发
        http://blog.csdn.net/qq_25827845/article/details/52974991
       
连接不到开发的服务器。
        请按照以下的步骤来修复此问题：
        确保包服务器在运行
        确保你的设备或者模拟器连接着电脑，并且手机打开了USB调试模式，然后在cmd中运行adb devices来查看已经连接好的设备列表
        确保飞行模式是关闭的
        如果是使用真机来开发，输入 【adb reverse tcp:8081 tcp:8081】来检查设备
        输入IP：8081（这个大家都会）

        
         浏览器测试:
                http://localhost:8081/index.bundle?platform=android
        RN打debugger
                http://localhost:8081/debugger-ui/
        
        
        手机测试:
        
        在cmd中输入【adb reverse tcp:8081 tcp:8081】，结果如下：
                error：closed
        个人认为解决办法如下：
                1.手机-设置-应用程序-开发-usb调试打开再关闭一次
                2.重启手机，usb调试打开再关闭一次
                3.在cmd下Try 【adb kill-server】和【adb start-server】
        
                模拟器:
        打开 项目主目录\node_modules\react-native\local-cli\templates\HelloWorld\ios\HelloWorld\AppDelegate.m
        解决方式是：
        1.
                jsCodeLocation = [NSURL URLWithString:@"http://localhost:8081/index.ios.bundle?platform=ios&dev=true"];
        替换为
                jsCodeLocation = [NSURL URLWithString:@"http://127.0.0.1:8081/index.ios.bundle?platform=ios&dev=true"];  
        原因之一：做本地局域网开发环境，大部分都会做服务器映射处理，localhost 被指向特定的IP 而不是本机的127.0.0.1， 就会出现这样的问题。
        
        2.
        （1）终端cd到当前项目 然后npm start
        （2）所有终端关闭，直接xcode run  ,ios这块xcode运行  server终端会自己打开的。

        Android SDKolatform-tools版本文件
        SDK目录\platformsRR
        
          
         \node_modules\react-native\Libraries\WebSocket
       如果你需要在真机上启用调试功能，则需要打开RCTWebSocketExecutor.m文件，然后将其中的"localhost"改为你的电脑的IP地址，最后启用开发者菜单中的"Debug JS Remotely"选项。
          
          
          
          gradle
          出现错误:
          java.lang.UnsupportedClassVersionError: com/android/build/gradle/AppPlugin : Unsupported major.minor
          
          jdk版本不对
          Android Studio2.2必须使用JDK8及以上版本，而且是强制的。
          
        RN显示更多错误日志
        【gradlew compileDebug --stacktrace】
        如果上面的命令不管用，可以使用下面的命令试试
        【gradle compileDebug --stacktrace】
        
        \android\gradle\wrapper\gradle-wrapper.properties
        \android\app\build.gradle
         \android\build.gradle\build.gradle
         
         搜索文件
         【where /r C:\ adb.exe】
==============================================================
        解决RN真机调试[OPPO A59m v5.1系统][rn启动不了][RN无法启动]
        1.打开【RN项目\android\build.gradle】文件
                修改
                【classpath 'com.android.tools.build:gradle:2.2.3'】
                为
                【classpath 'com.android.tools.build:gradle:1.2.3'】
        2.打开【RN项目\android\gradle\wrapper\gradle-wrapper.properties】文件
                修改
                【distributionUrl=https\://services.gradle.org/distributions/gradle-2.14.1-all.zip】
                为
                【distributionUrl=https\://services.gradle.org/distributions/gradle-2.2-all.zip】
         
         【react-native start】或【npm start】启动服务
       3.再运行【react-native run-android】就没问题了
==============================================================
        错误1:
        The SDK directory 'E:\Android\android-sdk' does not exist.
        
        解决方案:
               1.打开【RN项目\android\local.properties】
               2.修改路径为本地的sdk
               sdk.dir=E\:\\Android\\android\\android-sdk_r24.3.4-windows\\android-sdk-windows
               
       Error:Execution failed for task ':app:processDebugResources'.

        错误2:
        Java.io.IOException: Could not delete path 'XXXXXX\XXXXX\ProjectName\Android\app\build\generated\source\r\debug\android'.

        解决方案:
                build文件无法删除导致的，解决办法：进入项目文件夹下手动删除android\app\build文件夹内的所有文件后再次运行

        
        错误3:
        Execution failed for task ':app:installDebug'
        com.android.builder.testing.api.DeviceException: com.android.ddmlib.InstallExc
tion: Failed to install all
        解决方案:
                如上:解决RN真机调试

        错误4:
       Execution failed for task ':app:dexDebug'.
       
       错误5:
        Task 'compileDebug' not found in root project 'Exchange'.

==============================================================
        RN运行项目需安装SDK
        Tools
                Android SDK Build-tools 26.0.1
        安卓Android 8.0.0 (API 26)
                安卓SDK Platform API 26
                
       Could not resolve all dependencies for configuration ':app:_debugApk'
       解决办法：
        是由于未安装 Android Surpport Responsitory，运行 sdk manager 找到 Extra 下的 android surpport responsitory 选中并安装即可
==============================================================
        RN创建指定版本[RN创建版本][RN添加版本][RN指定版本]
        react-native init test --source react-native@0.49.5
        
        react-native init MyApp --version 0.49.5
==============================================================
       【Unable to load script from assets index】
        解决React Native unable to load script from assets index.android.bundle on windows
        
         1.具体步骤：报错页面晃动手机，显示菜单 =》 点击Dev Settings =》 点击Debug server host & port for device =》 设置IP和端口（ex:192.168.0.20:8081）=》 点击返回 =》 页面是空白，再次点击摇一摇，选择Reload JS程序就显示出来了。
         
        第二种
        1.首先手动在main下建立一个assets文件夹【android\app\src\main】
        2.然后cmd 进入项目的根目录下执行：：
        【React-native bundle --platform Android --dev false --entry-file index.android.js --bundle-output android/app/src/main/assets/index.android.bundle --assets-dest android/app/src/main/res】
        
        3.再执行【react-native run-android】
        到这就结束了，基本这2个方法就可以解决React Native unable to load script from assets 了。
==============================================================
        VirtualBox模拟器中关于VT-x is disabled in BIOS
        电脑型号	联想 20H5A01YCD 笔记本电脑
        显示器	联想 LEN40B0 ( 15.5 英寸  )

        第一步骤:
        1.打开【Android Studio】,右下角选择【Configure(配置) --  SDK Manager(SDK管理器)】
        2.选择【Appearance & Behavior(外观和行为) -- Android SDK】,选中右侧第二个【SDK Tools】
        3.选择【Intel x86 Emulator Accelerator (HAXM installer) 6.2.1】(英特尔的x86模拟器加速器（haxm 6.2.1安装）)
        4.选择【OK】安装
        
        第二步骤:
        1.打开【SDK主目录\extras\intel\Hardware_Accelerated_Execution_Manager】
        2.安装【intelhaxm-android.exe】
        PS:win10若失败,右键以win8兼容性安装
        
        第三步骤
        联想ThinkPad
        1.开机按【F1】进BIOS界面
        2.上侧选择【Security】安全
        3.下面选择第四个【Virtualization】虚拟化,按【Enter】回车键
        4.选择第一个【Intel ((R)) Virtualization Technologu(英特尔（（R））的虚拟化的制作)】,按【Enter】回车键
        5.选择第二个【Enabled】启用
        6.【F10】保存,选择【Yes】
        7.重启完毕
==============================================================
        Genymotion快捷键[Genymotion模拟器快捷键]
        【Ctrl + M】打开RN菜单
==============================================================
        [react ntive][RN][RN学习][RN代码学习]
        // 引入组件
        【TextInput】
                 【style】 样式
                        【color】 字体颜色
                        【fontSize】 字体大小
                        【fontFamily】 字体
                        【fontStyle】 字的样式  （normal：正常italic：斜体）
                        【fontWeight】 设置粗体（normal：正常bold：粗体100，200，300， 400， 500， 600， 700， 800， 900）
                        【lineHeight】 行高
                        【textAlign】 文字对其方式（auto：自动对齐left：左对齐right：右对齐 center：居中对齐）
                        【textDecorationLine】 下划线和删除线样式（none：无线underline：下划线line-through：删除线 underline line-through：下划线和删除线）
                        
                  【underlineColorAndroid={'transparent'}】Android需要设置下划线为透明才能去掉下划线
                  【textAlignVertical="bottom"】  // 设置垂直位置 top或bottom
                  
                  【numberOfLines】文本行数限制，添加后超过限制行数文本会在末尾默认以...的形式省略。
                        numberOfLines={1}
                  【secureTextEntry={true}】


                RN引入网络图片
                 // 声明变量,保存网络图片路径(本地不能直接声明,必须导入)
                let img = {
                    uri: 'http://123.56.107.148/htmobile/resources/images/login-logo.png'
                };
                        <Image source = {img} style={styles.logo} />
                RN引入本地图片
                方案一: 【require('../images/logo.png')】直接在source引入
                        <Image source={require('../images/logo.png')} style={styles.logo}/>
                方案二: 提前声明【import logo from '../images/logo.png';】
                        然后再引入
                        <Image source = {logo} style={styles.logo} />
                        
        【ImageBackground】背景图片组件
                    <ImageBackground source={img} style={styles.logo}></ImageBackground>    
         
         
         
         【Dimensions】 本模块用于获取设备屏幕的宽高
         // 获取设备屏幕的宽高
        var Dimensions = require('Dimensions');

        // 获取宽和高
        var {width, height} = Dimensions.get('window');   
==============================================================
        WebStorm2017.1.1 EAP
        webstorm 2017 激活破解
        选择License server 填入【http://idea.imsxm.com/】点击Active即可。
        
        2017.2.27更新
        选择“license server” 输入：【http://idea.imsxm.com/】

        2016.2.2 版本的破解方式：
        安装以后，打开软件会弹出一个对话框；选择“license server” 输入：【http://idea.iteblog.com/key.php 】或【http://114.215.133.70:41017】或【http://idea.imsxm.com/】

        2016.2.3 版本的破解方式：
        目前最新的就是2.3版本，在打开的License Activation窗口中选择“activation code”，在输入框输入下面的注册码
【43B4A73YYJeyJsaWNlbnNlSWQiOiI0M0I0QTczWVlKIiwibGljZW5zZWVOYW1lIjoibGFuIHl1IiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IkZvciBlZHVjYXRpb25hbCB1c2Ugb25seSIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiSUkiLCJwYWlkVXBUbyI6IjIwMTctMDItMjUifSx7ImNvZGUiOiJBQyIsInBhaWRVcFRvIjoiMjAxNy0wMi0yNSJ9LHsiY29kZSI6IkRQTiIsInBhaWRVcFRvIjoiMjAxNy0wMi0yNSJ9LHsiY29kZSI6IlBTIiwicGFpZFVwVG8iOiIyMDE3LTAyLTI1In0seyJjb2RlIjoiRE0iLCJwYWlkVXBUbyI6IjIwMTctMDItMjUifSx7ImNvZGUiOiJDTCIsInBhaWRVcFRvIjoiMjAxNy0wMi0yNSJ9LHsiY29kZSI6IlJTMCIsInBhaWRVcFRvIjoiMjAxNy0wMi0yNSJ9LHsiY29kZSI6IlJDIiwicGFpZFVwVG8iOiIyMDE3LTAyLTI1In0seyJjb2RlIjoiUEMiLCJwYWlkVXBUbyI6IjIwMTctMDItMjUifSx7ImNvZGUiOiJSTSIsInBhaWRVcFRvIjoiMjAxNy0wMi0yNSJ9LHsiY29kZSI6IldTIiwicGFpZFVwVG8iOiIyMDE3LTAyLTI1In0seyJjb2RlIjoiREIiLCJwYWlkVXBUbyI6IjIwMTctMDItMjUifSx7ImNvZGUiOiJEQyIsInBhaWRVcFRvIjoiMjAxNy0wMi0yNSJ9XSwiaGFzaCI6IjMzOTgyOTkvMCIsImdyYWNlUGVyaW9kRGF5cyI6MCwiYXV0b1Byb2xvbmdhdGVkIjpmYWxzZSwiaXNBdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlfQ==keaxIkRgXPKE4BR/ZTs7s7UkP92LBxRe57HvWamu1EHVXTcV1B4f/KNQIrpOpN6dgpjig5eMVMPmo7yMPl+bmwQ8pTZaCGFuLqCHD1ngo6ywHKIQy0nR249sAUVaCl2wGJwaO4JeOh1opUx8chzSBVRZBMz0/MGyygi7duYAff9JQqfH3p/BhDTNM8eKl6z5tnneZ8ZG5bG1XvqFTqWk4FhGsEWdK7B+He44hPjBxKQl2gmZAodb6g9YxfTHhVRKQY5hQ7KPXNvh3ikerHkoaL5apgsVBZJOTDE2KdYTnGLmqxghFx6L0ofqKI6hMr48ergMyflDk6wLNGWJvYHLWw==MIIEPjCCAiagAwIBAgIBBTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE1MTEwMjA4MjE0OFoXDTE4MTEwMTA4MjE0OFowETEPMA0GA1UEAwwGcHJvZDN5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQC9WZuYgQedSuOc5TOUSrRigMw4/+wuC5EtZBfvdl4HT/8vzMW/oUlIP4YCvA0XKyBaCJ2iX+ZCDKoPfiYXiaSiH+HxAPV6J79vvouxKrWg2XV6ShFtPLP+0gPdGq3x9R3+kJbmAm8w+FOdlWqAfJrLvpzMGNeDU14YGXiZ9bVzmIQbwrBA+c/F4tlK/DV07dsNExihqFoibnqDiVNTGombaU2dDup2gwKdL81ua8EIcGNExHe82kjF4zwfadHk3bQVvbfdAwxcDy4xBjs3L4raPLU3yenSzr/OEur1+jfOxnQSmEcMXKXgrAQ9U55gwjcOFKrgOxEdek/Sk1VfOjvS+nuM4eyEruFMfaZHzoQiuw4IqgGc45ohFH0UUyjYcuFxxDSU9lMCv8qdHKm+wnPRb0l9l5vXsCBDuhAGYD6ss+Ga+aDY6f/qXZuUCEUOH3QUNbbCUlviSz6+GiRnt1kA9N2Qachl+2yBfaqUqr8h7Z2gsx5LcIf5kYNsqJ0GavXTVyWh7PYiKX4bs354ZQLUwwa/cG++2+wNWP+HtBhVxMRNTdVhSm38AknZlD+PTAsWGu9GyLmhti2EnVwGybSD2Dxmhxk3IPCkhKAK+pl0eWYGZWG3tJ9mZ7SowcXLWDFAk0lRJnKGFMTggrWjV8GYpw5bq23VmIqqDLgkNzuoog==】
==============================================================
       【WebStorm快捷键】
                【Ctrl + Shift + N】 搜索文件,或 【导航(N) -- 文件...(F)】中文会乱码
                【Ctrl + Shift + Alt + N】 通过一个字符快速查找位置
                【Ctrl + Shift + R】 搜索文件内容,全局
                【Ctrl + E】 最近打开文件
                【Ctrl + Alt + S】 设置
                【Ctrl + Shift + F12】 最大化当前窗口
                【Ctrl + G】 跳到指定行
                【Ctrl + D】 复制当前行
                【Ctrl + Y】 删除当前行
                【Ctrl + Alt + L】 格式化代码
                【Ctrl + W】选中单词,在括号处,点2次选中代码块
                【Ctrl + F4】关闭当前窗口
                【Ctrl + R】 替换内容
                【Ctrl + R】 跳到变量声明处
                【Ctrl + Shift + I】显示当前CSS选择器或者JS函数的详细信息
                【Ctrl + Shift + R】 搜索文件内容,全局
                
                【Shift + Alt + ↑】移动到上一行
                【Shift + Alt + ↓】移动到下一行
                
                【F3】和【Ctrl + L】查找下一个,必须【Ctrl + F】输入关键词才能使用
                【Shift + F3】查找下一个,必须【Ctrl + F】输入关键词才能使用
                
                【Shift + F6】重命名
                
                console.log$('$PARAM$');
                看到里面的$PARAM$了吗？那个是光标所在位置！
                
                在变量后【.log】,按【Tab】键,包围要打印东西
==============================================================
                WebStorm设置RN代码提示
                
                https://github.com/virtoolswebplayer/ReactNative-LiveTemplate
                下载工具包并解压,里面会有ReactNative.jar文件
                
                1.【文件(F) -- 导入设置...(I)】选择【ReactNative.jar】路径
                2.WebStorm安装目录新建【templates】文件夹,将【ReactNative.xml】放进去
                3.重启打开,每次输入【<】时,按【Ctrl + J】再输入首字母就有代码提示
==============================================================
                WebStorm展开左侧菜单[WebStorm左侧项目 目录定位当前编辑的文件]
                英文版:
                        齿轮下拉菜单里选中
                【Autoscroll to Source】
                【Autoscroll form Source】从/自动滚动到源代码

                汉化版
                汉化后的webstorm如果选择 从源代码处滚动 不出现左侧定位的按钮的话，可以在工具的根目录的lib文件夹下找到resources-cn.jar
                1.解压打开汉化版的【resources-cn.jar】
                        PS:不是解压出来
                2.打开【messages】文件夹，找到【UIBundle.properties】文件删除
                3.打开英文版的【resources-en.jar】
                4.把【messages\resources_en\UIBundle.properties】复制出来
                5.拖到汉化版的【messages\resources_en】文件夹
                        PS:IntelliJ IDEA同理
                6.重启webstorm即可
                
                
==============================================================
                WebStorm添加多个项目[WebStorm添加多个项目到当前工程目录]
                
                英文版:
                        File－> Settings －> Directories －> Add Content Root，选择你要加入的Project 点击OK －> Apply －> OK 搞定。
                        
                汉化版:
                        文件(F) -- 设置(T) -- Directories -- 添加内容根(C) -- 选择项目目录 -- 确定
                        
                        
              修改项目端口号:
             1.打开【项目主目录/node_modules/react-native/local-cli/server/server.js】66行
             2.在【default】后修改端口保存
             3.保存
             
             
         1.摇一摇或【Ctr + M】
         2.选择菜单：【Dev settings】开发环境
         3.选择【Debug server host & port for device】调试服务器主机和设备端口
         4.填写ipconfig的以太网适配器 本地连接 - IPv4地址
             比如:【172.16.10.242:8082】
         5.重新【react-native run-android】启动项目
==============================================================
                WebStorm配置RN
                1.在Command(命令)选择【run】
                2.在Scripts(脚本)选择【start】
                $FileDir$
==============================================================
                设置RN自动更改刷新
                1.摇一摇
                2.选择
                        【Enable Live Reload】(使生活重新加载)
                        【Enable Hot Reloading】使热装
                开启自动刷新
                
                关闭同上
                【Disable Live Reload】(禁用住重装)
                【Disable Hot Reloading】(禁用热重装)

==============================================================
                谷歌获取favicons网页图标[谷歌获取网页图标][获取网页图标][获取网站图标]
                /s2/favicons?domain=域名
==============================================================
        微信公众号
                【web.xml】
                【app.action.xml】
                【weChat.xml】
                【struts.xml】
                
                
                【weiixin.java】
                【WeixinCommonActionjava】
                【WeixinCoreAction.java】
==============================================================
        RN布局[rn样式]
        
        row
        【flexDirection: 'row'】
        主轴与行内轴方向作为默认的书写模式。即横向从左到右排列（左对齐）。
        row-reverse
        【flexDirection: 'row-reverse'】
        对齐方式与row相反。
        column：
        【flexDirection: 'column'】
        主轴与块轴方向作为默认的书写模式。即纵向从上往下排列（顶对齐）。
        column-reverse：
        对齐方式与column相反。
        
        View Style
        支持Flexbox、ShadowPropTypesIOS、Transforms属性。

        背面可见性

        backfaceVisibility enum('visible', 'hidden')
        背景颜色

        backgroundColor string
        边框颜色

        borderColor string
        borderTopColor string
        borderRightColor string
        borderBottomColor string
        borderLeftColor string
        边框圆角半径

        borderRadius number
        borderTopLeftRadius number
        borderTopRightRadius number
        borderBottomLeftRadius number
        borderBottomRightRadius number
        边框样式

        borderStyle enum('solid', 'dotted', 'dashed')
        边框宽度

        borderWidth number
        borderTopWidth number
        borderRightWidth number
        borderBottomWidth number
        borderLeftWidth number
        不透明度

        opacity number
        填充

        overflow enum('visible', 'hidden')
        测试ID（用来定位视图）

        testID string
        Image Style
        支持Flexbox和Transforms

        调整大小模式
        resizeMode Object.keys(ImageResizeMode)
        resizeMode : 枚举类型，（cover，contain，stretch）。表示图片适应的模式。
        
        背景颜色
        backgroundColor string
        边框属性

        borderColor string
        borderWidth number
        borderRadius number
        填充

        overflow enum('visible', 'hidden')
        色彩颜色

        tintColor string
        不透明度

        opacity number
        Text Style
        支持View的样式

        字体颜色

        color string
        字体

        fontFamily string
        字体大小

        fontSize number
        字体样式

        fontStyle enum('normal', 'italic')
        字体粗细（指定字体的粗细。大多数字体都支持’normal’和’bold’值。并非所有字体都支持所有的数字值。如果某个值不支持，则会自动选择最接近的值。）

        fontWeight enum("normal", 'bold', '100', '200', '300', '400', '500', '600', '700', '800', '900')
        字间距

        letterSpacing number
        行间距

        lineHeight number
        字体对齐方式（指定文本的对齐方式。其中’justify’值仅iOS支持。）

        textAlign enum("auto", 'left', 'right', 'center', 'justify')
        Flexbox Style
        宽高

        width number
        height number
        项目对齐

        alignItems enum('flex-start', 'flex-end', 'center', 'stretch')
        自身对齐

        alignSelf enum('auto', 'flex-start', 'flex-end', 'center', 'stretch')
        边框宽度

        borderBottomWidth number
        borderLeftWidth number
        borderRightWidth number
        borderTopWidth number
        borderWidth number
        弹性伸缩

        flex number
        弹性伸缩方向

        flexDirection enum('row', 'column')
        弹性伸缩包裹

        flexWrap enum('wrap', 'nowrap')
        证明内容

        justifyContent enum('flex-start', 'flex-end', 'center', 'space-between', 'space-around')
        外边距

        margin number
        marginBottom number
        marginLeft number
        marginRight number
        marginTop number 相当于同时设置marginTop和marginBottom
        marginVertical number 相当于同时设置marginTop和marginBottom
        marginHorizontal number 相当于同时设置marginLeft和marginRight
        内边距

        padding number
        paddingBottom number
        paddingLeft number
        paddingRight number
        paddingTop number
        paddingHorizontal number
        paddingVertical number
        位置（绝对、相对）

        position enum('absolute', 'relative')
        上下左右

        right number
        top number
        left number
        bottom number
        Transform
        属性变化

        transform [{perspective: number}, {rotate: string}, {rotateX: string}, {rotateY: string}, {rotateZ: string}, {scale: number}, {scaleX: number}, {scaleY: number}, {translateX: number}, {translateY: number}, {skewX: string}, {skewY: string}] 
        属性矩阵

        transformMatrix TransformMatrixPropType 
==============================================================
        RN更改端口[更改RN端口]
        【react-native start --port=端口号】
                ;例如:react-native start --port=8082 <= 指定8082端口服务启动项目    
        
        1.打开项目下【package.json】文件
        2.在【scripts -- start】下更改
                【node node_modules/react-native/local-cli/cli.js start --port=8083】
        3.这样用WebStorm启动的服务就是指定服务
        
        
        永久修改RN端口号:
             1.打开【项目主目录/node_modules/react-native/local-cli/server/server.js】66行
             2.在【default】后修改端口保存
             3.保存
==============================================================
        启动RN项目
        1.在项目目录运行
                【npm install react-native】
                
                